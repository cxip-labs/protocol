{
  "address": "0x121A20c9Ef777b98C323Abc7a12b933c55351Aef",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identityAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "IdentityBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identityAddress",
          "type": "address"
        }
      ],
      "name": "IdentityCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identityAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiatingWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "IdentityWalletAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "saltHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "secondaryWallet",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "verification",
          "type": "tuple"
        }
      ],
      "name": "createIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdentity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getWalletIdentity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "informAboutNewWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identityAddress",
          "type": "address"
        }
      ],
      "name": "isIdentityBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identityAddress",
          "type": "address"
        }
      ],
      "name": "isIdentityValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a36b38983c18bc4a91148cdf00a37ce5cfd88ede640d7cdc0ffbefe253fd686",
  "receipt": {
    "to": null,
    "from": "0x4D5a40f6d9F7215Dabd842d486Ba1c96651069e8",
    "contractAddress": "0x121A20c9Ef777b98C323Abc7a12b933c55351Aef",
    "transactionIndex": 21,
    "gasUsed": "814923",
    "logsBloom": "0x
    "blockHash": "0x240bad352435d7669516b637ba2368954f2bae74bbc7139a61fe824e21829ecc",
    "transactionHash": "0x5a36b38983c18bc4a91148cdf00a37ce5cfd88ede640d7cdc0ffbefe253fd686",
    "logs": [],
    "blockNumber": 10222600,
    "cumulativeGasUsed": "6114133",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "766b2c1c37fa858a5fa37cc61ece102c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"IdentityBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityAddress\",\"type\":\"address\"}],\"name\":\"IdentityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiatingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"IdentityWalletAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saltHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"secondaryWallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"verification\",\"type\":\"tuple\"}],\"name\":\"createIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"informAboutNewWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityAddress\",\"type\":\"address\"}],\"name\":\"isIdentityBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityAddress\",\"type\":\"address\"}],\"name\":\"isIdentityValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CXIP-Labs\",\"details\":\"For a CXIP Identity to be valid, it needs to be made through CXIP Provenance.\",\"events\":{\"IdentityBlacklisted(address,string)\":{\"details\":\"This is reserved for later use, in cases where an identity needs to be publicly blacklisted.\",\"params\":{\"identityAddress\":\"Address of the identity being blacklisted.\",\"reason\":\"A string URI to Arweave, IPFS, or HTTP with a detailed explanation for the blacklist.\"}},\"IdentityCreated(address)\":{\"details\":\"Can subscribe to this even on Provenance to get all CXIP created identities.\",\"params\":{\"identityAddress\":\"Address of the identity being created.\"}},\"IdentityWalletAdded(address,address,address)\":{\"details\":\"A wallet can only be added to one identity. It will not be possible to ever use it with another identity after that.\",\"params\":{\"identityAddress\":\"Address of the identity being created.\",\"initiatingWallet\":\"The address of wallet that initiated adding the new wallet.\",\"newWallet\":\"The address of new wallet being added.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"There is no data that needs to be set on first time deployment.\"},\"createIdentity(bytes32,address,(bytes32,bytes32,uint8))\":{\"details\":\"Only a wallet that is not already associated with any CXIP Identity can create a new identity.\",\"params\":{\"saltHash\":\"A salt made up of 12 bytes random data and 20 bytes msg.sender address.\",\"secondaryWallet\":\"An additional wallet to add to identity. Used mostly for proxy wallets.\",\"verification\":\"Signatures made by msg.sender to validate identity creation.\"}},\"getIdentity()\":{\"details\":\"Gets identity of msg.sender.\",\"returns\":{\"_0\":\"address Returns an identity contract address, or zero address if wallet is not associated with any identity.\"}},\"getWalletIdentity(address)\":{\"details\":\"Can also be used to check if a wallet can create a new identity.\",\"params\":{\"wallet\":\"Address of wallet to get identity for.\"},\"returns\":{\"_0\":\"address Returns an identity contract address, or zero address if wallet is not associated with any identity.\"}},\"informAboutNewWallet(address)\":{\"details\":\"Can only be called by a valid identity associated wallet.\",\"params\":{\"newWallet\":\"Address of wallet to emit event for.\"}},\"isIdentityBlacklisted(address)\":{\"details\":\"This is an optional function that can be used to decide if an identity should be not interacted with.\",\"params\":{\"identityAddress\":\"Contract address of the identity\"},\"returns\":{\"_0\":\"bool Returns true if identity was blacklisted.\"}},\"isIdentityValid(address)\":{\"details\":\"This is used to ensure provenance and prevent malicious actors from creating smart contract clones.\",\"params\":{\"identityAddress\":\"Contract address of the identity\"},\"returns\":{\"_0\":\"bool Returns true if identity was created through proper provenance.\"}}},\"stateVariables\":{\"_blacklistMap\":{\"details\":\"Special map for storing blacklisted identities.\"},\"_identityMap\":{\"details\":\"Used for mapping created identity addresses.\"},\"_reentrancyState\":{\"details\":\"Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED\"},\"_walletToIdentityMap\":{\"details\":\"Complete map of all wallets and their associated identities.\"}},\"title\":\"CXIP Provenance\",\"version\":1},\"userdoc\":{\"events\":{\"IdentityBlacklisted(address,string)\":{\"notice\":\"Event emitted when an identity gets blacklisted.\"},\"IdentityCreated(address)\":{\"notice\":\"Event emitted when a new identity is created.\"},\"IdentityWalletAdded(address,address,address)\":{\"notice\":\"Event emitted when a new wallet is added to the identity.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor is empty and only reentrancy guard is implemented.\"},\"createIdentity(bytes32,address,(bytes32,bytes32,uint8))\":{\"notice\":\"Create a new identity smart contract.\"},\"getIdentity()\":{\"notice\":\"Get the identity of current wallet.\"},\"getWalletIdentity(address)\":{\"notice\":\"Get the identity associated with a wallet.\"},\"informAboutNewWallet(address)\":{\"notice\":\"Tells provenance to emit IdentityWalletAdded event(s).\"},\"isIdentityBlacklisted(address)\":{\"notice\":\"Check if an identity is blacklisted.\"},\"isIdentityValid(address)\":{\"notice\":\"Check if an identity is valid.\"}},\"notice\":\"A smart contract for managing and validating all of CXIP's provenance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CxipProvenance.sol\":\"CxipProvenance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/CxipProvenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./interface/ICxipIdentity.sol\\\";\\nimport \\\"./interface/ICxipRegistry.sol\\\";\\nimport \\\"./library/Address.sol\\\";\\nimport \\\"./library/Signature.sol\\\";\\nimport \\\"./struct/Verification.sol\\\";\\n\\n/**\\n * @title CXIP Provenance\\n * @author CXIP-Labs\\n * @notice A smart contract for managing and validating all of CXIP's provenance.\\n * @dev For a CXIP Identity to be valid, it needs to be made through CXIP Provenance.\\n */\\ncontract CxipProvenance {\\n    /**\\n     * @dev Complete map of all wallets and their associated identities.\\n     */\\n    mapping(address => address) private _walletToIdentityMap;\\n    /**\\n     * @dev Used for mapping created identity addresses.\\n     */\\n    mapping(address => bool) private _identityMap;\\n    /**\\n     * @dev Special map for storing blacklisted identities.\\n     */\\n    mapping(address => bool) private _blacklistMap;\\n\\n    /**\\n     * @dev Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED\\n     */\\n    uint256 private _reentrancyState;\\n\\n    /**\\n     * @notice Event emitted when an identity gets blacklisted.\\n     * @dev This is reserved for later use, in cases where an identity needs to be publicly blacklisted.\\n     * @param identityAddress Address of the identity being blacklisted.\\n     * @param reason A string URI to Arweave, IPFS, or HTTP with a detailed explanation for the blacklist.\\n     */\\n    event IdentityBlacklisted(address indexed identityAddress, string reason);\\n    /**\\n     * @notice Event emitted when a new identity is created.\\n     * @dev Can subscribe to this even on Provenance to get all CXIP created identities.\\n     * @param identityAddress Address of the identity being created.\\n     */\\n    event IdentityCreated(address indexed identityAddress);\\n    /**\\n     * @notice Event emitted when a new wallet is added to the identity.\\n     * @dev A wallet can only be added to one identity. It will not be possible to ever use it with another identity after that.\\n     * @param identityAddress Address of the identity being created.\\n     * @param initiatingWallet The address of wallet that initiated adding the new wallet.\\n     * @param newWallet The address of new wallet being added.\\n     */\\n    event IdentityWalletAdded(\\n        address indexed identityAddress,\\n        address indexed initiatingWallet,\\n        address indexed newWallet\\n    );\\n\\n    /**\\n     * @notice Constructor is empty and only reentrancy guard is implemented.\\n     * @dev There is no data that needs to be set on first time deployment.\\n     */\\n    constructor() {\\n        _reentrancyState = 1;\\n    }\\n\\n    /**\\n     * @dev Implementation from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\n     */\\n    modifier nonReentrant() {\\n        require(_reentrancyState != 2, \\\"ReentrancyGuard: reentrant call\\\");\\n        _reentrancyState = 2;\\n        _;\\n        _reentrancyState = 1;\\n    }\\n\\n    /**\\n     * @notice Create a new identity smart contract.\\n     * @dev Only a wallet that is not already associated with any CXIP Identity can create a new identity.\\n     * @param saltHash A salt made up of 12 bytes random data and 20 bytes msg.sender address.\\n     * @param secondaryWallet An additional wallet to add to identity. Used mostly for proxy wallets.\\n     * @param verification Signatures made by msg.sender to validate identity creation.\\n     */\\n    function createIdentity(\\n        bytes32 saltHash,\\n        address secondaryWallet,\\n        Verification calldata verification\\n    ) public nonReentrant {\\n        bool usingSecondaryWallet = !Address.isZero(secondaryWallet);\\n        address wallet = msg.sender;\\n        require(\\n            !Address.isContract(wallet),\\n            \\\"CXIP: cannot use smart contracts\\\"\\n        );\\n        require(\\n            Address.isZero(_walletToIdentityMap[wallet]),\\n            \\\"CXIP: wallet already used\\\"\\n        );\\n        require(\\n            address(\\n                uint160(\\n                    bytes20(saltHash)\\n                )\\n            ) == wallet,\\n            \\\"CXIP: invalid salt hash\\\"\\n        );\\n        if(usingSecondaryWallet) {\\n            require(\\n                !Address.isContract(secondaryWallet),\\n                \\\"CXIP: cannot use smart contracts\\\"\\n            );\\n            require(\\n                Address.isZero(_walletToIdentityMap[secondaryWallet]),\\n                \\\"CXIP: second wallet already used\\\"\\n            );\\n            require(\\n                Signature.Valid(\\n                    secondaryWallet,\\n                    verification.r,\\n                    verification.s,\\n                    verification.v,\\n                    abi.encodePacked(\\n                        address(this),\\n                        wallet,\\n                        secondaryWallet\\n                    )\\n                ),\\n                \\\"CXIP: invalid signature\\\"\\n            );\\n        }\\n        bytes memory bytecode = hex\\\"608060405234801561001057600080fd5b50610128806100206000396000f3fe608060408190527f38dc9c6800000000000000000000000000000000000000000000000000000000815260009073deaDDeADDEaDdeaDdEAddEADDEAdDeadDEADDEaD906338dc9c689060849060209060048186803b158015605f57600080fd5b505afa1580156072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906094919060b9565b90503660008037600080366000845af43d6000803e80801560b4573d6000f35b3d6000fd5b60006020828403121560c9578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811460eb578182fd5b939250505056fea2646970667358221220fdc58b44f80b9f0e5d40441fd91201d5e8359fd755ec84feeef0b794c446ba9a64736f6c63430008040033\\\";\\n        address identityAddress;\\n        assembly {\\n            identityAddress := create2(\\n                0,\\n                add(bytecode, 0x20),\\n                mload(bytecode),\\n                saltHash\\n            )\\n        }\\n        ICxipIdentity(identityAddress).init(wallet, secondaryWallet);\\n        _walletToIdentityMap[wallet] = identityAddress;\\n        _identityMap[identityAddress] = true;\\n        _notifyIdentityCreated(identityAddress);\\n        _notifyIdentityWalletAdded(identityAddress, wallet, wallet);\\n        if(usingSecondaryWallet) {\\n            _notifyIdentityWalletAdded(\\n                identityAddress,\\n                wallet,\\n                secondaryWallet\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Tells provenance to emit IdentityWalletAdded event(s).\\n     * @dev Can only be called by a valid identity associated wallet.\\n     * @param newWallet Address of wallet to emit event for.\\n     */\\n    function informAboutNewWallet(address newWallet) public nonReentrant {\\n        address identityAddress = msg.sender;\\n        require(\\n            _identityMap[identityAddress],\\n            \\\"CXIP: invalid Identity contract\\\"\\n        );\\n        require(\\n            Address.isZero(_walletToIdentityMap[newWallet]),\\n            \\\"CXIP: wallet already added\\\"\\n        );\\n        ICxipIdentity identity = ICxipIdentity(identityAddress);\\n        require(\\n            identity.isWalletRegistered(newWallet),\\n            \\\"CXIP: unregistered wallet\\\"\\n        );\\n        _notifyIdentityWalletAdded(\\n            identityAddress,\\n            identity.getAuthorizer(newWallet),\\n            newWallet\\n        );\\n        _walletToIdentityMap[newWallet] = identityAddress;\\n    }\\n\\n    /**\\n     * @notice Get the identity of current wallet.\\n     * @dev Gets identity of msg.sender.\\n     * @return address Returns an identity contract address, or zero address if wallet is not associated with any identity.\\n     */\\n    function getIdentity() public view returns (address) {\\n        return _walletToIdentityMap[msg.sender];\\n    }\\n\\n    /**\\n     * @notice Get the identity associated with a wallet.\\n     * @dev Can also be used to check if a wallet can create a new identity.\\n     * @param wallet Address of wallet to get identity for.\\n     * @return address Returns an identity contract address, or zero address if wallet is not associated with any identity.\\n     */\\n    function getWalletIdentity(address wallet) public view returns (address) {\\n        return _walletToIdentityMap[wallet];\\n    }\\n\\n    /**\\n     * @notice Check if an identity is blacklisted.\\n     * @dev This is an optional function that can be used to decide if an identity should be not interacted with.\\n     * @param identityAddress Contract address of the identity\\n     * @return bool Returns true if identity was blacklisted.\\n     */\\n    function isIdentityBlacklisted(\\n        address identityAddress\\n    ) public view returns (bool) {\\n        return _blacklistMap[identityAddress];\\n    }\\n\\n    /**\\n     * @notice Check if an identity is valid.\\n     * @dev This is used to ensure provenance and prevent malicious actors from creating smart contract clones.\\n     * @param identityAddress Contract address of the identity\\n     * @return bool Returns true if identity was created through proper provenance.\\n     */\\n    function isIdentityValid(\\n        address identityAddress\\n    ) public view returns (bool) {\\n        return (\\n            _identityMap[identityAddress]\\n            && !_blacklistMap[identityAddress]\\n        );\\n    }\\n\\n    /**\\n     * @dev Trigger the IdentityBlacklisted event.\\n     * @param contractAddress Address of identity that is being blacklisted.\\n     * @param reason String URI of Arweave, IPFS, or HTTP link explaining reason for blacklisting.\\n     */\\n    function _notifyIdentityBlacklisted(\\n        address contractAddress,\\n        string calldata reason\\n    ) internal {\\n        emit IdentityBlacklisted(contractAddress, reason);\\n    }\\n\\n    /**\\n     * @dev Trigger the IdentityCreated event.\\n     * @param contractAddress Address of identity that is being created.\\n     */\\n    function _notifyIdentityCreated(address contractAddress) internal {\\n        emit IdentityCreated(contractAddress);\\n    }\\n\\n    /**\\n     * @dev Trigger the IdentityWalletAdded event.\\n     * @param identityAddress Address of identity that wallet is being added to.\\n     * @param intiatingWallet Address of wallet that is triggering this event.\\n     * @param newWallet Address of wallet that is being added to this identity.\\n     */\\n    function _notifyIdentityWalletAdded(\\n        address identityAddress,\\n        address intiatingWallet,\\n        address newWallet\\n    ) internal {\\n        emit IdentityWalletAdded(identityAddress, intiatingWallet, newWallet);\\n    }\\n\\n    /**\\n     * @dev Get the top-level CXIP Registry smart contract. Function must always be internal to prevent miss-use/abuse through bad programming practices.\\n     * @return ICxipRegistry The address of the top-level CXIP Registry smart contract.\\n     */\\n    function getRegistry() internal pure returns (ICxipRegistry) {\\n        return ICxipRegistry(0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);\\n    }\\n}\\n\",\"keccak256\":\"0x3397744c63ed5f115796401e317ecefaebbf5667748ee9ac350a22dade1c7ea0\",\"license\":\"MIT\"},\"contracts/interface/ICxipIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/InterfaceType.sol\\\";\\nimport \\\"../struct/Token.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\n\\ninterface ICxipIdentity {\\n    function addSignedWallet(\\n        address newWallet,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function addWallet(address newWallet) external;\\n\\n    function connectWallet() external;\\n\\n    function createERC721Token(\\n        address collection,\\n        uint256 id,\\n        TokenData calldata tokenData,\\n        Verification calldata verification\\n    ) external returns (uint256);\\n\\n    function createERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData\\n    ) external returns (address);\\n\\n    function createCustomERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData,\\n        bytes32 slot,\\n        bytes memory bytecode\\n    ) external returns (address);\\n\\n    function init(address wallet, address secondaryWallet) external;\\n\\n    function getAuthorizer(address wallet) external view returns (address);\\n\\n    function getCollectionById(uint256 index) external view returns (address);\\n\\n    function getCollectionType(address collection) external view returns (InterfaceType);\\n\\n    function getWallets() external view returns (address[] memory);\\n\\n    function isCollectionCertified(address collection) external view returns (bool);\\n\\n    function isCollectionRegistered(address collection) external view returns (bool);\\n\\n    function isNew() external view returns (bool);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function isTokenCertified(address collection, uint256 tokenId) external view returns (bool);\\n\\n    function isTokenRegistered(address collection, uint256 tokenId) external view returns (bool);\\n\\n    function isWalletRegistered(address wallet) external view returns (bool);\\n\\n    function listCollections(uint256 offset, uint256 length)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function nextNonce(address wallet) external view returns (uint256);\\n\\n    function totalCollections() external view returns (uint256);\\n\\n    function isCollectionOpen(address collection) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x04e91a9e35ef22a807346515245afc515a5f1b0358fa2cb8272cce5bae35f325\",\"license\":\"MIT\"},\"contracts/interface/ICxipRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipRegistry {\\n    function getAsset() external view returns (address);\\n\\n    function getAssetSigner() external view returns (address);\\n\\n    function getAssetSource() external view returns (address);\\n\\n    function getCopyright() external view returns (address);\\n\\n    function getCopyrightSource() external view returns (address);\\n\\n    function getCustomSource(bytes32 name) external view returns (address);\\n\\n    function getCustomSourceFromString(string memory name) external view returns (address);\\n\\n    function getERC1155CollectionSource() external view returns (address);\\n\\n    function getERC721CollectionSource() external view returns (address);\\n\\n    function getIdentitySource() external view returns (address);\\n\\n    function getPA1D() external view returns (address);\\n\\n    function getPA1DSource() external view returns (address);\\n\\n    function getProvenance() external view returns (address);\\n\\n    function getProvenanceSource() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function setAsset(address proxy) external;\\n\\n    function setAssetSigner(address source) external;\\n\\n    function setAssetSource(address source) external;\\n\\n    function setCopyright(address proxy) external;\\n\\n    function setCopyrightSource(address source) external;\\n\\n    function setCustomSource(string memory name, address source) external;\\n\\n    function setERC1155CollectionSource(address source) external;\\n\\n    function setERC721CollectionSource(address source) external;\\n\\n    function setIdentitySource(address source) external;\\n\\n    function setPA1D(address proxy) external;\\n\\n    function setPA1DSource(address source) external;\\n\\n    function setProvenance(address proxy) external;\\n\\n    function setProvenanceSource(address source) external;\\n}\\n\",\"keccak256\":\"0x955bdf21dd441b5f52524655fec5b24a580ab498cf746e736f6a1b92ff36a959\",\"license\":\"MIT\"},\"contracts/library/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 &&\\n            codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\\n    }\\n\\n    function isZero(address account) internal pure returns (bool) {\\n        return (account == address(0));\\n    }\\n}\\n\",\"keccak256\":\"0x53828b644743921c47d7b36278f23203cd56d18c1f57a6833cc316558befffef\",\"license\":\"MIT\"},\"contracts/library/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Signature {\\n    function Derive(\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            address derived1,\\n            address derived2,\\n            address derived3,\\n            address derived4\\n        )\\n    {\\n        bytes32 encoded32;\\n        assembly {\\n            encoded32 := mload(add(encoded, 32))\\n        }\\n        derived1 = ecrecover(encoded32, v, r, s);\\n        derived2 = ecrecover(\\n            keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32)),\\n            v,\\n            r,\\n            s\\n        );\\n        encoded32 = keccak256(encoded);\\n        derived3 = ecrecover(encoded32, v, r, s);\\n        encoded32 = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32));\\n        derived4 = ecrecover(encoded32, v, r, s);\\n    }\\n\\n    function PackMessage(bytes memory encoded, bool geth) internal pure returns (bytes32) {\\n        bytes32 hash = keccak256(encoded);\\n        if (geth) {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        }\\n        return hash;\\n    }\\n\\n    function Valid(\\n        address target,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory encoded\\n    ) internal pure returns (bool) {\\n        bytes32 encoded32;\\n        address derived;\\n        if (encoded.length == 32) {\\n            assembly {\\n                encoded32 := mload(add(encoded, 32))\\n            }\\n            derived = ecrecover(encoded32, v, r, s);\\n            if (target == derived) {\\n                return true;\\n            }\\n            derived = ecrecover(\\n                keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32)),\\n                v,\\n                r,\\n                s\\n            );\\n            if (target == derived) {\\n                return true;\\n            }\\n        }\\n        bytes32 hash = keccak256(encoded);\\n        derived = ecrecover(hash, v, r, s);\\n        if (target == derived) {\\n            return true;\\n        }\\n        hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        derived = ecrecover(hash, v, r, s);\\n        return target == derived;\\n    }\\n}\\n\",\"keccak256\":\"0xf8e8db87fb826bea8bc1ed531b9c5362d054a2c87c516bbc342caeca1ef5b523\",\"license\":\"MIT\"},\"contracts/struct/CollectionData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./UriType.sol\\\";\\n\\nstruct CollectionData {\\n    bytes32 name;\\n    bytes32 name2;\\n    bytes32 symbol;\\n    address royalties;\\n    uint96 bps;\\n}\\n\",\"keccak256\":\"0x328167148d845d1945ef8b77f710750d10cd38d2c8510e22ca52ec67781e3b8f\",\"license\":\"MIT\"},\"contracts/struct/InterfaceType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum InterfaceType {\\n    NULL, // 0\\n    ERC20, // 1\\n    ERC721, // 2\\n    ERC1155 // 3\\n}\\n\",\"keccak256\":\"0xed4f93a0fc084fa9d0a55d5e7c11f53e34b4c0d45d93de6ff03f345ae9a52885\",\"license\":\"MIT\"},\"contracts/struct/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./InterfaceType.sol\\\";\\n\\nstruct Token {\\n    address collection;\\n    uint256 tokenId;\\n    InterfaceType tokenType;\\n    address creator;\\n}\\n\",\"keccak256\":\"0xa9c13c64d8f611f96d8b4c39eb42dab1a05d70119f351047ee939e63d3a29e6f\",\"license\":\"MIT\"},\"contracts/struct/TokenData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./Verification.sol\\\";\\n\\nstruct TokenData {\\n    bytes32 payloadHash;\\n    Verification payloadSignature;\\n    address creator;\\n    bytes32 arweave;\\n    bytes11 arweave2;\\n    bytes32 ipfs;\\n    bytes14 ipfs2;\\n}\\n\",\"keccak256\":\"0xd7288c705f3247427487e4491a7cddb84a42af2a32720a16f75c8950380a717d\",\"license\":\"MIT\"},\"contracts/struct/UriType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum UriType {\\n    ARWEAVE, // 0\\n    IPFS, // 1\\n    HTTP // 2\\n}\\n\",\"keccak256\":\"0xe64f56b37ab2043dd80ae3b06abb928151837a546653ea0bd350d9078ccb29a6\",\"license\":\"MIT\"},\"contracts/struct/Verification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nstruct Verification {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n}\\n\",\"keccak256\":\"0x56a68601446e86e6a5d8bc4dc66df60fb6fb1518c4cc4fd0e9a87d50386a8652\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600355610d63806100256000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630172e60e1461006757806336afc6fa1461008f5780634b19fac8146100b65780638ea08f59146100e2578063e327f60b146100f7578063eb32df301461010a575b600080fd5b61007a610075366004610a4d565b610136565b60405190151581526020015b60405180910390f35b336000908152602081905260409020546001600160a01b03165b6040516100869190610a6a565b6100a96100c4366004610a4d565b6001600160a01b039081166000908152602081905260409020541690565b6100f56100f0366004610a7e565b61017d565b005b6100f5610105366004610a4d565b6104e3565b61007a610118366004610a4d565b6001600160a01b031660009081526002602052604090205460ff1690565b6001600160a01b03811660009081526001602052604081205460ff16801561017757506001600160a01b03821660009081526002602052604090205460ff16155b92915050565b600354600214156101a95760405162461bcd60e51b81526004016101a090610ac8565b60405180910390fd5b60026003556001600160a01b0382161515336101c481610734565b156101e15760405162461bcd60e51b81526004016101a090610aff565b6001600160a01b0381811660009081526020819052604090205416156102455760405162461bcd60e51b815260206004820152601960248201527810d612540e881dd85b1b195d08185b1c9958591e481d5cd959603a1b60448201526064016101a0565b606085901c6001600160a01b0382161461029b5760405162461bcd60e51b8152602060048201526017602482015276086b092a07440d2dcecc2d8d2c840e6c2d8e840d0c2e6d604b1b60448201526064016101a0565b81156103d8576102aa84610734565b156102c75760405162461bcd60e51b81526004016101a090610aff565b6001600160a01b03848116600090815260208190526040902054161561032f5760405162461bcd60e51b815260206004820181905260248201527f435849503a207365636f6e642077616c6c657420616c7265616479207573656460448201526064016101a0565b610392848435602086013561034a6060880160408901610b34565b6040516bffffffffffffffffffffffff1930606090811b8216602084015288811b821660348401528b901b166048820152605c0160405160208183030381529060405261076e565b6103d85760405162461bcd60e51b8152602060048201526017602482015276435849503a20696e76616c6964207369676e617475726560481b60448201526064016101a0565b60006040518061018001604052806101488152602001610be6610148913990506000868251602084016000f560405163784d200b60e11b81526001600160a01b03858116600483015288811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561045357600080fd5b505af1158015610467573d6000803e3d6000fd5b505050506001600160a01b0383811660009081526020818152604080832080546001600160a01b0319169486169485179055928252600190819052919020805460ff191690911790556104b9816109af565b6104c48184856109e6565b83156104d5576104d58184886109e6565b505060016003555050505050565b600354600214156105065760405162461bcd60e51b81526004016101a090610ac8565b60026003553360008181526001602052604090205460ff1661056a5760405162461bcd60e51b815260206004820152601f60248201527f435849503a20696e76616c6964204964656e7469747920636f6e74726163740060448201526064016101a0565b6001600160a01b0382811660009081526020819052604090205416156105d25760405162461bcd60e51b815260206004820152601a60248201527f435849503a2077616c6c657420616c726561647920616464656400000000000060448201526064016101a0565b604051637f247e4960e01b815281906001600160a01b03821690637f247e4990610600908690600401610a6a565b602060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610b57565b6106895760405162461bcd60e51b815260206004820152601960248201527810d612540e881d5b9c9959da5cdd195c9959081dd85b1b195d603a1b60448201526064016101a0565b61070082826001600160a01b031663757df8fd866040518263ffffffff1660e01b81526004016106b99190610a6a565b602060405180830381865afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa9190610b79565b856109e6565b506001600160a01b03918216600090815260208190526040902080546001600160a01b031916919092161790556001600355565b6000813f801580159061076757507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708114155b9392505050565b60008060008351602014156108965760208401519150600182868989604051600081526020016040526040516107a79493929190610b96565b6020604051602081039080840390855afa1580156107c9573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b031614156107fa576001925050506109a6565b60018260405160200161080d9190610bb4565b60405160208183030381529060405280519060200120868989604051600081526020016040526040516108439493929190610b96565b6020604051602081039080840390855afa158015610865573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b03161415610896576001925050506109a6565b600084805190602001209050600181878a8a604051600081526020016040526040516108c59493929190610b96565b6020604051602081039080840390855afa1580156108e7573d6000803e3d6000fd5b505050602060405103519150816001600160a01b0316896001600160a01b0316141561091957600193505050506109a6565b8060405160200161092a9190610bb4565b604051602081830303815290604052805190602001209050600181878a8a604051600081526020016040526040516109659493929190610b96565b6020604051602081039080840390855afa158015610987573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038b81169116149450505050505b95945050505050565b6040516001600160a01b038216907fac993fde3b9423ff59e4a23cded8e89074c9c8740920d1d870f586ba7c5c8cf090600090a250565b806001600160a01b0316826001600160a01b0316846001600160a01b03167fb0c925de9f75be2b7e6846649175f19d3a5a2697cbd65f9494406076cf546fa160405160405180910390a4505050565b6001600160a01b0381168114610a4a57600080fd5b50565b600060208284031215610a5f57600080fd5b813561076781610a35565b6001600160a01b0391909116815260200190565b600080600083850360a0811215610a9457600080fd5b843593506020850135610aa681610a35565b92506060603f1982011215610aba57600080fd5b506040840190509250925092565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f435849503a2063616e6e6f742075736520736d61727420636f6e747261637473604082015260600190565b600060208284031215610b4657600080fd5b813560ff8116811461076757600080fd5b600060208284031215610b6957600080fd5b8151801515811461076757600080fd5b600060208284031215610b8b57600080fd5b815161076781610a35565b93845260ff9290921660208401526040830152606082015260800190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c019056fe608060405234801561001057600080fd5b50610128806100206000396000f3fe608060408190527f38dc9c6800000000000000000000000000000000000000000000000000000000815260009073deaddeaddeaddeaddeaddeaddeaddeaddeaddead906338dc9c689060849060209060048186803b158015605f57600080fd5b505afa1580156072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906094919060b9565b90503660008037600080366000845af43d6000803e80801560b4573d6000f35b3d6000fd5b60006020828403121560c9578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811460eb578182fd5b939250505056fea2646970667358221220fdc58b44f80b9f0e5d40441fd91201d5e8359fd755ec84feeef0b794c446ba9a64736f6c63430008040033a26469706673582212207dd9955031980f5c6c573c6177c8e4638b332903f1b300cb5e7f1bc7dcb8099a64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630172e60e1461006757806336afc6fa1461008f5780634b19fac8146100b65780638ea08f59146100e2578063e327f60b146100f7578063eb32df301461010a575b600080fd5b61007a610075366004610a4d565b610136565b60405190151581526020015b60405180910390f35b336000908152602081905260409020546001600160a01b03165b6040516100869190610a6a565b6100a96100c4366004610a4d565b6001600160a01b039081166000908152602081905260409020541690565b6100f56100f0366004610a7e565b61017d565b005b6100f5610105366004610a4d565b6104e3565b61007a610118366004610a4d565b6001600160a01b031660009081526002602052604090205460ff1690565b6001600160a01b03811660009081526001602052604081205460ff16801561017757506001600160a01b03821660009081526002602052604090205460ff16155b92915050565b600354600214156101a95760405162461bcd60e51b81526004016101a090610ac8565b60405180910390fd5b60026003556001600160a01b0382161515336101c481610734565b156101e15760405162461bcd60e51b81526004016101a090610aff565b6001600160a01b0381811660009081526020819052604090205416156102455760405162461bcd60e51b815260206004820152601960248201527810d612540e881dd85b1b195d08185b1c9958591e481d5cd959603a1b60448201526064016101a0565b606085901c6001600160a01b0382161461029b5760405162461bcd60e51b8152602060048201526017602482015276086b092a07440d2dcecc2d8d2c840e6c2d8e840d0c2e6d604b1b60448201526064016101a0565b81156103d8576102aa84610734565b156102c75760405162461bcd60e51b81526004016101a090610aff565b6001600160a01b03848116600090815260208190526040902054161561032f5760405162461bcd60e51b815260206004820181905260248201527f435849503a207365636f6e642077616c6c657420616c7265616479207573656460448201526064016101a0565b610392848435602086013561034a6060880160408901610b34565b6040516bffffffffffffffffffffffff1930606090811b8216602084015288811b821660348401528b901b166048820152605c0160405160208183030381529060405261076e565b6103d85760405162461bcd60e51b8152602060048201526017602482015276435849503a20696e76616c6964207369676e617475726560481b60448201526064016101a0565b60006040518061018001604052806101488152602001610be6610148913990506000868251602084016000f560405163784d200b60e11b81526001600160a01b03858116600483015288811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561045357600080fd5b505af1158015610467573d6000803e3d6000fd5b505050506001600160a01b0383811660009081526020818152604080832080546001600160a01b0319169486169485179055928252600190819052919020805460ff191690911790556104b9816109af565b6104c48184856109e6565b83156104d5576104d58184886109e6565b505060016003555050505050565b600354600214156105065760405162461bcd60e51b81526004016101a090610ac8565b60026003553360008181526001602052604090205460ff1661056a5760405162461bcd60e51b815260206004820152601f60248201527f435849503a20696e76616c6964204964656e7469747920636f6e74726163740060448201526064016101a0565b6001600160a01b0382811660009081526020819052604090205416156105d25760405162461bcd60e51b815260206004820152601a60248201527f435849503a2077616c6c657420616c726561647920616464656400000000000060448201526064016101a0565b604051637f247e4960e01b815281906001600160a01b03821690637f247e4990610600908690600401610a6a565b602060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610b57565b6106895760405162461bcd60e51b815260206004820152601960248201527810d612540e881d5b9c9959da5cdd195c9959081dd85b1b195d603a1b60448201526064016101a0565b61070082826001600160a01b031663757df8fd866040518263ffffffff1660e01b81526004016106b99190610a6a565b602060405180830381865afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa9190610b79565b856109e6565b506001600160a01b03918216600090815260208190526040902080546001600160a01b031916919092161790556001600355565b6000813f801580159061076757507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708114155b9392505050565b60008060008351602014156108965760208401519150600182868989604051600081526020016040526040516107a79493929190610b96565b6020604051602081039080840390855afa1580156107c9573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b031614156107fa576001925050506109a6565b60018260405160200161080d9190610bb4565b60405160208183030381529060405280519060200120868989604051600081526020016040526040516108439493929190610b96565b6020604051602081039080840390855afa158015610865573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b03161415610896576001925050506109a6565b600084805190602001209050600181878a8a604051600081526020016040526040516108c59493929190610b96565b6020604051602081039080840390855afa1580156108e7573d6000803e3d6000fd5b505050602060405103519150816001600160a01b0316896001600160a01b0316141561091957600193505050506109a6565b8060405160200161092a9190610bb4565b604051602081830303815290604052805190602001209050600181878a8a604051600081526020016040526040516109659493929190610b96565b6020604051602081039080840390855afa158015610987573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038b81169116149450505050505b95945050505050565b6040516001600160a01b038216907fac993fde3b9423ff59e4a23cded8e89074c9c8740920d1d870f586ba7c5c8cf090600090a250565b806001600160a01b0316826001600160a01b0316846001600160a01b03167fb0c925de9f75be2b7e6846649175f19d3a5a2697cbd65f9494406076cf546fa160405160405180910390a4505050565b6001600160a01b0381168114610a4a57600080fd5b50565b600060208284031215610a5f57600080fd5b813561076781610a35565b6001600160a01b0391909116815260200190565b600080600083850360a0811215610a9457600080fd5b843593506020850135610aa681610a35565b92506060603f1982011215610aba57600080fd5b506040840190509250925092565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f435849503a2063616e6e6f742075736520736d61727420636f6e747261637473604082015260600190565b600060208284031215610b4657600080fd5b813560ff8116811461076757600080fd5b600060208284031215610b6957600080fd5b8151801515811461076757600080fd5b600060208284031215610b8b57600080fd5b815161076781610a35565b93845260ff9290921660208401526040830152606082015260800190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c019056fe608060405234801561001057600080fd5b50610128806100206000396000f3fe608060408190527f38dc9c6800000000000000000000000000000000000000000000000000000000815260009073deaddeaddeaddeaddeaddeaddeaddeaddeaddead906338dc9c689060849060209060048186803b158015605f57600080fd5b505afa1580156072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906094919060b9565b90503660008037600080366000845af43d6000803e80801560b4573d6000f35b3d6000fd5b60006020828403121560c9578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811460eb578182fd5b939250505056fea2646970667358221220fdc58b44f80b9f0e5d40441fd91201d5e8359fd755ec84feeef0b794c446ba9a64736f6c63430008040033a26469706673582212207dd9955031980f5c6c573c6177c8e4638b332903f1b300cb5e7f1bc7dcb8099a64736f6c634300080c0033",
  "devdoc": {
    "author": "CXIP-Labs",
    "details": "For a CXIP Identity to be valid, it needs to be made through CXIP Provenance.",
    "events": {
      "IdentityBlacklisted(address,string)": {
        "details": "This is reserved for later use, in cases where an identity needs to be publicly blacklisted.",
        "params": {
          "identityAddress": "Address of the identity being blacklisted.",
          "reason": "A string URI to Arweave, IPFS, or HTTP with a detailed explanation for the blacklist."
        }
      },
      "IdentityCreated(address)": {
        "details": "Can subscribe to this even on Provenance to get all CXIP created identities.",
        "params": {
          "identityAddress": "Address of the identity being created."
        }
      },
      "IdentityWalletAdded(address,address,address)": {
        "details": "A wallet can only be added to one identity. It will not be possible to ever use it with another identity after that.",
        "params": {
          "identityAddress": "Address of the identity being created.",
          "initiatingWallet": "The address of wallet that initiated adding the new wallet.",
          "newWallet": "The address of new wallet being added."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "There is no data that needs to be set on first time deployment."
      },
      "createIdentity(bytes32,address,(bytes32,bytes32,uint8))": {
        "details": "Only a wallet that is not already associated with any CXIP Identity can create a new identity.",
        "params": {
          "saltHash": "A salt made up of 12 bytes random data and 20 bytes msg.sender address.",
          "secondaryWallet": "An additional wallet to add to identity. Used mostly for proxy wallets.",
          "verification": "Signatures made by msg.sender to validate identity creation."
        }
      },
      "getIdentity()": {
        "details": "Gets identity of msg.sender.",
        "returns": {
          "_0": "address Returns an identity contract address, or zero address if wallet is not associated with any identity."
        }
      },
      "getWalletIdentity(address)": {
        "details": "Can also be used to check if a wallet can create a new identity.",
        "params": {
          "wallet": "Address of wallet to get identity for."
        },
        "returns": {
          "_0": "address Returns an identity contract address, or zero address if wallet is not associated with any identity."
        }
      },
      "informAboutNewWallet(address)": {
        "details": "Can only be called by a valid identity associated wallet.",
        "params": {
          "newWallet": "Address of wallet to emit event for."
        }
      },
      "isIdentityBlacklisted(address)": {
        "details": "This is an optional function that can be used to decide if an identity should be not interacted with.",
        "params": {
          "identityAddress": "Contract address of the identity"
        },
        "returns": {
          "_0": "bool Returns true if identity was blacklisted."
        }
      },
      "isIdentityValid(address)": {
        "details": "This is used to ensure provenance and prevent malicious actors from creating smart contract clones.",
        "params": {
          "identityAddress": "Contract address of the identity"
        },
        "returns": {
          "_0": "bool Returns true if identity was created through proper provenance."
        }
      }
    },
    "stateVariables": {
      "_blacklistMap": {
        "details": "Special map for storing blacklisted identities."
      },
      "_identityMap": {
        "details": "Used for mapping created identity addresses."
      },
      "_reentrancyState": {
        "details": "Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED"
      },
      "_walletToIdentityMap": {
        "details": "Complete map of all wallets and their associated identities."
      }
    },
    "title": "CXIP Provenance",
    "version": 1
  },
  "userdoc": {
    "events": {
      "IdentityBlacklisted(address,string)": {
        "notice": "Event emitted when an identity gets blacklisted."
      },
      "IdentityCreated(address)": {
        "notice": "Event emitted when a new identity is created."
      },
      "IdentityWalletAdded(address,address,address)": {
        "notice": "Event emitted when a new wallet is added to the identity."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor is empty and only reentrancy guard is implemented."
      },
      "createIdentity(bytes32,address,(bytes32,bytes32,uint8))": {
        "notice": "Create a new identity smart contract."
      },
      "getIdentity()": {
        "notice": "Get the identity of current wallet."
      },
      "getWalletIdentity(address)": {
        "notice": "Get the identity associated with a wallet."
      },
      "informAboutNewWallet(address)": {
        "notice": "Tells provenance to emit IdentityWalletAdded event(s)."
      },
      "isIdentityBlacklisted(address)": {
        "notice": "Check if an identity is blacklisted."
      },
      "isIdentityValid(address)": {
        "notice": "Check if an identity is valid."
      }
    },
    "notice": "A smart contract for managing and validating all of CXIP's provenance.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2857,
        "contract": "contracts/CxipProvenance.sol:CxipProvenance",
        "label": "_walletToIdentityMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2862,
        "contract": "contracts/CxipProvenance.sol:CxipProvenance",
        "label": "_identityMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2867,
        "contract": "contracts/CxipProvenance.sol:CxipProvenance",
        "label": "_blacklistMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2870,
        "contract": "contracts/CxipProvenance.sol:CxipProvenance",
        "label": "_reentrancyState",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}