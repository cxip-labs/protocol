{
  "address": "0x34ea8Cf748de8f3A9D6d7293Ecc07e690bBB7D32",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionCreator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "CollectionCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "saltHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collectionCreator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "verification",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name2",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "symbol",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "royalties",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "bps",
              "type": "uint96"
            }
          ],
          "internalType": "struct CollectionData",
          "name": "collectionData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bytecode",
          "type": "bytes"
        }
      ],
      "name": "createCustomERC721Collection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "saltHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collectionCreator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "verification",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name2",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "symbol",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "royalties",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "bps",
              "type": "uint96"
            }
          ],
          "internalType": "struct CollectionData",
          "name": "collectionData",
          "type": "tuple"
        }
      ],
      "name": "createERC721Collection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCollectionById",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionType",
      "outputs": [
        {
          "internalType": "enum InterfaceType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isCollectionCertified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCollectionOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isCollectionRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenCertified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "listCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf59cb27c105d3f40f72b77dbe9392444c4bf56dc132e103dd75768f72f542c79",
  "receipt": {
    "to": null,
    "from": "0x9E22aA58Bf2F5E60801b90FDD3b51B65d38eA20b",
    "contractAddress": "0x34ea8Cf748de8f3A9D6d7293Ecc07e690bBB7D32",
    "transactionIndex": 8,
    "gasUsed": "1005838",
    "logsBloom": "0x
    "blockHash": "0xee36df8ac319b255811712cc48479035d9f2a1de374a89347c79134e1f5f281e",
    "transactionHash": "0xf59cb27c105d3f40f72b77dbe9392444c4bf56dc132e103dd75768f72f542c79",
    "logs": [],
    "blockNumber": 10706081,
    "cumulativeGasUsed": "6887060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "428ba836339d7d10082732ef4c0fb8bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saltHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collectionCreator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"verification\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"royalties\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"internalType\":\"struct CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"}],\"name\":\"createCustomERC721Collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saltHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collectionCreator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"verification\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"royalties\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"internalType\":\"struct CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"}],\"name\":\"createERC721Collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCollectionById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionType\",\"outputs\":[{\"internalType\":\"enum InterfaceType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollectionCertified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCollectionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollectionRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenCertified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"listCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CXIP-Labs\",\"details\":\"For a CXIP Identity to be valid, it needs to be made through CXIP Provenance.\",\"events\":{\"CollectionCreated(address,address,bytes32)\":{\"details\":\"Allows off-chain services to index the newly deployed collection address.\",\"params\":{\"collectionAddress\":\"Address of the newly created collection.\",\"collectionCreator\":\"Address of the collection creator (msg.sender).\",\"salt\":\"A salt used for deploying a collection to a specific address.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"There is no data that needs to be set on first time deployment.\"},\"createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)\":{\"details\":\"Creates and associates the custom ERC721 collection with the identity.\",\"params\":{\"bytecode\":\"The bytecode used for deployment. Validated against slot code for abuse prevention.\",\"collectionCreator\":\"Specific wallet, associated with the identity, that will be marked as the creator of this collection.\",\"collectionData\":\"The collection data struct, with all the default collection info.\",\"saltHash\":\"A salt used for deploying a collection to a specific address.\",\"slot\":\"Hash of proxy contract slot where the source is saved in registry.\",\"verification\":\"Signature created by the collectionCreator wallet to validate the integrity of the collection data.\"},\"returns\":{\"_0\":\"address Returns the address of the newly created collection.\"}},\"createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))\":{\"details\":\"Creates and associates the ERC721 collection with the identity.\",\"params\":{\"collectionCreator\":\"Specific wallet, associated with the identity, that will be marked as the creator of this collection.\",\"collectionData\":\"The collection data struct, with all the default collection info.\",\"saltHash\":\"A salt used for deploying a collection to a specific address.\",\"verification\":\"Signature created by the collectionCreator wallet to validate the integrity of the collection data.\"},\"returns\":{\"_0\":\"address Returns the address of the newly created collection.\"}},\"getCollectionById(uint256)\":{\"details\":\"This retrieves a collection by index. Don't be confused by the ID in the title.\",\"params\":{\"index\":\"Index of the item to get from the array.\"},\"returns\":{\"_0\":\"address Returns the collection contract address at that index of array.\"}},\"getCollectionType(address)\":{\"details\":\"Collection must be associated with identity.\",\"params\":{\"collection\":\"Contract address of the collection.\"},\"returns\":{\"_0\":\"InterfaceType Returns an enum (uint8) of the collection interface type.\"}},\"isCollectionCertified(address)\":{\"details\":\"Reserved function for later use. Will be used to identify if collection was heavily vetted.\",\"params\":{\"collection\":\"Contract address of the collection.\"},\"returns\":{\"_0\":\"bool Returns true if collection is associated with the identity.\"}},\"isCollectionOpen(address)\":{\"details\":\"For now this always returns false. Left as a placeholder for future development where shared collections might be used.Since it's not being used, the collection variable is commented out to avoid compiler warnings.\",\"returns\":{\"_0\":\"bool Returns true of false, to indicate if a specific collection is open/shared.\"}},\"isCollectionRegistered(address)\":{\"details\":\"For now will only return true for collections created directly from the identity contract.\",\"params\":{\"collection\":\"Contract address of the collection.\"},\"returns\":{\"_0\":\"bool Returns true if collection is associated with the identity.\"}},\"isTokenCertified(address,uint256)\":{\"details\":\"Reserved function for later use. Will be used to identify if token was heavily vetted.\",\"params\":{\"collection\":\"Contract address of the collection.\",\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"bool Returns true if token is associated with the identity.\"}},\"isTokenRegistered(address,uint256)\":{\"details\":\"For now will only return true for tokens created directly from the identity contract.\",\"params\":{\"collection\":\"Contract address of the collection.\",\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"bool Returns true if token is associated with the identity.\"}},\"listCollections(uint256,uint256)\":{\"details\":\"Use in conjunction with the totalCollections function, for pagination.\",\"params\":{\"length\":\"Length of slice to return, starting from offset index.\",\"offset\":\"Index from where to start pagination. Start at 0.\"},\"returns\":{\"_0\":\"address[] Returns a fixed length array starting from offset.\"}},\"totalCollections()\":{\"details\":\"Use in conjunction with the listCollections, for pagination.\",\"returns\":{\"_0\":\"uint256 Returns the total length of collections.\"}}},\"stateVariables\":{\"_additionalInfo\":{\"details\":\"Map with interface type definitions for identity created collections.\"},\"_collectionArray\":{\"details\":\"Array of addresses for all collection that were created by the identity.\"},\"_reentrancyState\":{\"details\":\"Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED\"}},\"title\":\"CXIP Provenance\",\"version\":1},\"userdoc\":{\"events\":{\"CollectionCreated(address,address,bytes32)\":{\"notice\":\"Event emitted when a collection is created.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor is empty and only reentrancy guard is implemented.\"},\"createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)\":{\"notice\":\"Create a custom ERC721 collection.\"},\"createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))\":{\"notice\":\"Create an ERC721 collection.\"},\"getCollectionType(address)\":{\"notice\":\"Get the collection's Interface Type: ERC20, ERC721, ERC1155.\"},\"isCollectionOpen(address)\":{\"notice\":\"Check if an identity collection is open to external minting.\"},\"isCollectionRegistered(address)\":{\"notice\":\"Check if a collection is registered with identity.\"},\"isTokenRegistered(address,uint256)\":{\"notice\":\"Check if a token is registered with identity.\"},\"listCollections(uint256,uint256)\":{\"notice\":\"List all collections associated with this identity.\"},\"totalCollections()\":{\"notice\":\"Get total number of collections associated with this identity.\"}},\"notice\":\"A smart contract for managing and validating all of CXIP's provenance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CxipProvenance.sol\":\"CxipProvenance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/CxipProvenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./interface/ICxipERC721.sol\\\";\\nimport \\\"./interface/ICxipRegistry.sol\\\";\\nimport \\\"./library/Address.sol\\\";\\nimport \\\"./library/Signature.sol\\\";\\nimport \\\"./struct/CollectionData.sol\\\";\\nimport \\\"./struct/InterfaceType.sol\\\";\\nimport \\\"./struct/Token.sol\\\";\\nimport \\\"./struct/TokenData.sol\\\";\\nimport \\\"./struct/Verification.sol\\\";\\n\\n/**\\n * @title CXIP Provenance\\n * @author CXIP-Labs\\n * @notice A smart contract for managing and validating all of CXIP's provenance.\\n * @dev For a CXIP Identity to be valid, it needs to be made through CXIP Provenance.\\n */\\ncontract CxipProvenance {\\n    /**\\n     * @dev Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED\\n     */\\n    uint256 private _reentrancyState;\\n\\n    /**\\n     * @dev Array of addresses for all collection that were created by the identity.\\n     */\\n    address[] private _collectionArray;\\n\\n    /**\\n     * @dev Map with interface type definitions for identity created collections.\\n     */\\n    mapping(address => InterfaceType) private _additionalInfo;\\n\\n    /**\\n     * @notice Event emitted when a collection is created.\\n     * @dev Allows off-chain services to index the newly deployed collection address.\\n     * @param collectionCreator Address of the collection creator (msg.sender).\\n     * @param collectionAddress Address of the newly created collection.\\n     * @param salt A salt used for deploying a collection to a specific address.\\n     */\\n    event CollectionCreated(address indexed collectionCreator, address indexed collectionAddress, bytes32 indexed salt);\\n\\n    /**\\n     * @notice Constructor is empty and only reentrancy guard is implemented.\\n     * @dev There is no data that needs to be set on first time deployment.\\n     */\\n    constructor() {\\n        _reentrancyState = 1;\\n    }\\n\\n    /**\\n     * @dev Implementation from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\n     */\\n    modifier nonReentrant() {\\n        require(_reentrancyState != 2, \\\"ReentrancyGuard: reentrant call\\\");\\n        _reentrancyState = 2;\\n        _;\\n        _reentrancyState = 1;\\n    }\\n\\n    /**\\n     * @notice Check if an identity collection is open to external minting.\\n     * @dev For now this always returns false. Left as a placeholder for future development where shared collections might be used.\\n     * @dev Since it's not being used, the collection variable is commented out to avoid compiler warnings.\\n     * @return bool Returns true of false, to indicate if a specific collection is open/shared.\\n     */\\n    function isCollectionOpen(\\n        address/* collection*/\\n    ) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Create an ERC721 collection.\\n     * @dev Creates and associates the ERC721 collection with the identity.\\n     * @param saltHash A salt used for deploying a collection to a specific address.\\n     * @param collectionCreator Specific wallet, associated with the identity, that will be marked as the creator of this collection.\\n     * @param verification Signature created by the collectionCreator wallet to validate the integrity of the collection data.\\n     * @param collectionData The collection data struct, with all the default collection info.\\n     * @return address Returns the address of the newly created collection.\\n     */\\n    function createERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData\\n    ) public nonReentrant returns (address) {\\n        if(collectionCreator != msg.sender) {\\n            require(\\n                Signature.Valid(\\n                    collectionCreator,\\n                    verification.r,\\n                    verification.s,\\n                    verification.v,\\n                    abi.encodePacked(\\n                        address(this),\\n                        collectionCreator,\\n                        collectionData.name,\\n                        collectionData.name2,\\n                        collectionData.symbol,\\n                        collectionData.royalties,\\n                        collectionData.bps\\n                    )\\n                ),\\n                \\\"CXIP: invalid signature\\\"\\n            );\\n        }\\n        bytes memory bytecode = hex\\\"608060405234801561001057600080fd5b5060f68061001f6000396000f3fe60806040819052632c5feccb60e11b815260009073415225c0d082cb195aee69f490c218def30966da906358bfd99690608490602090600481865afa158015604b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190606d91906092565b90503660008037600080366000845af43d6000803e808015608d573d6000f35b3d6000fd5b60006020828403121560a357600080fd5b81516001600160a01b038116811460b957600080fd5b939250505056fea26469706673582212207e3850d5f5eaab2151a5f3470e98fd3411f6eec0c0f906020ffeecad3294dabd64736f6c634300080c0033\\\";\\n        address cxipAddress;\\n        assembly {\\n            cxipAddress := create2(\\n                0,\\n                add(bytecode, 0x20),\\n                mload(bytecode),\\n                saltHash\\n            )\\n        }\\n        ICxipERC721(cxipAddress).init(collectionCreator, collectionData);\\n        _addCollectionToEnumeration(cxipAddress, InterfaceType.ERC721);\\n        emit CollectionCreated(collectionCreator, cxipAddress, saltHash);\\n        return(cxipAddress);\\n    }\\n\\n    /**\\n     * @notice Create a custom ERC721 collection.\\n     * @dev Creates and associates the custom ERC721 collection with the identity.\\n     * @param saltHash A salt used for deploying a collection to a specific address.\\n     * @param collectionCreator Specific wallet, associated with the identity, that will be marked as the creator of this collection.\\n     * @param verification Signature created by the collectionCreator wallet to validate the integrity of the collection data.\\n     * @param collectionData The collection data struct, with all the default collection info.\\n     * @param slot Hash of proxy contract slot where the source is saved in registry.\\n     * @param bytecode The bytecode used for deployment. Validated against slot code for abuse prevention.\\n     * @return address Returns the address of the newly created collection.\\n     */\\n    function createCustomERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData,\\n        bytes32 slot,\\n        bytes memory bytecode\\n    ) public nonReentrant returns (address) {\\n        if(collectionCreator != msg.sender) {\\n            require(\\n                Signature.Valid(\\n                    collectionCreator,\\n                    verification.r,\\n                    verification.s,\\n                    verification.v,\\n                    abi.encodePacked(\\n                        address(this),\\n                        collectionCreator,\\n                        collectionData.name,\\n                        collectionData.name2,\\n                        collectionData.symbol,\\n                        collectionData.royalties,\\n                        collectionData.bps\\n                    )\\n                ),\\n                \\\"CXIP: invalid signature\\\"\\n            );\\n        }\\n        address cxipAddress;\\n        assembly {\\n            cxipAddress := create2(\\n                0,\\n                add(bytecode, 0x20),\\n                mload(bytecode),\\n                saltHash\\n            )\\n        }\\n        require(\\n            keccak256(cxipAddress.code) == keccak256(ICxipRegistry(0x415225c0d082CB195AeE69f490c218def30966da).getCustomSource(slot).code),\\n            \\\"CXIP: byte code missmatch\\\"\\n        );\\n        ICxipERC721(cxipAddress).init(collectionCreator, collectionData);\\n        _addCollectionToEnumeration(cxipAddress, InterfaceType.ERC721);\\n        emit CollectionCreated(collectionCreator, cxipAddress, saltHash);\\n        return(cxipAddress);\\n    }\\n\\n    /**\\n     * @dev This retrieves a collection by index. Don't be confused by the ID in the title.\\n     * @param index Index of the item to get from the array.\\n     * @return address Returns the collection contract address at that index of array.\\n     */\\n    function getCollectionById(uint256 index) public view returns (address) {\\n        return _collectionArray[index];\\n    }\\n\\n    /**\\n     * @notice Get the collection's Interface Type: ERC20, ERC721, ERC1155.\\n     * @dev Collection must be associated with identity.\\n     * @param collection Contract address of the collection.\\n     * @return InterfaceType Returns an enum (uint8) of the collection interface type.\\n     */\\n    function getCollectionType(address collection) public view returns (InterfaceType) {\\n        return _additionalInfo[collection];\\n    }\\n\\n    /**\\n     * @dev Reserved function for later use. Will be used to identify if collection was heavily vetted.\\n     * @param collection Contract address of the collection.\\n     * @return bool Returns true if collection is associated with the identity.\\n     */\\n    function isCollectionCertified(\\n        address collection\\n    ) public view returns (bool) {\\n        return _isCollectionValid(collection);\\n    }\\n\\n    /**\\n     * @notice Check if a collection is registered with identity.\\n     * @dev For now will only return true for collections created directly from the identity contract.\\n     * @param collection Contract address of the collection.\\n     * @return bool Returns true if collection is associated with the identity.\\n     */\\n    function isCollectionRegistered(\\n        address collection\\n    ) public view returns (bool) {\\n        return _isCollectionValid(collection);\\n    }\\n\\n    /**\\n     * @dev Reserved function for later use. Will be used to identify if token was heavily vetted.\\n     * @param collection Contract address of the collection.\\n     * @param tokenId Id of the token.\\n     * @return bool Returns true if token is associated with the identity.\\n     */\\n    function isTokenCertified(\\n        address collection,\\n        uint256 tokenId\\n    ) public view returns (bool) {\\n        return _isValidToken(collection, tokenId);\\n    }\\n\\n    /**\\n     * @notice Check if a token is registered with identity.\\n     * @dev For now will only return true for tokens created directly from the identity contract.\\n     * @param collection Contract address of the collection.\\n     * @param tokenId Id of the token.\\n     * @return bool Returns true if token is associated with the identity.\\n     */\\n    function isTokenRegistered(\\n        address collection,\\n        uint256 tokenId\\n    ) public view returns (bool) {\\n        return _isValidToken(collection, tokenId);\\n    }\\n\\n    /**\\n     * @notice List all collections associated with this identity.\\n     * @dev Use in conjunction with the totalCollections function, for pagination.\\n     * @param offset Index from where to start pagination. Start at 0.\\n     * @param length Length of slice to return, starting from offset index.\\n     * @return address[] Returns a fixed length array starting from offset.\\n     */\\n    function listCollections(\\n        uint256 offset,\\n        uint256 length\\n    ) public view returns (address[] memory) {\\n        uint256 limit = offset + length;\\n        if(limit > _collectionArray.length) {\\n            limit = _collectionArray.length;\\n        }\\n        address[] memory collections = new address[](limit - offset);\\n        uint256 n = 0;\\n        for(uint256 i = offset; i < limit; i++) {\\n            collections[n] = _collectionArray[i];\\n            n++;\\n        }\\n        return collections;\\n    }\\n\\n    /**\\n     * @notice Get total number of collections associated with this identity.\\n     * @dev Use in conjunction with the listCollections, for pagination.\\n     * @return uint256 Returns the total length of collections.\\n     */\\n    function totalCollections() public view returns (uint256) {\\n        return _collectionArray.length;\\n    }\\n\\n    /**\\n     * @dev Add collection to identity.\\n     * @param collection Contract address of the collection to add.\\n     * @param collectionType Interface type of the collection being added.\\n     */\\n    function _addCollectionToEnumeration(\\n        address collection,\\n        InterfaceType collectionType\\n    ) internal {\\n        _collectionArray.push(collection);\\n        _additionalInfo[collection] = collectionType;\\n    }\\n\\n    /**\\n     * @dev Remove collection from identity.\\n     * @param index Array index of the collection to remove.\\n     */\\n    function _removeCollectionFromEnumeration(uint256 index) internal {\\n        require(\\n            _collectionArray.length != 0,\\n            \\\"CXIP: removing from empty array\\\"\\n        );\\n        delete _additionalInfo[_collectionArray[index]];\\n        uint256 lastIndex = _collectionArray.length - 1;\\n        if(lastIndex != 0) {\\n            if(index != lastIndex) {\\n                address lastCollection = _collectionArray[lastIndex];\\n                _collectionArray[index] = lastCollection;\\n            }\\n        }\\n        if(lastIndex == 0) {\\n            delete _collectionArray;\\n        } else {\\n            delete _collectionArray[lastIndex];\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if collection is associated with this identity.\\n     * @param collection Contract address of the collection.\\n     * @return bool Returns true if collection is associated with this identity.\\n     */\\n    function _isCollectionValid(\\n        address collection\\n    ) internal view returns (bool) {\\n        return _additionalInfo[collection] != InterfaceType.NULL;\\n    }\\n\\n    /**\\n     * @dev Check if token is associated with this identity.\\n     * @param collection Contract address of the collection.\\n     * @dev Since it's not being used yet, the tokenId variable is commented out to avoid compiler warnings.\\n     * @return bool Returns true if token is associated with this identity.\\n     */\\n    function _isValidToken(\\n        address collection,\\n        uint256/* tokenId*/\\n    ) internal view returns (bool) {\\n        return _additionalInfo[collection] != InterfaceType.NULL;\\n    }\\n\\n    /**\\n     * @dev Get the top-level CXIP Registry smart contract. Function must always be internal to prevent miss-use/abuse through bad programming practices.\\n     * @return ICxipRegistry The address of the top-level CXIP Registry smart contract.\\n     */\\n    function getRegistry() internal pure returns (ICxipRegistry) {\\n        return ICxipRegistry(0x415225c0d082CB195AeE69f490c218def30966da);\\n    }\\n}\\n\",\"keccak256\":\"0x79c9ec076ab870d43a0467ed7039a65ae63274e937f4c2bad7a4825ff8493c28\",\"license\":\"MIT\"},\"contracts/interface/ICxipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\nimport \\\"../struct/Verification.sol\\\";\\n\\ninterface ICxipERC721 {\\n    function arweaveURI(uint256 tokenId) external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function creator(uint256 tokenId) external view returns (address);\\n\\n    function httpURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ipfsURI(uint256 tokenId) external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function payloadHash(uint256 tokenId) external view returns (bytes32);\\n\\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory);\\n\\n    function payloadSigner(uint256 tokenId) external view returns (address);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function tokensOfOwner(address wallet) external view returns (uint256[] memory);\\n\\n    function verifySHA256(bytes32 hash, bytes calldata payload) external pure returns (bool);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function init(address newOwner, CollectionData calldata collectionData) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function setApprovalForAll(address to, bool approved) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function cxipMint(uint256 id, TokenData calldata tokenData) external returns (uint256);\\n\\n    function setApprovalForAll(\\n        address from,\\n        address to,\\n        bool approved\\n    ) external;\\n\\n    function setName(bytes32 newName, bytes32 newName2) external;\\n\\n    function setSymbol(bytes32 newSymbol) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function balanceOf(address wallet) external view returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function isApprovedForAll(address wallet, address operator) external view returns (bool);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function isOwner(address wallet) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address wallet, uint256 index) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xab469ea2eff4b8c15d0af2128a6529658d23cb157d521f3af41702d3e1f821c6\",\"license\":\"MIT\"},\"contracts/interface/ICxipRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipRegistry {\\n    function getCustomSource(bytes32 name) external view returns (address);\\n\\n    function getCustomSourceFromString(string memory name) external view returns (address);\\n\\n    function getERC1155CollectionSource() external view returns (address);\\n\\n    function getERC721CollectionSource() external view returns (address);\\n\\n    function getPA1D() external view returns (address);\\n\\n    function getPA1DSource() external view returns (address);\\n\\n    function getProvenance() external view returns (address);\\n\\n    function getProvenanceSource() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function setCustomSource(string memory name, address source) external;\\n\\n    function setERC1155CollectionSource(address source) external;\\n\\n    function setERC721CollectionSource(address source) external;\\n\\n    function setPA1D(address proxy) external;\\n\\n    function setPA1DSource(address source) external;\\n\\n    function setProvenance(address proxy) external;\\n\\n    function setProvenanceSource(address source) external;\\n}\\n\",\"keccak256\":\"0x859741a06ea797260e95a1fb0ecbc39b8d3a1f4eb98ea5103060ca60b45e92ab\",\"license\":\"MIT\"},\"contracts/library/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 &&\\n            codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\\n    }\\n\\n    function isZero(address account) internal pure returns (bool) {\\n        return (account == address(0));\\n    }\\n}\\n\",\"keccak256\":\"0x53828b644743921c47d7b36278f23203cd56d18c1f57a6833cc316558befffef\",\"license\":\"MIT\"},\"contracts/library/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Signature {\\n    function Derive(\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            address derived1,\\n            address derived2,\\n            address derived3,\\n            address derived4\\n        )\\n    {\\n        bytes32 encoded32;\\n        assembly {\\n            encoded32 := mload(add(encoded, 32))\\n        }\\n        derived1 = ecrecover(encoded32, v, r, s);\\n        derived2 = ecrecover(\\n            keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32)),\\n            v,\\n            r,\\n            s\\n        );\\n        encoded32 = keccak256(encoded);\\n        derived3 = ecrecover(encoded32, v, r, s);\\n        encoded32 = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32));\\n        derived4 = ecrecover(encoded32, v, r, s);\\n    }\\n\\n    function PackMessage(bytes memory encoded, bool geth) internal pure returns (bytes32) {\\n        bytes32 hash = keccak256(encoded);\\n        if (geth) {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        }\\n        return hash;\\n    }\\n\\n    function Valid(\\n        address target,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory encoded\\n    ) internal pure returns (bool) {\\n        bytes32 encoded32;\\n        address derived;\\n        if (encoded.length == 32) {\\n            assembly {\\n                encoded32 := mload(add(encoded, 32))\\n            }\\n            derived = ecrecover(encoded32, v, r, s);\\n            if (target == derived) {\\n                return true;\\n            }\\n            derived = ecrecover(\\n                keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32)),\\n                v,\\n                r,\\n                s\\n            );\\n            if (target == derived) {\\n                return true;\\n            }\\n        }\\n        bytes32 hash = keccak256(encoded);\\n        derived = ecrecover(hash, v, r, s);\\n        if (target == derived) {\\n            return true;\\n        }\\n        hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        derived = ecrecover(hash, v, r, s);\\n        return target == derived;\\n    }\\n}\\n\",\"keccak256\":\"0xf8e8db87fb826bea8bc1ed531b9c5362d054a2c87c516bbc342caeca1ef5b523\",\"license\":\"MIT\"},\"contracts/struct/CollectionData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./UriType.sol\\\";\\n\\nstruct CollectionData {\\n    bytes32 name;\\n    bytes32 name2;\\n    bytes32 symbol;\\n    address royalties;\\n    uint96 bps;\\n}\\n\",\"keccak256\":\"0x328167148d845d1945ef8b77f710750d10cd38d2c8510e22ca52ec67781e3b8f\",\"license\":\"MIT\"},\"contracts/struct/InterfaceType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum InterfaceType {\\n    NULL, // 0\\n    ERC20, // 1\\n    ERC721, // 2\\n    ERC1155 // 3\\n}\\n\",\"keccak256\":\"0xed4f93a0fc084fa9d0a55d5e7c11f53e34b4c0d45d93de6ff03f345ae9a52885\",\"license\":\"MIT\"},\"contracts/struct/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./InterfaceType.sol\\\";\\n\\nstruct Token {\\n    address collection;\\n    uint256 tokenId;\\n    InterfaceType tokenType;\\n    address creator;\\n}\\n\",\"keccak256\":\"0xa9c13c64d8f611f96d8b4c39eb42dab1a05d70119f351047ee939e63d3a29e6f\",\"license\":\"MIT\"},\"contracts/struct/TokenData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./Verification.sol\\\";\\n\\nstruct TokenData {\\n    bytes32 payloadHash;\\n    Verification payloadSignature;\\n    address creator;\\n    bytes32 arweave;\\n    bytes11 arweave2;\\n    bytes32 ipfs;\\n    bytes14 ipfs2;\\n}\\n\",\"keccak256\":\"0xd7288c705f3247427487e4491a7cddb84a42af2a32720a16f75c8950380a717d\",\"license\":\"MIT\"},\"contracts/struct/UriType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum UriType {\\n    ARWEAVE, // 0\\n    IPFS, // 1\\n    HTTP // 2\\n}\\n\",\"keccak256\":\"0xe64f56b37ab2043dd80ae3b06abb928151837a546653ea0bd350d9078ccb29a6\",\"license\":\"MIT\"},\"contracts/struct/Verification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nstruct Verification {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n}\\n\",\"keccak256\":\"0x56a68601446e86e6a5d8bc4dc66df60fb6fb1518c4cc4fd0e9a87d50386a8652\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "CXIP-Labs",
    "details": "For a CXIP Identity to be valid, it needs to be made through CXIP Provenance.",
    "events": {
      "CollectionCreated(address,address,bytes32)": {
        "details": "Allows off-chain services to index the newly deployed collection address.",
        "params": {
          "collectionAddress": "Address of the newly created collection.",
          "collectionCreator": "Address of the collection creator (msg.sender).",
          "salt": "A salt used for deploying a collection to a specific address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "There is no data that needs to be set on first time deployment."
      },
      "createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)": {
        "details": "Creates and associates the custom ERC721 collection with the identity.",
        "params": {
          "bytecode": "The bytecode used for deployment. Validated against slot code for abuse prevention.",
          "collectionCreator": "Specific wallet, associated with the identity, that will be marked as the creator of this collection.",
          "collectionData": "The collection data struct, with all the default collection info.",
          "saltHash": "A salt used for deploying a collection to a specific address.",
          "slot": "Hash of proxy contract slot where the source is saved in registry.",
          "verification": "Signature created by the collectionCreator wallet to validate the integrity of the collection data."
        },
        "returns": {
          "_0": "address Returns the address of the newly created collection."
        }
      },
      "createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))": {
        "details": "Creates and associates the ERC721 collection with the identity.",
        "params": {
          "collectionCreator": "Specific wallet, associated with the identity, that will be marked as the creator of this collection.",
          "collectionData": "The collection data struct, with all the default collection info.",
          "saltHash": "A salt used for deploying a collection to a specific address.",
          "verification": "Signature created by the collectionCreator wallet to validate the integrity of the collection data."
        },
        "returns": {
          "_0": "address Returns the address of the newly created collection."
        }
      },
      "getCollectionById(uint256)": {
        "details": "This retrieves a collection by index. Don't be confused by the ID in the title.",
        "params": {
          "index": "Index of the item to get from the array."
        },
        "returns": {
          "_0": "address Returns the collection contract address at that index of array."
        }
      },
      "getCollectionType(address)": {
        "details": "Collection must be associated with identity.",
        "params": {
          "collection": "Contract address of the collection."
        },
        "returns": {
          "_0": "InterfaceType Returns an enum (uint8) of the collection interface type."
        }
      },
      "isCollectionCertified(address)": {
        "details": "Reserved function for later use. Will be used to identify if collection was heavily vetted.",
        "params": {
          "collection": "Contract address of the collection."
        },
        "returns": {
          "_0": "bool Returns true if collection is associated with the identity."
        }
      },
      "isCollectionOpen(address)": {
        "details": "For now this always returns false. Left as a placeholder for future development where shared collections might be used.Since it's not being used, the collection variable is commented out to avoid compiler warnings.",
        "returns": {
          "_0": "bool Returns true of false, to indicate if a specific collection is open/shared."
        }
      },
      "isCollectionRegistered(address)": {
        "details": "For now will only return true for collections created directly from the identity contract.",
        "params": {
          "collection": "Contract address of the collection."
        },
        "returns": {
          "_0": "bool Returns true if collection is associated with the identity."
        }
      },
      "isTokenCertified(address,uint256)": {
        "details": "Reserved function for later use. Will be used to identify if token was heavily vetted.",
        "params": {
          "collection": "Contract address of the collection.",
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "bool Returns true if token is associated with the identity."
        }
      },
      "isTokenRegistered(address,uint256)": {
        "details": "For now will only return true for tokens created directly from the identity contract.",
        "params": {
          "collection": "Contract address of the collection.",
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "bool Returns true if token is associated with the identity."
        }
      },
      "listCollections(uint256,uint256)": {
        "details": "Use in conjunction with the totalCollections function, for pagination.",
        "params": {
          "length": "Length of slice to return, starting from offset index.",
          "offset": "Index from where to start pagination. Start at 0."
        },
        "returns": {
          "_0": "address[] Returns a fixed length array starting from offset."
        }
      },
      "totalCollections()": {
        "details": "Use in conjunction with the listCollections, for pagination.",
        "returns": {
          "_0": "uint256 Returns the total length of collections."
        }
      }
    },
    "stateVariables": {
      "_additionalInfo": {
        "details": "Map with interface type definitions for identity created collections."
      },
      "_collectionArray": {
        "details": "Array of addresses for all collection that were created by the identity."
      },
      "_reentrancyState": {
        "details": "Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED"
      }
    },
    "title": "CXIP Provenance",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CollectionCreated(address,address,bytes32)": {
        "notice": "Event emitted when a collection is created."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor is empty and only reentrancy guard is implemented."
      },
      "createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)": {
        "notice": "Create a custom ERC721 collection."
      },
      "createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))": {
        "notice": "Create an ERC721 collection."
      },
      "getCollectionType(address)": {
        "notice": "Get the collection's Interface Type: ERC20, ERC721, ERC1155."
      },
      "isCollectionOpen(address)": {
        "notice": "Check if an identity collection is open to external minting."
      },
      "isCollectionRegistered(address)": {
        "notice": "Check if a collection is registered with identity."
      },
      "isTokenRegistered(address,uint256)": {
        "notice": "Check if a token is registered with identity."
      },
      "listCollections(uint256,uint256)": {
        "notice": "List all collections associated with this identity."
      },
      "totalCollections()": {
        "notice": "Get total number of collections associated with this identity."
      }
    },
    "notice": "A smart contract for managing and validating all of CXIP's provenance.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1346,
        "contract": "contracts/CxipProvenance.sol:CxipProvenance",
        "label": "_reentrancyState",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1350,
        "contract": "contracts/CxipProvenance.sol:CxipProvenance",
        "label": "_collectionArray",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1356,
        "contract": "contracts/CxipProvenance.sol:CxipProvenance",
        "label": "_additionalInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_enum(InterfaceType)5209)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(InterfaceType)5209": {
        "encoding": "inplace",
        "label": "enum InterfaceType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(InterfaceType)5209)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum InterfaceType)",
        "numberOfBytes": "32",
        "value": "t_enum(InterfaceType)5209"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}