{
  "address": "0x7FD09997D841ae1dEe1766F16e60f86FF3c23a5D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "addSignedWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "addWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "saltHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collectionCreator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "verification",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name2",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "symbol",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "royalties",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "bps",
              "type": "uint96"
            }
          ],
          "internalType": "struct CollectionData",
          "name": "collectionData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bytecode",
          "type": "bytes"
        }
      ],
      "name": "createCustomERC721Collection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "saltHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collectionCreator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "verification",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name2",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "symbol",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "royalties",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "bps",
              "type": "uint96"
            }
          ],
          "internalType": "struct CollectionData",
          "name": "collectionData",
          "type": "tuple"
        }
      ],
      "name": "createERC721Collection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "payloadHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Verification",
              "name": "payloadSignature",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "arweave",
              "type": "bytes32"
            },
            {
              "internalType": "bytes11",
              "name": "arweave2",
              "type": "bytes11"
            },
            {
              "internalType": "bytes32",
              "name": "ipfs",
              "type": "bytes32"
            },
            {
              "internalType": "bytes14",
              "name": "ipfs2",
              "type": "bytes14"
            }
          ],
          "internalType": "struct TokenData",
          "name": "tokenData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "verification",
          "type": "tuple"
        }
      ],
      "name": "createERC721Token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getAuthorizer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCollectionById",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionType",
      "outputs": [
        {
          "internalType": "enum InterfaceType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWallets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondaryWallet",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isCollectionCertified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCollectionOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isCollectionRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isNew",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenCertified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "isWalletRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "listCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x50c6844eb468b09572d8555d3fcf01283365dd57c5911e4687c565540d80e368",
  "receipt": {
    "to": null,
    "from": "0x4D5a40f6d9F7215Dabd842d486Ba1c96651069e8",
    "contractAddress": "0x7FD09997D841ae1dEe1766F16e60f86FF3c23a5D",
    "transactionIndex": 7,
    "gasUsed": "1969994",
    "logsBloom": "0x
    "blockHash": "0x0574a4e6616aed8555fd33829f1bb8540218808e668ae33039861e64a62ad5f8",
    "transactionHash": "0x50c6844eb468b09572d8555d3fcf01283365dd57c5911e4687c565540d80e368",
    "logs": [],
    "blockNumber": 10289182,
    "cumulativeGasUsed": "5232489",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "dd9d01b54d02829a71662771419b2102",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addSignedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"addWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saltHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collectionCreator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"verification\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"royalties\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"internalType\":\"struct CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"}],\"name\":\"createCustomERC721Collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saltHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collectionCreator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"verification\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"royalties\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"internalType\":\"struct CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"}],\"name\":\"createERC721Collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"payloadSignature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"arweave\",\"type\":\"bytes32\"},{\"internalType\":\"bytes11\",\"name\":\"arweave2\",\"type\":\"bytes11\"},{\"internalType\":\"bytes32\",\"name\":\"ipfs\",\"type\":\"bytes32\"},{\"internalType\":\"bytes14\",\"name\":\"ipfs2\",\"type\":\"bytes14\"}],\"internalType\":\"struct TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"verification\",\"type\":\"tuple\"}],\"name\":\"createERC721Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCollectionById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionType\",\"outputs\":[{\"internalType\":\"enum InterfaceType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryWallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollectionCertified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCollectionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollectionRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNew\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenCertified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isWalletRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"listCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"CXIP-Labs\",\"details\":\"The smart contract interacts and relies on CXIP Provenance.\",\"kind\":\"dev\",\"methods\":{\"addSignedWallet(address,uint8,bytes32,bytes32)\":{\"details\":\"This function needs to be called by a wallet already associated with the identity.Signature from new wallet can be included or omitted. If not included, new wallet will need to make a connectWallet function call.\",\"params\":{\"newWallet\":\"Address of new wallet being added to the identity.\",\"r\":\"The R value of the new wallet signature. Optional.\",\"s\":\"The S value of the new wallet signature. Optional.\",\"v\":\"The V value of the new wallet signature (27-28). Optional.\"}},\"addWallet(address)\":{\"details\":\"Use this function if you are not planning to include wallet signature.\",\"params\":{\"newWallet\":\"Address of new wallet being added to the identity.\"}},\"connectWallet()\":{\"details\":\"Make this call with a new wallet after an addWallet function is called by an existing wallet.\"},\"constructor\":{\"details\":\"To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \\\"init\\\" function instead.\"},\"createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)\":{\"details\":\"Creates and associates the custom ERC721 collection with the identity.\",\"params\":{\"bytecode\":\"The bytecode used for deployment. Validated against slot code for abuse prevention.\",\"collectionCreator\":\"Specific wallet, associated with the identity, that will be marked as the creator of this collection.\",\"collectionData\":\"The collection data struct, with all the default collection info.\",\"saltHash\":\"A salt used for deploying a collection to a specific address.\",\"slot\":\"Hash of proxy contract slot where the source is saved in registry.\",\"verification\":\"Signature created by the collectionCreator wallet to validate the integrity of the collection data.\"},\"returns\":{\"_0\":\"address Returns the address of the newly created collection.\"}},\"createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))\":{\"details\":\"Creates and associates the ERC721 collection with the identity.\",\"params\":{\"collectionCreator\":\"Specific wallet, associated with the identity, that will be marked as the creator of this collection.\",\"collectionData\":\"The collection data struct, with all the default collection info.\",\"saltHash\":\"A salt used for deploying a collection to a specific address.\",\"verification\":\"Signature created by the collectionCreator wallet to validate the integrity of the collection data.\"},\"returns\":{\"_0\":\"address Returns the address of the newly created collection.\"}},\"createERC721Token(address,uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14),(bytes32,bytes32,uint8))\":{\"details\":\"This function is embedded inside of the identity contract to make validation and providence bulletproof.An NFT can be minted directly inside the collection, but the CXIP Asset smart contract will not mark it as a certified NFT.\",\"params\":{\"collection\":\"Address of the smart contract for the collection. Must have been created by this identity.\",\"id\":\"Token id for the NFT to mint. Can be left as 0 to allow automatic token id allocation.\",\"tokenData\":\"A struct containing all of the necessary NFT information.\",\"verification\":\"A verification signature issued by the CXIP Asset Signer as a guarantee of a valid NFT.\"},\"returns\":{\"_0\":\"uint256 Returns the token id of the newly minted NFT.\"}},\"getAuthorizer(address)\":{\"details\":\"Should be used for visual validation of wallet that is authorising a new wallet to be added.\",\"params\":{\"wallet\":\"The address of the new wallet being requested to add.\"},\"returns\":{\"_0\":\"address Returns the address of the wallet that is requesting the new wallet.\"}},\"getCollectionById(uint256)\":{\"details\":\"This retrieves a collection by index. Don't be confused by the ID in the title.\",\"params\":{\"index\":\"Index of the item to get from the array.\"},\"returns\":{\"_0\":\"address Returns the collection contract address at that index of array.\"}},\"getCollectionType(address)\":{\"details\":\"Collection must be associated with identity.\",\"params\":{\"collection\":\"Contract address of the collection.\"},\"returns\":{\"_0\":\"InterfaceType Returns an enum (uint8) of the collection interface type.\"}},\"getWallets()\":{\"details\":\"Any wallet returned in this response should be considered as owner.\",\"returns\":{\"_0\":\"address[] Returns an array of all the wallets that have been associated with the identity contract..\"}},\"init(address,address)\":{\"details\":\"It is important to run this inside the same function as the create2 for this contract.\",\"params\":{\"secondaryWallet\":\"Optional second wallet to add to new identity.\",\"wallet\":\"The address of the wallet to add to new identity.\"}},\"isCollectionCertified(address)\":{\"details\":\"Reserved function for later use. Will be used to identify if collection was heavily vetted.\",\"params\":{\"collection\":\"Contract address of the collection.\"},\"returns\":{\"_0\":\"bool Returns true if collection is associated with the identity.\"}},\"isCollectionOpen(address)\":{\"details\":\"For now this always returns false. Left as a placeholder for future development where shared collections might be used.Since it's not being used, the collection variable is commented out to avoid compiler warnings.\",\"returns\":{\"_0\":\"bool Returns true of false, to indicate if a specific collection is open/shared.\"}},\"isCollectionRegistered(address)\":{\"details\":\"For now will only return true for collections created directly from the identity contract.\",\"params\":{\"collection\":\"Contract address of the collection.\"},\"returns\":{\"_0\":\"bool Returns true if collection is associated with the identity.\"}},\"isNew()\":{\"details\":\"This function is called by provenance as an extra layer of validation.\",\"returns\":{\"_0\":\"bool Returns the current state of the _newTrigger variable.\"}},\"isOwner()\":{\"details\":\"This checks if the msg.sender wallet is associated with the identity.\",\"returns\":{\"_0\":\"bool Returns true is the wallet is authorised by the identity.\"}},\"isTokenCertified(address,uint256)\":{\"details\":\"Reserved function for later use. Will be used to identify if token was heavily vetted.\",\"params\":{\"collection\":\"Contract address of the collection.\",\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"bool Returns true if token is associated with the identity.\"}},\"isTokenRegistered(address,uint256)\":{\"details\":\"For now will only return true for tokens created directly from the identity contract.\",\"params\":{\"collection\":\"Contract address of the collection.\",\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"bool Returns true if token is associated with the identity.\"}},\"isWalletRegistered(address)\":{\"details\":\"Used for external validation. Wallets can only be associated to one identity, ever.\",\"params\":{\"wallet\":\"Address of wallet to check against the identity.\"},\"returns\":{\"_0\":\"bool Returns true if wallet is registered to this identity.\"}},\"listCollections(uint256,uint256)\":{\"details\":\"Use in conjunction with the totalCollections function, for pagination.\",\"params\":{\"length\":\"Length of slice to return, starting from offset index.\",\"offset\":\"Index from where to start pagination. Start at 0.\"},\"returns\":{\"_0\":\"address[] Returns a fixed length array starting from offset.\"}},\"nextNonce(address)\":{\"details\":\"This is not wallet transaction nonce. This is an internal nonce handled by the smart contract. Should be used for special instances where nonced signatures are required.\",\"params\":{\"wallet\":\"Address of wallet.\"},\"returns\":{\"_0\":\"uint256 Returns the next nonce to use.\"}},\"totalCollections()\":{\"details\":\"Use in conjunction with the listCollections, for pagination.\",\"returns\":{\"_0\":\"uint256 Returns the total length of collections.\"}}},\"stateVariables\":{\"_additionalInfo\":{\"details\":\"Map with interface type definitions for identity created collections.\"},\"_collectionArray\":{\"details\":\"Array of addresses for all collection that were created by the identity.\"},\"_lastNonce\":{\"details\":\"A map of nonces already used by a wallet, to prevent signature hijacking.\"},\"_newTrigger\":{\"details\":\"A variable that is used as an external indicator.\"},\"_preAuthWallets\":{\"details\":\"Temporary map for storing wallets that need to be added, but have not been authorised yet.\"},\"_reentrancyState\":{\"details\":\"Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED\"},\"_walletArray\":{\"details\":\"Array of all wallets associated with the identity.\"},\"_walletIndexMap\":{\"details\":\"A map to make it possible for retrieving wallets by address rather than array index.\"}},\"title\":\"CXIP Identity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSignedWallet(address,uint8,bytes32,bytes32)\":{\"notice\":\"Add a new wallet to the identity.\"},\"addWallet(address)\":{\"notice\":\"Short-hand for addSignedWallet, but without the signature.\"},\"connectWallet()\":{\"notice\":\"Connects a pre-authorised wallet.\"},\"constructor\":{\"notice\":\"Constructor is empty and only reentrancy guard is implemented.\"},\"createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)\":{\"notice\":\"Create a custom ERC721 collection.\"},\"createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))\":{\"notice\":\"Create an ERC721 collection.\"},\"createERC721Token(address,uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14),(bytes32,bytes32,uint8))\":{\"notice\":\"Create an ERC721 NFT for a collection created by this identity.\"},\"getAuthorizer(address)\":{\"notice\":\"Returns the wallet that is authorising the new wallet to be added.\"},\"getCollectionType(address)\":{\"notice\":\"Get the collection's Interface Type: ERC20, ERC721, ERC1155.\"},\"getWallets()\":{\"notice\":\"Get wallets associated with identity.\"},\"init(address,address)\":{\"notice\":\"Initialise the identity. This function works only once.\"},\"isCollectionOpen(address)\":{\"notice\":\"Check if an identity collection is open to external minting.\"},\"isCollectionRegistered(address)\":{\"notice\":\"Check if a collection is registered with identity.\"},\"isNew()\":{\"notice\":\"Used for cross-contract confirmation/validation. You should not use this.\"},\"isOwner()\":{\"notice\":\"Check if current caller is owner of the smart contract.\"},\"isTokenRegistered(address,uint256)\":{\"notice\":\"Check if a token is registered with identity.\"},\"isWalletRegistered(address)\":{\"notice\":\"Check if wallet is associated with the identity.\"},\"listCollections(uint256,uint256)\":{\"notice\":\"List all collections associated with this identity.\"},\"nextNonce(address)\":{\"notice\":\"Get next nonce to be used for a particular wallet.\"},\"totalCollections()\":{\"notice\":\"Get total number of collections associated with this identity.\"}},\"notice\":\"A smart contract for managing an on-chain identity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CxipIdentity.sol\":\"CxipIdentity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/CxipIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./interface/ICxipERC721.sol\\\";\\nimport \\\"./interface/ICxipProvenance.sol\\\";\\nimport \\\"./interface/ICxipRegistry.sol\\\";\\nimport \\\"./library/Address.sol\\\";\\nimport \\\"./library/Signature.sol\\\";\\nimport \\\"./struct/CollectionData.sol\\\";\\nimport \\\"./struct/InterfaceType.sol\\\";\\nimport \\\"./struct/Token.sol\\\";\\nimport \\\"./struct/TokenData.sol\\\";\\nimport \\\"./struct/Verification.sol\\\";\\n\\n/**\\n * @title CXIP Identity\\n * @author CXIP-Labs\\n * @notice A smart contract for managing an on-chain identity.\\n * @dev The smart contract interacts and relies on CXIP Provenance.\\n */\\ncontract CxipIdentity {\\n    /**\\n     * @dev A variable that is used as an external indicator.\\n     */\\n    bool private _newTrigger;\\n    /**\\n     * @dev Array of all wallets associated with the identity.\\n     */\\n    address[] private _walletArray;\\n    /**\\n     * @dev Array of addresses for all collection that were created by the identity.\\n     */\\n    address[] private _collectionArray;\\n    /**\\n     * @dev Temporary map for storing wallets that need to be added, but have not been authorised yet.\\n     */\\n    mapping(address => address) private _preAuthWallets;\\n    /**\\n     * @dev A map of nonces already used by a wallet, to prevent signature hijacking.\\n     */\\n    mapping(address => uint256) private _lastNonce;\\n    /**\\n     * @dev A map to make it possible for retrieving wallets by address rather than array index.\\n     */\\n    mapping(address => uint256) private _walletIndexMap;\\n    /**\\n     * @dev Map with interface type definitions for identity created collections.\\n     */\\n    mapping(address => InterfaceType) private _additionalInfo;\\n\\n    /**\\n     * @dev Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED\\n     */\\n    uint256 private _reentrancyState;\\n\\n    /**\\n     * @notice Constructor is empty and only reentrancy guard is implemented.\\n     * @dev To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \\\"init\\\" function instead.\\n     */\\n    constructor() {\\n        _reentrancyState = 1;\\n    }\\n\\n    /**\\n     * @notice Enables royaltiy functionality at the ERC721 level when ether is sent with no calldata.\\n     * @dev See implementation of _royaltiesFallback.\\n     */\\n    receive() external payable {\\n        _royaltiesFallback();\\n    }\\n\\n    /**\\n     * @notice Enables royaltiy functionality at the ERC721 level no other function matches the call.\\n     * @dev See implementation of _royaltiesFallback.\\n     */\\n    fallback() external {\\n        _royaltiesFallback();\\n    }\\n\\n    /**\\n     * @dev Implementation from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\n     */\\n    modifier nonReentrant() {\\n        require(_reentrancyState != 2, \\\"ReentrancyGuard: reentrant call\\\");\\n        _reentrancyState = 2;\\n        _;\\n        _reentrancyState = 1;\\n    }\\n\\n    /**\\n     * @notice Check if an identity collection is open to external minting.\\n     * @dev For now this always returns false. Left as a placeholder for future development where shared collections might be used.\\n     * @dev Since it's not being used, the collection variable is commented out to avoid compiler warnings.\\n     * @return bool Returns true of false, to indicate if a specific collection is open/shared.\\n     */\\n    function isCollectionOpen(\\n        address/* collection*/\\n    ) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Add a new wallet to the identity.\\n     * @dev This function needs to be called by a wallet already associated with the identity.\\n     * @dev Signature from new wallet can be included or omitted. If not included, new wallet will need to make a connectWallet function call.\\n     * @param newWallet Address of new wallet being added to the identity.\\n     * @param v The V value of the new wallet signature (27-28). Optional.\\n     * @param r The R value of the new wallet signature. Optional.\\n     * @param s The S value of the new wallet signature. Optional.\\n     */\\n    function addSignedWallet(\\n        address newWallet,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant {\\n        require(_isOwner(msg.sender), \\\"CXIP: you are not an the owner\\\");\\n        require(!Address.isContract(newWallet), \\\"CXIP: contract not allowed\\\");\\n        require(\\n            Address.isZero(\\n                ICxipProvenance(\\n                    getRegistry().getProvenance()\\n                ).getWalletIdentity(newWallet)\\n            ),\\n            \\\"CXIP: wallet already registered\\\"\\n        );\\n        if(\\n            r != 0x00\\n            && s != 0x0000000000000000000000000000000000000000000000000000000000000000\\n            && v != 0x0000000000000000000000000000000000000000000000000000000000000000\\n        ) {\\n            uint256 nonce = nextNonce(newWallet);\\n            bytes memory encoded = abi.encodePacked(\\n                address(this),\\n                newWallet,\\n                nonce\\n            );\\n            bool validSig = Signature.Valid(newWallet, r, s, v, encoded);\\n            require(validSig, \\\"CXIP: invalid signature\\\");\\n            _lastNonce[newWallet] = nonce;\\n            _addWalletToEnumeration(newWallet);\\n            ICxipProvenance(\\n                getRegistry().getProvenance()\\n            ).informAboutNewWallet(newWallet);\\n        } else {\\n            _preAuthWallets[newWallet] = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @notice Short-hand for addSignedWallet, but without the signature.\\n     * @dev Use this function if you are not planning to include wallet signature.\\n     * @param newWallet Address of new wallet being added to the identity.\\n     */\\n    function addWallet(address newWallet) public {\\n        addSignedWallet(newWallet, 0, 0, 0);\\n    }\\n\\n    /**\\n     * @notice Connects a pre-authorised wallet.\\n     * @dev Make this call with a new wallet after an addWallet function is called by an existing wallet.\\n     */\\n    function connectWallet() public nonReentrant {\\n        address newWallet = msg.sender;\\n        address authorizer = _preAuthWallets[newWallet];\\n        require(!Address.isZero(authorizer), \\\"CXIP: not authorized by owner\\\");\\n        require(_isOwner(authorizer), \\\"CXIP: authorizer no longer owner\\\");\\n        require(\\n            Address.isZero(\\n                ICxipProvenance(\\n                    getRegistry().getProvenance()\\n                ).getWalletIdentity(newWallet)\\n            ),\\n            \\\"CXIP: wallet already registered\\\"\\n        );\\n        _addWalletToEnumeration(newWallet);\\n        ICxipProvenance(getRegistry().getProvenance()).informAboutNewWallet(\\n            newWallet\\n        );\\n        delete _preAuthWallets[newWallet];\\n    }\\n\\n    /**\\n     * @notice Create an ERC721 NFT for a collection created by this identity.\\n     * @dev This function is embedded inside of the identity contract to make validation and providence bulletproof.\\n     * @dev An NFT can be minted directly inside the collection, but the CXIP Asset smart contract will not mark it as a certified NFT.\\n     * @param collection Address of the smart contract for the collection. Must have been created by this identity.\\n     * @param id Token id for the NFT to mint. Can be left as 0 to allow automatic token id allocation.\\n     * @param tokenData A struct containing all of the necessary NFT information.\\n     * @param verification A verification signature issued by the CXIP Asset Signer as a guarantee of a valid NFT.\\n     * @return uint256 Returns the token id of the newly minted NFT.\\n     */\\n    function createERC721Token(\\n        address collection,\\n        uint256 id,\\n        TokenData calldata tokenData,\\n        Verification calldata verification\\n    ) public nonReentrant returns (uint256) {\\n        require(_isOwner(msg.sender), \\\"CXIP: you are not an the owner\\\");\\n        require(_isOwner(tokenData.creator), \\\"CXIP: creator not owner\\\");\\n        require(\\n            _additionalInfo[collection] == InterfaceType.ERC721,\\n            \\\"CXIP: collection not ERC721\\\"\\n        );\\n        bytes memory encoded = abi.encodePacked(\\n            address(this),\\n            tokenData.creator,\\n            collection,\\n            id,\\n            tokenData.payloadHash,\\n            tokenData.payloadSignature.r,\\n            tokenData.payloadSignature.s,\\n            tokenData.payloadSignature.v,\\n            tokenData.arweave,\\n            tokenData.arweave2,\\n            tokenData.ipfs,\\n            tokenData.ipfs2\\n        );\\n        require(Signature.Valid(\\n            getRegistry().getAssetSigner(),\\n            verification.r,\\n            verification.s,\\n            verification.v,\\n            encoded\\n        ), \\\"CXIP: invalid signature\\\");\\n        return ICxipERC721(collection).cxipMint(id, tokenData);\\n    }\\n\\n    /**\\n     * @notice Create an ERC721 collection.\\n     * @dev Creates and associates the ERC721 collection with the identity.\\n     * @param saltHash A salt used for deploying a collection to a specific address.\\n     * @param collectionCreator Specific wallet, associated with the identity, that will be marked as the creator of this collection.\\n     * @param verification Signature created by the collectionCreator wallet to validate the integrity of the collection data.\\n     * @param collectionData The collection data struct, with all the default collection info.\\n     * @return address Returns the address of the newly created collection.\\n     */\\n    function createERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData\\n    ) public nonReentrant returns (address) {\\n        if(collectionCreator != msg.sender) {\\n            require(\\n                Signature.Valid(\\n                    collectionCreator,\\n                    verification.r,\\n                    verification.s,\\n                    verification.v,\\n                    abi.encodePacked(\\n                        address(this),\\n                        collectionCreator,\\n                        collectionData.name,\\n                        collectionData.name2,\\n                        collectionData.symbol,\\n                        collectionData.royalties,\\n                        collectionData.bps\\n                    )\\n                ),\\n                \\\"CXIP: invalid signature\\\"\\n            );\\n        }\\n        require(_isOwner(collectionCreator), \\\"CXIP: creator not owner\\\");\\n        bytes memory bytecode = hex\\\"608060405234801561001057600080fd5b50610128806100206000396000f3fe608060408190527f58bfd99600000000000000000000000000000000000000000000000000000000815260009073deaDDeADDEaDdeaDdEAddEADDEAdDeadDEADDEaD906358bfd9969060849060209060048186803b158015605f57600080fd5b505afa1580156072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906094919060b9565b90503660008037600080366000845af43d6000803e80801560b4573d6000f35b3d6000fd5b60006020828403121560c9578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811460eb578182fd5b939250505056fea2646970667358221220e40db164da39a10669859af903c7c9d1a96e3a2e162855f6b00aa89d483e4c6164736f6c63430008040033\\\";\\n        address cxipAddress;\\n        assembly {\\n            cxipAddress := create2(\\n                0,\\n                add(bytecode, 0x20),\\n                mload(bytecode),\\n                saltHash\\n            )\\n        }\\n        ICxipERC721(cxipAddress).init(collectionCreator, collectionData);\\n        _addCollectionToEnumeration(cxipAddress, InterfaceType.ERC721);\\n        return(cxipAddress);\\n    }\\n\\n    /**\\n     * @notice Create a custom ERC721 collection.\\n     * @dev Creates and associates the custom ERC721 collection with the identity.\\n     * @param saltHash A salt used for deploying a collection to a specific address.\\n     * @param collectionCreator Specific wallet, associated with the identity, that will be marked as the creator of this collection.\\n     * @param verification Signature created by the collectionCreator wallet to validate the integrity of the collection data.\\n     * @param collectionData The collection data struct, with all the default collection info.\\n     * @param slot Hash of proxy contract slot where the source is saved in registry.\\n     * @param bytecode The bytecode used for deployment. Validated against slot code for abuse prevention.\\n     * @return address Returns the address of the newly created collection.\\n     */\\n    function createCustomERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData,\\n        bytes32 slot,\\n        bytes memory bytecode\\n    ) public nonReentrant returns (address) {\\n        if(collectionCreator != msg.sender) {\\n            require(\\n                Signature.Valid(\\n                    collectionCreator,\\n                    verification.r,\\n                    verification.s,\\n                    verification.v,\\n                    abi.encodePacked(\\n                        address(this),\\n                        collectionCreator,\\n                        collectionData.name,\\n                        collectionData.name2,\\n                        collectionData.symbol,\\n                        collectionData.royalties,\\n                        collectionData.bps\\n                    )\\n                ),\\n                \\\"CXIP: invalid signature\\\"\\n            );\\n        }\\n        require(_isOwner(collectionCreator), \\\"CXIP: creator not owner\\\");\\n        address cxipAddress;\\n        assembly {\\n            cxipAddress := create2(\\n                0,\\n                add(bytecode, 0x20),\\n                mload(bytecode),\\n                saltHash\\n            )\\n        }\\n        require(\\n            keccak256(cxipAddress.code) == keccak256(ICxipRegistry(0xdFbb74177C45C82aC06327C204bB5Ef2dAeC57B8).getCustomSource(slot).code),\\n            \\\"CXIP: byte code missmatch\\\"\\n        );\\n        ICxipERC721(cxipAddress).init(collectionCreator, collectionData);\\n        _addCollectionToEnumeration(cxipAddress, InterfaceType.ERC721);\\n        return(cxipAddress);\\n    }\\n\\n    /**\\n     * @notice Initialise the identity. This function works only once.\\n     * @dev It is important to run this inside the same function as the create2 for this contract.\\n     * @param wallet The address of the wallet to add to new identity.\\n     * @param secondaryWallet Optional second wallet to add to new identity.\\n     */\\n    function init(address wallet, address secondaryWallet) public nonReentrant {\\n        require(_walletArray.length == 0, \\\"CXIP: already initialized\\\");\\n        _addWalletToEnumeration(wallet);\\n        if(!Address.isZero(secondaryWallet)) {\\n            _addWalletToEnumeration(secondaryWallet);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the wallet that is authorising the new wallet to be added.\\n     * @dev Should be used for visual validation of wallet that is authorising a new wallet to be added.\\n     * @param wallet The address of the new wallet being requested to add.\\n     * @return address Returns the address of the wallet that is requesting the new wallet.\\n     */\\n    function getAuthorizer(address wallet) public view returns (address) {\\n        return _preAuthWallets[wallet];\\n    }\\n\\n    /**\\n     * @dev This retrieves a collection by index. Don't be confused by the ID in the title.\\n     * @param index Index of the item to get from the array.\\n     * @return address Returns the collection contract address at that index of array.\\n     */\\n    function getCollectionById(uint256 index) public view returns (address) {\\n        return _collectionArray[index];\\n    }\\n\\n    /**\\n     * @notice Get the collection's Interface Type: ERC20, ERC721, ERC1155.\\n     * @dev Collection must be associated with identity.\\n     * @param collection Contract address of the collection.\\n     * @return InterfaceType Returns an enum (uint8) of the collection interface type.\\n     */\\n    function getCollectionType(address collection) public view returns (InterfaceType) {\\n        return _additionalInfo[collection];\\n    }\\n\\n    /**\\n     * @notice Get wallets associated with identity.\\n     * @dev Any wallet returned in this response should be considered as owner.\\n     * @return address[] Returns an array of all the wallets that have been associated with the identity contract..\\n     */\\n    function getWallets() public view returns (address[] memory) {\\n        return _walletArray;\\n    }\\n\\n    /**\\n     * @dev Reserved function for later use. Will be used to identify if collection was heavily vetted.\\n     * @param collection Contract address of the collection.\\n     * @return bool Returns true if collection is associated with the identity.\\n     */\\n    function isCollectionCertified(\\n        address collection\\n    ) public view returns (bool) {\\n        return _isCollectionValid(collection);\\n    }\\n\\n    /**\\n     * @notice Check if a collection is registered with identity.\\n     * @dev For now will only return true for collections created directly from the identity contract.\\n     * @param collection Contract address of the collection.\\n     * @return bool Returns true if collection is associated with the identity.\\n     */\\n    function isCollectionRegistered(\\n        address collection\\n    ) public view returns (bool) {\\n        return _isCollectionValid(collection);\\n    }\\n\\n    /**\\n     * @notice Used for cross-contract confirmation/validation. You should not use this.\\n     * @dev This function is called by provenance as an extra layer of validation.\\n     * @return bool Returns the current state of the _newTrigger variable.\\n     */\\n    function isNew() public view returns (bool) {\\n        return _newTrigger;\\n    }\\n\\n    /**\\n     * @notice Check if current caller is owner of the smart contract.\\n     * @dev This checks if the msg.sender wallet is associated with the identity.\\n     * @return bool Returns true is the wallet is authorised by the identity.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return isWalletRegistered(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Reserved function for later use. Will be used to identify if token was heavily vetted.\\n     * @param collection Contract address of the collection.\\n     * @param tokenId Id of the token.\\n     * @return bool Returns true if token is associated with the identity.\\n     */\\n    function isTokenCertified(\\n        address collection,\\n        uint256 tokenId\\n    ) public view returns (bool) {\\n        return _isValidToken(collection, tokenId);\\n    }\\n\\n    /**\\n     * @notice Check if a token is registered with identity.\\n     * @dev For now will only return true for tokens created directly from the identity contract.\\n     * @param collection Contract address of the collection.\\n     * @param tokenId Id of the token.\\n     * @return bool Returns true if token is associated with the identity.\\n     */\\n    function isTokenRegistered(\\n        address collection,\\n        uint256 tokenId\\n    ) public view returns (bool) {\\n        return _isValidToken(collection, tokenId);\\n    }\\n\\n    /**\\n     * @notice Check if wallet is associated with the identity.\\n     * @dev Used for external validation. Wallets can only be associated to one identity, ever.\\n     * @param wallet Address of wallet to check against the identity.\\n     * @return bool Returns true if wallet is registered to this identity.\\n     */\\n    function isWalletRegistered(address wallet) public view returns (bool) {\\n        return _isOwner(wallet);\\n    }\\n\\n    /**\\n     * @notice List all collections associated with this identity.\\n     * @dev Use in conjunction with the totalCollections function, for pagination.\\n     * @param offset Index from where to start pagination. Start at 0.\\n     * @param length Length of slice to return, starting from offset index.\\n     * @return address[] Returns a fixed length array starting from offset.\\n     */\\n    function listCollections(\\n        uint256 offset,\\n        uint256 length\\n    ) public view returns (address[] memory) {\\n        uint256 limit = offset + length;\\n        if(limit > _collectionArray.length) {\\n            limit = _collectionArray.length;\\n        }\\n        address[] memory collections = new address[](limit - offset);\\n        uint256 n = 0;\\n        for(uint256 i = offset; i < limit; i++) {\\n            collections[n] = _collectionArray[i];\\n            n++;\\n        }\\n        return collections;\\n    }\\n\\n    /**\\n     * @notice Get next nonce to be used for a particular wallet.\\n     * @dev This is not wallet transaction nonce. This is an internal nonce handled by the smart contract. Should be used for special instances where nonced signatures are required.\\n     * @param wallet Address of wallet.\\n     * @return uint256 Returns the next nonce to use.\\n     */\\n    function nextNonce(address wallet) public view returns (uint256) {\\n        uint256 nonce = _lastNonce[wallet];\\n        return nonce + 1;\\n    }\\n\\n    /**\\n     * @notice Get total number of collections associated with this identity.\\n     * @dev Use in conjunction with the listCollections, for pagination.\\n     * @return uint256 Returns the total length of collections.\\n     */\\n    function totalCollections() public view returns (uint256) {\\n        return _collectionArray.length;\\n    }\\n\\n    /**\\n     * @dev Add collection to identity.\\n     * @param collection Contract address of the collection to add.\\n     * @param collectionType Interface type of the collection being added.\\n     */\\n    function _addCollectionToEnumeration(\\n        address collection,\\n        InterfaceType collectionType\\n    ) internal {\\n        _collectionArray.push(collection);\\n        _additionalInfo[collection] = collectionType;\\n    }\\n\\n    /**\\n     * @dev Add wallet to identity.\\n     * @param wallet Address of wallet to add.\\n     */\\n    function _addWalletToEnumeration(address wallet) internal {\\n        uint256 index = _walletArray.length;\\n        _walletArray.push(wallet);\\n        _walletIndexMap[wallet] = index;\\n    }\\n\\n    /**\\n     * @dev Remove collection from identity.\\n     * @param index Array index of the collection to remove.\\n     */\\n    function _removeCollectionFromEnumeration(uint256 index) internal {\\n        require(\\n            _collectionArray.length != 0,\\n            \\\"CXIP: removing from empty array\\\"\\n        );\\n        delete _additionalInfo[_collectionArray[index]];\\n        uint256 lastIndex = _collectionArray.length - 1;\\n        if(lastIndex != 0) {\\n            if(index != lastIndex) {\\n                address lastCollection = _collectionArray[lastIndex];\\n                _collectionArray[index] = lastCollection;\\n            }\\n        }\\n        if(lastIndex == 0) {\\n            delete _collectionArray;\\n        } else {\\n            delete _collectionArray[lastIndex];\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove wallet from identity.\\n     * @param wallet Address of wallet to remove.\\n     */\\n    function _removeWalletFromEnumeration(address wallet) internal {\\n        require(_walletArray.length != 0, \\\"CXIP: removing from empty array\\\");\\n        uint256 lastIndex = _walletArray.length - 1;\\n        require(lastIndex != 0, \\\"CXIP: cannot remove last wallet\\\");\\n        uint256 walletIndex = _walletIndexMap[wallet];\\n        if(walletIndex != lastIndex) {\\n            address lastWallet = _walletArray[lastIndex];\\n            _walletArray[walletIndex] = lastWallet;\\n            _walletIndexMap[lastWallet] = walletIndex;\\n        }\\n        delete _walletArray[lastIndex];\\n        delete _walletIndexMap[wallet];\\n    }\\n\\n    /**\\n     * @notice Allows retrieval of royalties from the contract.\\n     * @dev This is a default fallback to ensure the royalties are available.\\n     */\\n    function _royaltiesFallback() internal {\\n        address _target = getRegistry().getPA1D();\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), _target, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if collection is associated with this identity.\\n     * @param collection Contract address of the collection.\\n     * @return bool Returns true if collection is associated with this identity.\\n     */\\n    function _isCollectionValid(\\n        address collection\\n    ) internal view returns (bool) {\\n        return _additionalInfo[collection] != InterfaceType.NULL;\\n    }\\n\\n    /**\\n     * @dev Check if wallet is associated with this identity.\\n     * @param wallet Address of the wallet.\\n     * @return bool Returns true if wallet is associated with this identity.\\n     */\\n    function _isOwner(address wallet) internal view returns (bool) {\\n        return _walletArray[_walletIndexMap[wallet]] == wallet;\\n    }\\n\\n    /**\\n     * @dev Check if token is associated with this identity.\\n     * @param collection Contract address of the collection.\\n     * @dev Since it's not being used yet, the tokenId variable is commented out to avoid compiler warnings.\\n     * @return bool Returns true if token is associated with this identity.\\n     */\\n    function _isValidToken(\\n        address collection,\\n        uint256/* tokenId*/\\n    ) internal view returns (bool) {\\n        return _additionalInfo[collection] != InterfaceType.NULL;\\n    }\\n\\n    /**\\n     * @dev Get the top-level CXIP Registry smart contract. Function must always be internal to prevent miss-use/abuse through bad programming practices.\\n     * @return ICxipRegistry The address of the top-level CXIP Registry smart contract.\\n     */\\n    function getRegistry() internal pure returns (ICxipRegistry) {\\n        return ICxipRegistry(0xdFbb74177C45C82aC06327C204bB5Ef2dAeC57B8);\\n    }\\n}\\n\",\"keccak256\":\"0x63ccc3ea86ecc35a1eeed65d5ca2a06d5c8b2c80a8410428436afe779460e847\",\"license\":\"MIT\"},\"contracts/interface/ICxipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\nimport \\\"../struct/Verification.sol\\\";\\n\\ninterface ICxipERC721 {\\n    function arweaveURI(uint256 tokenId) external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function creator(uint256 tokenId) external view returns (address);\\n\\n    function httpURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ipfsURI(uint256 tokenId) external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function payloadHash(uint256 tokenId) external view returns (bytes32);\\n\\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory);\\n\\n    function payloadSigner(uint256 tokenId) external view returns (address);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /* Disabled due to tokenEnumeration not enabled.\\n    function tokensOfOwner(\\n        address wallet\\n    ) external view returns (uint256[] memory);\\n    */\\n\\n    function verifySHA256(bytes32 hash, bytes calldata payload) external pure returns (bool);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function init(address newOwner, CollectionData calldata collectionData) external;\\n\\n    /* Disabled since this flow has not been agreed on.\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n    */\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function setApprovalForAll(address to, bool approved) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function cxipMint(uint256 id, TokenData calldata tokenData) external returns (uint256);\\n\\n    function setApprovalForAll(\\n        address from,\\n        address to,\\n        bool approved\\n    ) external;\\n\\n    function setName(bytes32 newName, bytes32 newName2) external;\\n\\n    function setSymbol(bytes32 newSymbol) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    /*\\n    // Disabled due to tokenEnumeration not enabled.\\n    function balanceOf(address wallet) external view returns (uint256);\\n    */\\n    function baseURI() external view returns (string memory);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getIdentity() external view returns (address);\\n\\n    function isApprovedForAll(address wallet, address operator) external view returns (bool);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /* Disabled due to tokenEnumeration not enabled.\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n    */\\n\\n    /* Disabled due to tokenEnumeration not enabled.\\n    function tokenOfOwnerByIndex(\\n        address wallet,\\n        uint256 index\\n    ) external view returns (uint256);\\n    */\\n\\n    /* Disabled due to tokenEnumeration not enabled.\\n    function totalSupply() external view returns (uint256);\\n    */\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x45011b1a62d103c982a6a5c24e2a760a6168647d7f0e344961280ee5839f03b5\",\"license\":\"MIT\"},\"contracts/interface/ICxipProvenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipProvenance {\\n    function createIdentity(\\n        bytes32 saltHash,\\n        address wallet,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256, address);\\n\\n    function createIdentityBatch(\\n        bytes32 saltHash,\\n        address[] memory wallets,\\n        uint8[] memory V,\\n        bytes32[] memory RS\\n    ) external returns (uint256, address);\\n\\n    function getIdentity() external view returns (address);\\n\\n    function getWalletIdentity(address wallet) external view returns (address);\\n\\n    function informAboutNewWallet(address newWallet) external;\\n\\n    function isIdentityValid(address identity) external view returns (bool);\\n\\n    function nextNonce(address wallet) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdea801440658a3db585723764647f20a5232da262891914a8f97f70f1d538508\",\"license\":\"MIT\"},\"contracts/interface/ICxipRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipRegistry {\\n    function getAsset() external view returns (address);\\n\\n    function getAssetSigner() external view returns (address);\\n\\n    function getAssetSource() external view returns (address);\\n\\n    function getCopyright() external view returns (address);\\n\\n    function getCopyrightSource() external view returns (address);\\n\\n    function getCustomSource(bytes32 name) external view returns (address);\\n\\n    function getCustomSourceFromString(string memory name) external view returns (address);\\n\\n    function getERC1155CollectionSource() external view returns (address);\\n\\n    function getERC721CollectionSource() external view returns (address);\\n\\n    function getIdentitySource() external view returns (address);\\n\\n    function getPA1D() external view returns (address);\\n\\n    function getPA1DSource() external view returns (address);\\n\\n    function getProvenance() external view returns (address);\\n\\n    function getProvenanceSource() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function setAsset(address proxy) external;\\n\\n    function setAssetSigner(address source) external;\\n\\n    function setAssetSource(address source) external;\\n\\n    function setCopyright(address proxy) external;\\n\\n    function setCopyrightSource(address source) external;\\n\\n    function setCustomSource(string memory name, address source) external;\\n\\n    function setERC1155CollectionSource(address source) external;\\n\\n    function setERC721CollectionSource(address source) external;\\n\\n    function setIdentitySource(address source) external;\\n\\n    function setPA1D(address proxy) external;\\n\\n    function setPA1DSource(address source) external;\\n\\n    function setProvenance(address proxy) external;\\n\\n    function setProvenanceSource(address source) external;\\n}\\n\",\"keccak256\":\"0x955bdf21dd441b5f52524655fec5b24a580ab498cf746e736f6a1b92ff36a959\",\"license\":\"MIT\"},\"contracts/library/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 &&\\n            codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\\n    }\\n\\n    function isZero(address account) internal pure returns (bool) {\\n        return (account == address(0));\\n    }\\n}\\n\",\"keccak256\":\"0x53828b644743921c47d7b36278f23203cd56d18c1f57a6833cc316558befffef\",\"license\":\"MIT\"},\"contracts/library/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Signature {\\n    function Derive(\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            address derived1,\\n            address derived2,\\n            address derived3,\\n            address derived4\\n        )\\n    {\\n        bytes32 encoded32;\\n        assembly {\\n            encoded32 := mload(add(encoded, 32))\\n        }\\n        derived1 = ecrecover(encoded32, v, r, s);\\n        derived2 = ecrecover(\\n            keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32)),\\n            v,\\n            r,\\n            s\\n        );\\n        encoded32 = keccak256(encoded);\\n        derived3 = ecrecover(encoded32, v, r, s);\\n        encoded32 = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32));\\n        derived4 = ecrecover(encoded32, v, r, s);\\n    }\\n\\n    function PackMessage(bytes memory encoded, bool geth) internal pure returns (bytes32) {\\n        bytes32 hash = keccak256(encoded);\\n        if (geth) {\\n            hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        }\\n        return hash;\\n    }\\n\\n    function Valid(\\n        address target,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory encoded\\n    ) internal pure returns (bool) {\\n        bytes32 encoded32;\\n        address derived;\\n        if (encoded.length == 32) {\\n            assembly {\\n                encoded32 := mload(add(encoded, 32))\\n            }\\n            derived = ecrecover(encoded32, v, r, s);\\n            if (target == derived) {\\n                return true;\\n            }\\n            derived = ecrecover(\\n                keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", encoded32)),\\n                v,\\n                r,\\n                s\\n            );\\n            if (target == derived) {\\n                return true;\\n            }\\n        }\\n        bytes32 hash = keccak256(encoded);\\n        derived = ecrecover(hash, v, r, s);\\n        if (target == derived) {\\n            return true;\\n        }\\n        hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        derived = ecrecover(hash, v, r, s);\\n        return target == derived;\\n    }\\n}\\n\",\"keccak256\":\"0xf8e8db87fb826bea8bc1ed531b9c5362d054a2c87c516bbc342caeca1ef5b523\",\"license\":\"MIT\"},\"contracts/struct/CollectionData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./UriType.sol\\\";\\n\\nstruct CollectionData {\\n    bytes32 name;\\n    bytes32 name2;\\n    bytes32 symbol;\\n    address royalties;\\n    uint96 bps;\\n}\\n\",\"keccak256\":\"0x328167148d845d1945ef8b77f710750d10cd38d2c8510e22ca52ec67781e3b8f\",\"license\":\"MIT\"},\"contracts/struct/InterfaceType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum InterfaceType {\\n    NULL, // 0\\n    ERC20, // 1\\n    ERC721, // 2\\n    ERC1155 // 3\\n}\\n\",\"keccak256\":\"0xed4f93a0fc084fa9d0a55d5e7c11f53e34b4c0d45d93de6ff03f345ae9a52885\",\"license\":\"MIT\"},\"contracts/struct/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./InterfaceType.sol\\\";\\n\\nstruct Token {\\n    address collection;\\n    uint256 tokenId;\\n    InterfaceType tokenType;\\n    address creator;\\n}\\n\",\"keccak256\":\"0xa9c13c64d8f611f96d8b4c39eb42dab1a05d70119f351047ee939e63d3a29e6f\",\"license\":\"MIT\"},\"contracts/struct/TokenData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./Verification.sol\\\";\\n\\nstruct TokenData {\\n    bytes32 payloadHash;\\n    Verification payloadSignature;\\n    address creator;\\n    bytes32 arweave;\\n    bytes11 arweave2;\\n    bytes32 ipfs;\\n    bytes14 ipfs2;\\n}\\n\",\"keccak256\":\"0xd7288c705f3247427487e4491a7cddb84a42af2a32720a16f75c8950380a717d\",\"license\":\"MIT\"},\"contracts/struct/UriType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum UriType {\\n    ARWEAVE, // 0\\n    IPFS, // 1\\n    HTTP // 2\\n}\\n\",\"keccak256\":\"0xe64f56b37ab2043dd80ae3b06abb928151837a546653ea0bd350d9078ccb29a6\",\"license\":\"MIT\"},\"contracts/struct/Verification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nstruct Verification {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n}\\n\",\"keccak256\":\"0x56a68601446e86e6a5d8bc4dc66df60fb6fb1518c4cc4fd0e9a87d50386a8652\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600755612249806100256000396000f3fe6080604052600436106101395760003560e01c806388e7e766116100ab578063dbdd85a31161006f578063dbdd85a31461038e578063e547cb85146103ae578063eb6538e91461038e578063efeb5f1f146103ce578063f09a4016146103ee578063fe75154b1461040e57610148565b806388e7e766146101dd5780638f32d59b146102f1578063c3386c8114610306578063c4c36e651461034c578063db7a46051461037957610148565b80632d66f063116100fd5780632d66f0631461022e578063379d4f26146102435780634da465ff1461026357806361d9db2d14610283578063757df8fd146102985780637f247e49146102d157610148565b80630cd55abf1461015d57806312eb7bd51461019057806327c0056a146101b057806327f63b05146101dd5780632b09f4561461020d57610148565b3661014857610146610426565b005b34801561015457600080fd5b50610146610426565b34801561016957600080fd5b5061017d6101783660046118c5565b6104c4565b6040519081526020015b60405180910390f35b34801561019c57600080fd5b5061017d6101ab3660046118fa565b6104ef565b3480156101bc57600080fd5b506101d06101cb366004611981565b6107ba565b6040516101879190611a7d565b3480156101e957600080fd5b506101fd6101f83660046118c5565b610a99565b6040519015158152602001610187565b34801561021957600080fd5b506101fd6102283660046118c5565b50600090565b34801561023a57600080fd5b50610146610aaa565b34801561024f57600080fd5b5061014661025e366004611aa7565b610da6565b34801561026f57600080fd5b506101d061027e366004611aeb565b6110d9565b34801561028f57600080fd5b5060025461017d565b3480156102a457600080fd5b506101d06102b33660046118c5565b6001600160a01b039081166000908152600360205260409020541690565b3480156102dd57600080fd5b506101fd6102ec3660046118c5565b611237565b3480156102fd57600080fd5b506101fd611242565b34801561031257600080fd5b5061033f6103213660046118c5565b6001600160a01b031660009081526006602052604090205460ff1690565b6040516101879190611b48565b34801561035857600080fd5b5061036c610367366004611b70565b611252565b6040516101879190611b92565b34801561038557600080fd5b5061036c611354565b34801561039a57600080fd5b506101fd6103a9366004611bdf565b6113b6565b3480156103ba57600080fd5b506101d06103c9366004611c0b565b6113c2565b3480156103da57600080fd5b506101466103e93660046118c5565b6113f2565b3480156103fa57600080fd5b50610146610409366004611c24565b611402565b34801561041a57600080fd5b5060005460ff166101fd565b600073dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611c5d565b90503660008037600080366000845af43d6000803e8080156104bf573d6000f35b3d6000fd5b6001600160a01b0381166000908152600460205260408120546104e8816001611c90565b9392505050565b60006007546002141561051d5760405162461bcd60e51b815260040161051490611ca8565b60405180910390fd5b600260075561052b336114a0565b6105475760405162461bcd60e51b815260040161051490611cdf565b61055f61055a60a08501608086016118c5565b6114a0565b61057b5760405162461bcd60e51b815260040161051490611d16565b60026001600160a01b03861660009081526006602052604090205460ff1660038111156105aa576105aa611b32565b146105f75760405162461bcd60e51b815260206004820152601b60248201527f435849503a20636f6c6c656374696f6e206e6f742045524337323100000000006044820152606401610514565b60003061060a60a08601608087016118c5565b87878735602089013560408a013561062860808c0160608d01611d47565b60a08c013561063d60e08e0160c08f01611d7a565b8d60e001358e6101000160208101906106569190611dad565b6040516020016106719c9b9a99989796959493929190611dc8565b604051602081830303815290604052905061071e6106a073dfbb74177c45c82ac06327c204bb5ef2daec57b890565b6001600160a01b031663d5d644ad6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190611c5d565b843560208601356107186060880160408901611d47565b856114ed565b61073a5760405162461bcd60e51b815260040161051490611e67565b6040516313e2eab360e21b81526001600160a01b03871690634f8baacc906107689088908890600401611e98565b6020604051808303816000875af1158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab9190611f4a565b60016007559695505050505050565b6000600754600214156107df5760405162461bcd60e51b815260040161051490611ca8565b60026007556001600160a01b03861633146108d4576108b8868635602088013561080f60608a0160408b01611d47565b308b8a600001358b602001358c604001358d606001602081019061083391906118c5565b8e60800160208101906108469190611f7a565b604051606097881b6001600160601b0319908116602083015296881b8716603482015260488101959095526068850193909352608884019190915290931b90911660a882015260a09190911b6001600160a01b03191660bc82015260c8016040516020818303038152906040526114ed565b6108d45760405162461bcd60e51b815260040161051490611e67565b6108dd866114a0565b6108f95760405162461bcd60e51b815260040161051490611d16565b6000878351602085016000f560405163b305cff960e01b81526004810186905290915073dfbb74177c45c82ac06327c204bb5ef2daec57b89063b305cff990602401602060405180830381865afa158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190611c5d565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c80519060200120816001600160a01b0316803b806020016040519081016040528181526000908060200190933c8051906020012014610a1e5760405162461bcd60e51b8152602060048201526019602482015278086b092a07440c4f2e8ca40c6dec8ca40dad2e6e6dac2e8c6d603b1b6044820152606401610514565b60405163128bfa2560e01b81526001600160a01b0382169063128bfa2590610a4c908a908990600401611f95565b600060405180830381600087803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b50505050610a8981600261172e565b6001600755979650505050505050565b6000610aa4826117ac565b92915050565b60075460021415610acd5760405162461bcd60e51b815260040161051490611ca8565b6002600755336000818152600360205260409020546001600160a01b031680610b385760405162461bcd60e51b815260206004820152601d60248201527f435849503a206e6f7420617574686f72697a6564206279206f776e65720000006044820152606401610514565b610b41816114a0565b610b8d5760405162461bcd60e51b815260206004820181905260248201527f435849503a20617574686f72697a6572206e6f206c6f6e676572206f776e65726044820152606401610514565b610c7f73dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c069190611c5d565b6001600160a01b0316634b19fac8846040518263ffffffff1660e01b8152600401610c319190611a7d565b602060405180830381865afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190611c5d565b6001600160a01b03161590565b610c9b5760405162461bcd60e51b815260040161051490611ffd565b610ca4826117e4565b73dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a9190611c5d565b6001600160a01b031663e327f60b836040518263ffffffff1660e01b8152600401610d459190611a7d565b600060405180830381600087803b158015610d5f57600080fd5b505af1158015610d73573d6000803e3d6000fd5b5050506001600160a01b03909216600090815260036020526040902080546001600160a01b031916905550506001600755565b60075460021415610dc95760405162461bcd60e51b815260040161051490611ca8565b6002600755610dd7336114a0565b610df35760405162461bcd60e51b815260040161051490611cdf565b610dfc84611840565b15610e495760405162461bcd60e51b815260206004820152601a60248201527f435849503a20636f6e7472616374206e6f7420616c6c6f7765640000000000006044820152606401610514565b610eed73dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190611c5d565b6001600160a01b0316634b19fac8866040518263ffffffff1660e01b8152600401610c319190611a7d565b610f095760405162461bcd60e51b815260040161051490611ffd565b8115801590610f1757508015155b8015610f25575060ff831615155b156110a5576000610f35856104c4565b6040516001600160601b031930606090811b8216602084015288901b1660348201526048810182905290915060009060680160405160208183030381529060405290506000610f8787868689866114ed565b905080610fa65760405162461bcd60e51b815260040161051490611e67565b6001600160a01b0387166000908152600460205260409020839055610fca876117e4565b73dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110409190611c5d565b6001600160a01b031663e327f60b886040518263ffffffff1660e01b815260040161106b9190611a7d565b600060405180830381600087803b15801561108557600080fd5b505af1158015611099573d6000803e3d6000fd5b505050505050506110ce565b6001600160a01b038416600090815260036020526040902080546001600160a01b031916331790555b505060016007555050565b6000600754600214156110fe5760405162461bcd60e51b815260040161051490611ca8565b60026007556001600160a01b03841633146111785761115c848435602086013561112e6060880160408901611d47565b3089883560208a013560408b013561114c60808d0160608e016118c5565b61084660a08e0160808f01611f7a565b6111785760405162461bcd60e51b815260040161051490611e67565b611181846114a0565b61119d5760405162461bcd60e51b815260040161051490611d16565b600060405180610180016040528061014881526020016120cc610148913990506000868251602084016000f560405163128bfa2560e01b81529091506001600160a01b0382169063128bfa25906111fa9089908890600401611f95565b600060405180830381600087803b15801561121457600080fd5b505af1158015611228573d6000803e3d6000fd5b505050506107ab81600261172e565b6000610aa4826114a0565b600061124d33611237565b905090565b606060006112608385611c90565b60025490915081111561127257506002545b600061127e8583612034565b67ffffffffffffffff8111156112965761129661196b565b6040519080825280602002602001820160405280156112bf578160200160208202803683370190505b5090506000855b8381101561134957600281815481106112e1576112e161204b565b9060005260206000200160009054906101000a90046001600160a01b03168383815181106113115761131161204b565b6001600160a01b03909216602092830291909101909101528161133381612061565b925050808061134190612061565b9150506112c6565b509095945050505050565b606060018054806020026020016040519081016040528092919081815260200182805480156113ac57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161138e575b5050505050905090565b60006104e88383611877565b6000600282815481106113d7576113d761204b565b6000918252602090912001546001600160a01b031692915050565b6113ff8160008080610da6565b50565b600754600214156114255760405162461bcd60e51b815260040161051490611ca8565b6002600755600154156114765760405162461bcd60e51b815260206004820152601960248201527810d612540e88185b1c9958591e481a5b9a5d1a585b1a5e9959603a1b6044820152606401610514565b61147f826117e4565b6001600160a01b0381161561149757611497816117e4565b50506001600755565b6001600160a01b0381166000818152600560205260408120546001805492939290919081106114d1576114d161204b565b6000918252602090912001546001600160a01b03161492915050565b6000806000835160201415611615576020840151915060018286898960405160008152602001604052604051611526949392919061207c565b6020604051602081039080840390855afa158015611548573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b0316141561157957600192505050611725565b60018260405160200161158c919061209a565b60405160208183030381529060405280519060200120868989604051600081526020016040526040516115c2949392919061207c565b6020604051602081039080840390855afa1580156115e4573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b0316141561161557600192505050611725565b600084805190602001209050600181878a8a60405160008152602001604052604051611644949392919061207c565b6020604051602081039080840390855afa158015611666573d6000803e3d6000fd5b505050602060405103519150816001600160a01b0316896001600160a01b031614156116985760019350505050611725565b806040516020016116a9919061209a565b604051602081830303815290604052805190602001209050600181878a8a604051600081526020016040526040516116e4949392919061207c565b6020604051602081039080840390855afa158015611706573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038b81169116149450505050505b95945050505050565b6002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b03851690811790915560009081526006602052604090208054839260ff19909116908360038111156117a3576117a3611b32565b02179055505050565b6000806001600160a01b03831660009081526006602052604090205460ff1660038111156117dc576117dc611b32565b141592915050565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b039093166001600160a01b03199093168317905560009182526005602052604090912055565b6000813f80158015906104e857507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470141592915050565b6000806001600160a01b03841660009081526006602052604090205460ff1660038111156118a7576118a7611b32565b14159392505050565b6001600160a01b03811681146113ff57600080fd5b6000602082840312156118d757600080fd5b81356104e8816118b0565b6000606082840312156118f457600080fd5b50919050565b6000806000808486036101c081121561191257600080fd5b853561191d816118b0565b945060208601359350610120603f198201121561193957600080fd5b5060408501915061194e8661016087016118e2565b905092959194509250565b600060a082840312156118f457600080fd5b634e487b7160e01b600052604160045260246000fd5b600080600080600080610180878903121561199b57600080fd5b8635955060208701356119ad816118b0565b94506119bc88604089016118e2565b93506119cb8860a08901611959565b9250610140870135915061016087013567ffffffffffffffff808211156119f157600080fd5b818901915089601f830112611a0557600080fd5b813581811115611a1757611a1761196b565b604051601f8201601f19908116603f01168101908382118183101715611a3f57611a3f61196b565b816040528281528c6020848701011115611a5857600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b6001600160a01b0391909116815260200190565b803560ff81168114611aa257600080fd5b919050565b60008060008060808587031215611abd57600080fd5b8435611ac8816118b0565b9350611ad660208601611a91565b93969395505050506040820135916060013590565b6000806000806101408587031215611b0257600080fd5b843593506020850135611b14816118b0565b9250611b2386604087016118e2565b915061194e8660a08701611959565b634e487b7160e01b600052602160045260246000fd5b6020810160048310611b6a57634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215611b8357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015611bd35783516001600160a01b031683529284019291840191600101611bae565b50909695505050505050565b60008060408385031215611bf257600080fd5b8235611bfd816118b0565b946020939093013593505050565b600060208284031215611c1d57600080fd5b5035919050565b60008060408385031215611c3757600080fd5b8235611c42816118b0565b91506020830135611c52816118b0565b809150509250929050565b600060208284031215611c6f57600080fd5b81516104e8816118b0565b634e487b7160e01b600052601160045260246000fd5b60008219821115611ca357611ca3611c7a565b500190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601e908201527f435849503a20796f7520617265206e6f7420616e20746865206f776e65720000604082015260600190565b60208082526017908201527621ac24a81d1031b932b0ba37b9103737ba1037bbb732b960491b604082015260600190565b600060208284031215611d5957600080fd5b6104e882611a91565b80356001600160a81b031981168114611aa257600080fd5b600060208284031215611d8c57600080fd5b6104e882611d62565b80356001600160901b031981168114611aa257600080fd5b600060208284031215611dbf57600080fd5b6104e882611d95565b60006001600160601b0319808f60601b168352808e60601b166014840152808d60601b166028840152508a603c83015289605c83015288607c83015287609c83015260ff60f81b8760f81b1660bc8301528560bd830152611e3560dd8301866001600160a81b0319169052565b8360e8830152611e526101088301846001600160901b0319169052565b50610116019c9b505050505050505050505050565b602080825260179082015276435849503a20696e76616c6964207369676e617475726560481b604082015260600190565b60006101408201905083825282356020830152602083013560408301526040830135606083015260ff611ecd60608501611a91565b1660808301526080830135611ee1816118b0565b6001600160a01b03811660a08401525060a083013560c0830152611f0760c08401611d62565b6001600160a81b0319811660e08401525061010060e084013581840152611f2f818501611d95565b6001600160901b031981166101208501529050509392505050565b600060208284031215611f5c57600080fd5b5051919050565b80356001600160601b0381168114611aa257600080fd5b600060208284031215611f8c57600080fd5b6104e882611f63565b600060c08201905060018060a01b0380851683528335602084015260208401356040840152604084013560608401526060840135611fd2816118b0565b818116608085015250506001600160601b03611ff060808501611f63565b1660a08301529392505050565b6020808252601f908201527f435849503a2077616c6c657420616c7265616479207265676973746572656400604082015260600190565b60008282101561204657612046611c7a565b500390565b634e487b7160e01b600052603260045260246000fd5b600060001982141561207557612075611c7a565b5060010190565b93845260ff9290921660208401526040830152606082015260800190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c019056fe608060405234801561001057600080fd5b50610128806100206000396000f3fe608060408190527f58bfd99600000000000000000000000000000000000000000000000000000000815260009073deaddeaddeaddeaddeaddeaddeaddeaddeaddead906358bfd9969060849060209060048186803b158015605f57600080fd5b505afa1580156072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906094919060b9565b90503660008037600080366000845af43d6000803e80801560b4573d6000f35b3d6000fd5b60006020828403121560c9578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811460eb578182fd5b939250505056fea2646970667358221220e40db164da39a10669859af903c7c9d1a96e3a2e162855f6b00aa89d483e4c6164736f6c63430008040033a26469706673582212200fbf2dd416850a7c59e585049b25264cd9fb677238f9f9b70ab943298aedc23964736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101395760003560e01c806388e7e766116100ab578063dbdd85a31161006f578063dbdd85a31461038e578063e547cb85146103ae578063eb6538e91461038e578063efeb5f1f146103ce578063f09a4016146103ee578063fe75154b1461040e57610148565b806388e7e766146101dd5780638f32d59b146102f1578063c3386c8114610306578063c4c36e651461034c578063db7a46051461037957610148565b80632d66f063116100fd5780632d66f0631461022e578063379d4f26146102435780634da465ff1461026357806361d9db2d14610283578063757df8fd146102985780637f247e49146102d157610148565b80630cd55abf1461015d57806312eb7bd51461019057806327c0056a146101b057806327f63b05146101dd5780632b09f4561461020d57610148565b3661014857610146610426565b005b34801561015457600080fd5b50610146610426565b34801561016957600080fd5b5061017d6101783660046118c5565b6104c4565b6040519081526020015b60405180910390f35b34801561019c57600080fd5b5061017d6101ab3660046118fa565b6104ef565b3480156101bc57600080fd5b506101d06101cb366004611981565b6107ba565b6040516101879190611a7d565b3480156101e957600080fd5b506101fd6101f83660046118c5565b610a99565b6040519015158152602001610187565b34801561021957600080fd5b506101fd6102283660046118c5565b50600090565b34801561023a57600080fd5b50610146610aaa565b34801561024f57600080fd5b5061014661025e366004611aa7565b610da6565b34801561026f57600080fd5b506101d061027e366004611aeb565b6110d9565b34801561028f57600080fd5b5060025461017d565b3480156102a457600080fd5b506101d06102b33660046118c5565b6001600160a01b039081166000908152600360205260409020541690565b3480156102dd57600080fd5b506101fd6102ec3660046118c5565b611237565b3480156102fd57600080fd5b506101fd611242565b34801561031257600080fd5b5061033f6103213660046118c5565b6001600160a01b031660009081526006602052604090205460ff1690565b6040516101879190611b48565b34801561035857600080fd5b5061036c610367366004611b70565b611252565b6040516101879190611b92565b34801561038557600080fd5b5061036c611354565b34801561039a57600080fd5b506101fd6103a9366004611bdf565b6113b6565b3480156103ba57600080fd5b506101d06103c9366004611c0b565b6113c2565b3480156103da57600080fd5b506101466103e93660046118c5565b6113f2565b3480156103fa57600080fd5b50610146610409366004611c24565b611402565b34801561041a57600080fd5b5060005460ff166101fd565b600073dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611c5d565b90503660008037600080366000845af43d6000803e8080156104bf573d6000f35b3d6000fd5b6001600160a01b0381166000908152600460205260408120546104e8816001611c90565b9392505050565b60006007546002141561051d5760405162461bcd60e51b815260040161051490611ca8565b60405180910390fd5b600260075561052b336114a0565b6105475760405162461bcd60e51b815260040161051490611cdf565b61055f61055a60a08501608086016118c5565b6114a0565b61057b5760405162461bcd60e51b815260040161051490611d16565b60026001600160a01b03861660009081526006602052604090205460ff1660038111156105aa576105aa611b32565b146105f75760405162461bcd60e51b815260206004820152601b60248201527f435849503a20636f6c6c656374696f6e206e6f742045524337323100000000006044820152606401610514565b60003061060a60a08601608087016118c5565b87878735602089013560408a013561062860808c0160608d01611d47565b60a08c013561063d60e08e0160c08f01611d7a565b8d60e001358e6101000160208101906106569190611dad565b6040516020016106719c9b9a99989796959493929190611dc8565b604051602081830303815290604052905061071e6106a073dfbb74177c45c82ac06327c204bb5ef2daec57b890565b6001600160a01b031663d5d644ad6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190611c5d565b843560208601356107186060880160408901611d47565b856114ed565b61073a5760405162461bcd60e51b815260040161051490611e67565b6040516313e2eab360e21b81526001600160a01b03871690634f8baacc906107689088908890600401611e98565b6020604051808303816000875af1158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab9190611f4a565b60016007559695505050505050565b6000600754600214156107df5760405162461bcd60e51b815260040161051490611ca8565b60026007556001600160a01b03861633146108d4576108b8868635602088013561080f60608a0160408b01611d47565b308b8a600001358b602001358c604001358d606001602081019061083391906118c5565b8e60800160208101906108469190611f7a565b604051606097881b6001600160601b0319908116602083015296881b8716603482015260488101959095526068850193909352608884019190915290931b90911660a882015260a09190911b6001600160a01b03191660bc82015260c8016040516020818303038152906040526114ed565b6108d45760405162461bcd60e51b815260040161051490611e67565b6108dd866114a0565b6108f95760405162461bcd60e51b815260040161051490611d16565b6000878351602085016000f560405163b305cff960e01b81526004810186905290915073dfbb74177c45c82ac06327c204bb5ef2daec57b89063b305cff990602401602060405180830381865afa158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190611c5d565b6001600160a01b0316803b806020016040519081016040528181526000908060200190933c80519060200120816001600160a01b0316803b806020016040519081016040528181526000908060200190933c8051906020012014610a1e5760405162461bcd60e51b8152602060048201526019602482015278086b092a07440c4f2e8ca40c6dec8ca40dad2e6e6dac2e8c6d603b1b6044820152606401610514565b60405163128bfa2560e01b81526001600160a01b0382169063128bfa2590610a4c908a908990600401611f95565b600060405180830381600087803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b50505050610a8981600261172e565b6001600755979650505050505050565b6000610aa4826117ac565b92915050565b60075460021415610acd5760405162461bcd60e51b815260040161051490611ca8565b6002600755336000818152600360205260409020546001600160a01b031680610b385760405162461bcd60e51b815260206004820152601d60248201527f435849503a206e6f7420617574686f72697a6564206279206f776e65720000006044820152606401610514565b610b41816114a0565b610b8d5760405162461bcd60e51b815260206004820181905260248201527f435849503a20617574686f72697a6572206e6f206c6f6e676572206f776e65726044820152606401610514565b610c7f73dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c069190611c5d565b6001600160a01b0316634b19fac8846040518263ffffffff1660e01b8152600401610c319190611a7d565b602060405180830381865afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190611c5d565b6001600160a01b03161590565b610c9b5760405162461bcd60e51b815260040161051490611ffd565b610ca4826117e4565b73dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a9190611c5d565b6001600160a01b031663e327f60b836040518263ffffffff1660e01b8152600401610d459190611a7d565b600060405180830381600087803b158015610d5f57600080fd5b505af1158015610d73573d6000803e3d6000fd5b5050506001600160a01b03909216600090815260036020526040902080546001600160a01b031916905550506001600755565b60075460021415610dc95760405162461bcd60e51b815260040161051490611ca8565b6002600755610dd7336114a0565b610df35760405162461bcd60e51b815260040161051490611cdf565b610dfc84611840565b15610e495760405162461bcd60e51b815260206004820152601a60248201527f435849503a20636f6e7472616374206e6f7420616c6c6f7765640000000000006044820152606401610514565b610eed73dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190611c5d565b6001600160a01b0316634b19fac8866040518263ffffffff1660e01b8152600401610c319190611a7d565b610f095760405162461bcd60e51b815260040161051490611ffd565b8115801590610f1757508015155b8015610f25575060ff831615155b156110a5576000610f35856104c4565b6040516001600160601b031930606090811b8216602084015288901b1660348201526048810182905290915060009060680160405160208183030381529060405290506000610f8787868689866114ed565b905080610fa65760405162461bcd60e51b815260040161051490611e67565b6001600160a01b0387166000908152600460205260409020839055610fca876117e4565b73dfbb74177c45c82ac06327c204bb5ef2daec57b86001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110409190611c5d565b6001600160a01b031663e327f60b886040518263ffffffff1660e01b815260040161106b9190611a7d565b600060405180830381600087803b15801561108557600080fd5b505af1158015611099573d6000803e3d6000fd5b505050505050506110ce565b6001600160a01b038416600090815260036020526040902080546001600160a01b031916331790555b505060016007555050565b6000600754600214156110fe5760405162461bcd60e51b815260040161051490611ca8565b60026007556001600160a01b03841633146111785761115c848435602086013561112e6060880160408901611d47565b3089883560208a013560408b013561114c60808d0160608e016118c5565b61084660a08e0160808f01611f7a565b6111785760405162461bcd60e51b815260040161051490611e67565b611181846114a0565b61119d5760405162461bcd60e51b815260040161051490611d16565b600060405180610180016040528061014881526020016120cc610148913990506000868251602084016000f560405163128bfa2560e01b81529091506001600160a01b0382169063128bfa25906111fa9089908890600401611f95565b600060405180830381600087803b15801561121457600080fd5b505af1158015611228573d6000803e3d6000fd5b505050506107ab81600261172e565b6000610aa4826114a0565b600061124d33611237565b905090565b606060006112608385611c90565b60025490915081111561127257506002545b600061127e8583612034565b67ffffffffffffffff8111156112965761129661196b565b6040519080825280602002602001820160405280156112bf578160200160208202803683370190505b5090506000855b8381101561134957600281815481106112e1576112e161204b565b9060005260206000200160009054906101000a90046001600160a01b03168383815181106113115761131161204b565b6001600160a01b03909216602092830291909101909101528161133381612061565b925050808061134190612061565b9150506112c6565b509095945050505050565b606060018054806020026020016040519081016040528092919081815260200182805480156113ac57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161138e575b5050505050905090565b60006104e88383611877565b6000600282815481106113d7576113d761204b565b6000918252602090912001546001600160a01b031692915050565b6113ff8160008080610da6565b50565b600754600214156114255760405162461bcd60e51b815260040161051490611ca8565b6002600755600154156114765760405162461bcd60e51b815260206004820152601960248201527810d612540e88185b1c9958591e481a5b9a5d1a585b1a5e9959603a1b6044820152606401610514565b61147f826117e4565b6001600160a01b0381161561149757611497816117e4565b50506001600755565b6001600160a01b0381166000818152600560205260408120546001805492939290919081106114d1576114d161204b565b6000918252602090912001546001600160a01b03161492915050565b6000806000835160201415611615576020840151915060018286898960405160008152602001604052604051611526949392919061207c565b6020604051602081039080840390855afa158015611548573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b0316141561157957600192505050611725565b60018260405160200161158c919061209a565b60405160208183030381529060405280519060200120868989604051600081526020016040526040516115c2949392919061207c565b6020604051602081039080840390855afa1580156115e4573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b0316141561161557600192505050611725565b600084805190602001209050600181878a8a60405160008152602001604052604051611644949392919061207c565b6020604051602081039080840390855afa158015611666573d6000803e3d6000fd5b505050602060405103519150816001600160a01b0316896001600160a01b031614156116985760019350505050611725565b806040516020016116a9919061209a565b604051602081830303815290604052805190602001209050600181878a8a604051600081526020016040526040516116e4949392919061207c565b6020604051602081039080840390855afa158015611706573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038b81169116149450505050505b95945050505050565b6002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b03851690811790915560009081526006602052604090208054839260ff19909116908360038111156117a3576117a3611b32565b02179055505050565b6000806001600160a01b03831660009081526006602052604090205460ff1660038111156117dc576117dc611b32565b141592915050565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b039093166001600160a01b03199093168317905560009182526005602052604090912055565b6000813f80158015906104e857507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470141592915050565b6000806001600160a01b03841660009081526006602052604090205460ff1660038111156118a7576118a7611b32565b14159392505050565b6001600160a01b03811681146113ff57600080fd5b6000602082840312156118d757600080fd5b81356104e8816118b0565b6000606082840312156118f457600080fd5b50919050565b6000806000808486036101c081121561191257600080fd5b853561191d816118b0565b945060208601359350610120603f198201121561193957600080fd5b5060408501915061194e8661016087016118e2565b905092959194509250565b600060a082840312156118f457600080fd5b634e487b7160e01b600052604160045260246000fd5b600080600080600080610180878903121561199b57600080fd5b8635955060208701356119ad816118b0565b94506119bc88604089016118e2565b93506119cb8860a08901611959565b9250610140870135915061016087013567ffffffffffffffff808211156119f157600080fd5b818901915089601f830112611a0557600080fd5b813581811115611a1757611a1761196b565b604051601f8201601f19908116603f01168101908382118183101715611a3f57611a3f61196b565b816040528281528c6020848701011115611a5857600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b6001600160a01b0391909116815260200190565b803560ff81168114611aa257600080fd5b919050565b60008060008060808587031215611abd57600080fd5b8435611ac8816118b0565b9350611ad660208601611a91565b93969395505050506040820135916060013590565b6000806000806101408587031215611b0257600080fd5b843593506020850135611b14816118b0565b9250611b2386604087016118e2565b915061194e8660a08701611959565b634e487b7160e01b600052602160045260246000fd5b6020810160048310611b6a57634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215611b8357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015611bd35783516001600160a01b031683529284019291840191600101611bae565b50909695505050505050565b60008060408385031215611bf257600080fd5b8235611bfd816118b0565b946020939093013593505050565b600060208284031215611c1d57600080fd5b5035919050565b60008060408385031215611c3757600080fd5b8235611c42816118b0565b91506020830135611c52816118b0565b809150509250929050565b600060208284031215611c6f57600080fd5b81516104e8816118b0565b634e487b7160e01b600052601160045260246000fd5b60008219821115611ca357611ca3611c7a565b500190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601e908201527f435849503a20796f7520617265206e6f7420616e20746865206f776e65720000604082015260600190565b60208082526017908201527621ac24a81d1031b932b0ba37b9103737ba1037bbb732b960491b604082015260600190565b600060208284031215611d5957600080fd5b6104e882611a91565b80356001600160a81b031981168114611aa257600080fd5b600060208284031215611d8c57600080fd5b6104e882611d62565b80356001600160901b031981168114611aa257600080fd5b600060208284031215611dbf57600080fd5b6104e882611d95565b60006001600160601b0319808f60601b168352808e60601b166014840152808d60601b166028840152508a603c83015289605c83015288607c83015287609c83015260ff60f81b8760f81b1660bc8301528560bd830152611e3560dd8301866001600160a81b0319169052565b8360e8830152611e526101088301846001600160901b0319169052565b50610116019c9b505050505050505050505050565b602080825260179082015276435849503a20696e76616c6964207369676e617475726560481b604082015260600190565b60006101408201905083825282356020830152602083013560408301526040830135606083015260ff611ecd60608501611a91565b1660808301526080830135611ee1816118b0565b6001600160a01b03811660a08401525060a083013560c0830152611f0760c08401611d62565b6001600160a81b0319811660e08401525061010060e084013581840152611f2f818501611d95565b6001600160901b031981166101208501529050509392505050565b600060208284031215611f5c57600080fd5b5051919050565b80356001600160601b0381168114611aa257600080fd5b600060208284031215611f8c57600080fd5b6104e882611f63565b600060c08201905060018060a01b0380851683528335602084015260208401356040840152604084013560608401526060840135611fd2816118b0565b818116608085015250506001600160601b03611ff060808501611f63565b1660a08301529392505050565b6020808252601f908201527f435849503a2077616c6c657420616c7265616479207265676973746572656400604082015260600190565b60008282101561204657612046611c7a565b500390565b634e487b7160e01b600052603260045260246000fd5b600060001982141561207557612075611c7a565b5060010190565b93845260ff9290921660208401526040830152606082015260800190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c019056fe608060405234801561001057600080fd5b50610128806100206000396000f3fe608060408190527f58bfd99600000000000000000000000000000000000000000000000000000000815260009073deaddeaddeaddeaddeaddeaddeaddeaddeaddead906358bfd9969060849060209060048186803b158015605f57600080fd5b505afa1580156072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906094919060b9565b90503660008037600080366000845af43d6000803e80801560b4573d6000f35b3d6000fd5b60006020828403121560c9578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811460eb578182fd5b939250505056fea2646970667358221220e40db164da39a10669859af903c7c9d1a96e3a2e162855f6b00aa89d483e4c6164736f6c63430008040033a26469706673582212200fbf2dd416850a7c59e585049b25264cd9fb677238f9f9b70ab943298aedc23964736f6c634300080c0033",
  "devdoc": {
    "author": "CXIP-Labs",
    "details": "The smart contract interacts and relies on CXIP Provenance.",
    "kind": "dev",
    "methods": {
      "addSignedWallet(address,uint8,bytes32,bytes32)": {
        "details": "This function needs to be called by a wallet already associated with the identity.Signature from new wallet can be included or omitted. If not included, new wallet will need to make a connectWallet function call.",
        "params": {
          "newWallet": "Address of new wallet being added to the identity.",
          "r": "The R value of the new wallet signature. Optional.",
          "s": "The S value of the new wallet signature. Optional.",
          "v": "The V value of the new wallet signature (27-28). Optional."
        }
      },
      "addWallet(address)": {
        "details": "Use this function if you are not planning to include wallet signature.",
        "params": {
          "newWallet": "Address of new wallet being added to the identity."
        }
      },
      "connectWallet()": {
        "details": "Make this call with a new wallet after an addWallet function is called by an existing wallet."
      },
      "constructor": {
        "details": "To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \"init\" function instead."
      },
      "createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)": {
        "details": "Creates and associates the custom ERC721 collection with the identity.",
        "params": {
          "bytecode": "The bytecode used for deployment. Validated against slot code for abuse prevention.",
          "collectionCreator": "Specific wallet, associated with the identity, that will be marked as the creator of this collection.",
          "collectionData": "The collection data struct, with all the default collection info.",
          "saltHash": "A salt used for deploying a collection to a specific address.",
          "slot": "Hash of proxy contract slot where the source is saved in registry.",
          "verification": "Signature created by the collectionCreator wallet to validate the integrity of the collection data."
        },
        "returns": {
          "_0": "address Returns the address of the newly created collection."
        }
      },
      "createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))": {
        "details": "Creates and associates the ERC721 collection with the identity.",
        "params": {
          "collectionCreator": "Specific wallet, associated with the identity, that will be marked as the creator of this collection.",
          "collectionData": "The collection data struct, with all the default collection info.",
          "saltHash": "A salt used for deploying a collection to a specific address.",
          "verification": "Signature created by the collectionCreator wallet to validate the integrity of the collection data."
        },
        "returns": {
          "_0": "address Returns the address of the newly created collection."
        }
      },
      "createERC721Token(address,uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14),(bytes32,bytes32,uint8))": {
        "details": "This function is embedded inside of the identity contract to make validation and providence bulletproof.An NFT can be minted directly inside the collection, but the CXIP Asset smart contract will not mark it as a certified NFT.",
        "params": {
          "collection": "Address of the smart contract for the collection. Must have been created by this identity.",
          "id": "Token id for the NFT to mint. Can be left as 0 to allow automatic token id allocation.",
          "tokenData": "A struct containing all of the necessary NFT information.",
          "verification": "A verification signature issued by the CXIP Asset Signer as a guarantee of a valid NFT."
        },
        "returns": {
          "_0": "uint256 Returns the token id of the newly minted NFT."
        }
      },
      "getAuthorizer(address)": {
        "details": "Should be used for visual validation of wallet that is authorising a new wallet to be added.",
        "params": {
          "wallet": "The address of the new wallet being requested to add."
        },
        "returns": {
          "_0": "address Returns the address of the wallet that is requesting the new wallet."
        }
      },
      "getCollectionById(uint256)": {
        "details": "This retrieves a collection by index. Don't be confused by the ID in the title.",
        "params": {
          "index": "Index of the item to get from the array."
        },
        "returns": {
          "_0": "address Returns the collection contract address at that index of array."
        }
      },
      "getCollectionType(address)": {
        "details": "Collection must be associated with identity.",
        "params": {
          "collection": "Contract address of the collection."
        },
        "returns": {
          "_0": "InterfaceType Returns an enum (uint8) of the collection interface type."
        }
      },
      "getWallets()": {
        "details": "Any wallet returned in this response should be considered as owner.",
        "returns": {
          "_0": "address[] Returns an array of all the wallets that have been associated with the identity contract.."
        }
      },
      "init(address,address)": {
        "details": "It is important to run this inside the same function as the create2 for this contract.",
        "params": {
          "secondaryWallet": "Optional second wallet to add to new identity.",
          "wallet": "The address of the wallet to add to new identity."
        }
      },
      "isCollectionCertified(address)": {
        "details": "Reserved function for later use. Will be used to identify if collection was heavily vetted.",
        "params": {
          "collection": "Contract address of the collection."
        },
        "returns": {
          "_0": "bool Returns true if collection is associated with the identity."
        }
      },
      "isCollectionOpen(address)": {
        "details": "For now this always returns false. Left as a placeholder for future development where shared collections might be used.Since it's not being used, the collection variable is commented out to avoid compiler warnings.",
        "returns": {
          "_0": "bool Returns true of false, to indicate if a specific collection is open/shared."
        }
      },
      "isCollectionRegistered(address)": {
        "details": "For now will only return true for collections created directly from the identity contract.",
        "params": {
          "collection": "Contract address of the collection."
        },
        "returns": {
          "_0": "bool Returns true if collection is associated with the identity."
        }
      },
      "isNew()": {
        "details": "This function is called by provenance as an extra layer of validation.",
        "returns": {
          "_0": "bool Returns the current state of the _newTrigger variable."
        }
      },
      "isOwner()": {
        "details": "This checks if the msg.sender wallet is associated with the identity.",
        "returns": {
          "_0": "bool Returns true is the wallet is authorised by the identity."
        }
      },
      "isTokenCertified(address,uint256)": {
        "details": "Reserved function for later use. Will be used to identify if token was heavily vetted.",
        "params": {
          "collection": "Contract address of the collection.",
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "bool Returns true if token is associated with the identity."
        }
      },
      "isTokenRegistered(address,uint256)": {
        "details": "For now will only return true for tokens created directly from the identity contract.",
        "params": {
          "collection": "Contract address of the collection.",
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "bool Returns true if token is associated with the identity."
        }
      },
      "isWalletRegistered(address)": {
        "details": "Used for external validation. Wallets can only be associated to one identity, ever.",
        "params": {
          "wallet": "Address of wallet to check against the identity."
        },
        "returns": {
          "_0": "bool Returns true if wallet is registered to this identity."
        }
      },
      "listCollections(uint256,uint256)": {
        "details": "Use in conjunction with the totalCollections function, for pagination.",
        "params": {
          "length": "Length of slice to return, starting from offset index.",
          "offset": "Index from where to start pagination. Start at 0."
        },
        "returns": {
          "_0": "address[] Returns a fixed length array starting from offset."
        }
      },
      "nextNonce(address)": {
        "details": "This is not wallet transaction nonce. This is an internal nonce handled by the smart contract. Should be used for special instances where nonced signatures are required.",
        "params": {
          "wallet": "Address of wallet."
        },
        "returns": {
          "_0": "uint256 Returns the next nonce to use."
        }
      },
      "totalCollections()": {
        "details": "Use in conjunction with the listCollections, for pagination.",
        "returns": {
          "_0": "uint256 Returns the total length of collections."
        }
      }
    },
    "stateVariables": {
      "_additionalInfo": {
        "details": "Map with interface type definitions for identity created collections."
      },
      "_collectionArray": {
        "details": "Array of addresses for all collection that were created by the identity."
      },
      "_lastNonce": {
        "details": "A map of nonces already used by a wallet, to prevent signature hijacking."
      },
      "_newTrigger": {
        "details": "A variable that is used as an external indicator."
      },
      "_preAuthWallets": {
        "details": "Temporary map for storing wallets that need to be added, but have not been authorised yet."
      },
      "_reentrancyState": {
        "details": "Reentrancy implementation from OpenZepellin. State 1 == NOT_ENDERED, State 2 == ENTERED"
      },
      "_walletArray": {
        "details": "Array of all wallets associated with the identity."
      },
      "_walletIndexMap": {
        "details": "A map to make it possible for retrieving wallets by address rather than array index."
      }
    },
    "title": "CXIP Identity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSignedWallet(address,uint8,bytes32,bytes32)": {
        "notice": "Add a new wallet to the identity."
      },
      "addWallet(address)": {
        "notice": "Short-hand for addSignedWallet, but without the signature."
      },
      "connectWallet()": {
        "notice": "Connects a pre-authorised wallet."
      },
      "constructor": {
        "notice": "Constructor is empty and only reentrancy guard is implemented."
      },
      "createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)": {
        "notice": "Create a custom ERC721 collection."
      },
      "createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))": {
        "notice": "Create an ERC721 collection."
      },
      "createERC721Token(address,uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14),(bytes32,bytes32,uint8))": {
        "notice": "Create an ERC721 NFT for a collection created by this identity."
      },
      "getAuthorizer(address)": {
        "notice": "Returns the wallet that is authorising the new wallet to be added."
      },
      "getCollectionType(address)": {
        "notice": "Get the collection's Interface Type: ERC20, ERC721, ERC1155."
      },
      "getWallets()": {
        "notice": "Get wallets associated with identity."
      },
      "init(address,address)": {
        "notice": "Initialise the identity. This function works only once."
      },
      "isCollectionOpen(address)": {
        "notice": "Check if an identity collection is open to external minting."
      },
      "isCollectionRegistered(address)": {
        "notice": "Check if a collection is registered with identity."
      },
      "isNew()": {
        "notice": "Used for cross-contract confirmation/validation. You should not use this."
      },
      "isOwner()": {
        "notice": "Check if current caller is owner of the smart contract."
      },
      "isTokenRegistered(address,uint256)": {
        "notice": "Check if a token is registered with identity."
      },
      "isWalletRegistered(address)": {
        "notice": "Check if wallet is associated with the identity."
      },
      "listCollections(uint256,uint256)": {
        "notice": "List all collections associated with this identity."
      },
      "nextNonce(address)": {
        "notice": "Get next nonce to be used for a particular wallet."
      },
      "totalCollections()": {
        "notice": "Get total number of collections associated with this identity."
      }
    },
    "notice": "A smart contract for managing an on-chain identity.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1718,
        "contract": "contracts/CxipIdentity.sol:CxipIdentity",
        "label": "_newTrigger",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1722,
        "contract": "contracts/CxipIdentity.sol:CxipIdentity",
        "label": "_walletArray",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1726,
        "contract": "contracts/CxipIdentity.sol:CxipIdentity",
        "label": "_collectionArray",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1731,
        "contract": "contracts/CxipIdentity.sol:CxipIdentity",
        "label": "_preAuthWallets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1736,
        "contract": "contracts/CxipIdentity.sol:CxipIdentity",
        "label": "_lastNonce",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1741,
        "contract": "contracts/CxipIdentity.sol:CxipIdentity",
        "label": "_walletIndexMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1747,
        "contract": "contracts/CxipIdentity.sol:CxipIdentity",
        "label": "_additionalInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_enum(InterfaceType)6622)"
      },
      {
        "astId": 1750,
        "contract": "contracts/CxipIdentity.sol:CxipIdentity",
        "label": "_reentrancyState",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(InterfaceType)6622": {
        "encoding": "inplace",
        "label": "enum InterfaceType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_enum(InterfaceType)6622)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum InterfaceType)",
        "numberOfBytes": "32",
        "value": "t_enum(InterfaceType)6622"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}