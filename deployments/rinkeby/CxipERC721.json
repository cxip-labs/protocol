{
  "address": "0x47f0274Db22dA684169c56b022121eD223A2E0eD",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "arweaveURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "payloadHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Verification",
              "name": "payloadSignature",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "arweave",
              "type": "bytes32"
            },
            {
              "internalType": "bytes11",
              "name": "arweave2",
              "type": "bytes11"
            },
            {
              "internalType": "bytes32",
              "name": "ipfs",
              "type": "bytes32"
            },
            {
              "internalType": "bytes14",
              "name": "ipfs2",
              "type": "bytes14"
            }
          ],
          "internalType": "struct TokenData",
          "name": "tokenData",
          "type": "tuple"
        }
      ],
      "name": "cxipMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "httpURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name2",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "symbol",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "royalties",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "bps",
              "type": "uint96"
            }
          ],
          "internalType": "struct CollectionData",
          "name": "collectionData",
          "type": "tuple"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ipfsURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadSignature",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "newName2",
          "type": "bytes32"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newSymbol",
          "type": "bytes32"
        }
      ],
      "name": "setSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "verifySHA256",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbfbcd57a787a9144ec7d9b423f00d226e8b635079c71c2af898da9fb0506c747",
  "receipt": {
    "to": null,
    "from": "0x9E22aA58Bf2F5E60801b90FDD3b51B65d38eA20b",
    "contractAddress": "0x47f0274Db22dA684169c56b022121eD223A2E0eD",
    "transactionIndex": 20,
    "gasUsed": "2119970",
    "logsBloom": "0x
    "blockHash": "0xf9138016a48ddc26cdd0a3ab9d9d07cee66897de93039b95983e8bae886d64c9",
    "transactionHash": "0xbfbcd57a787a9144ec7d9b423f00d226e8b635079c71c2af898da9fb0506c747",
    "logs": [],
    "blockNumber": 10693203,
    "cumulativeGasUsed": "5777596",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "0267564dd60db6bb458cb76069045972",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"arweaveURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"payloadSignature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"arweave\",\"type\":\"bytes32\"},{\"internalType\":\"bytes11\",\"name\":\"arweave2\",\"type\":\"bytes11\"},{\"internalType\":\"bytes32\",\"name\":\"ipfs\",\"type\":\"bytes32\"},{\"internalType\":\"bytes14\",\"name\":\"ipfs2\",\"type\":\"bytes14\"}],\"internalType\":\"struct TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"name\":\"cxipMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"httpURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"royalties\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"internalType\":\"struct CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ipfsURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadSignature\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newName2\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newSymbol\",\"type\":\"bytes32\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"verifySHA256\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"CXIP-Labs\",\"details\":\"The entire logic and functionality of the smart contract is self-contained.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emits event that informs of address approving a third-party operator for a particular token.\",\"params\":{\"operator\":\"Address of the third-party operator approved for interaction.\",\"tokenId\":\"A specific token id that is being authorised to operator.\",\"wallet\":\"Address of the wallet configuring a token operator.\"}},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emits event that informs of address approving/denying a third-party operator.\",\"params\":{\"approved\":\"A boolean indicating whether approval was granted or revoked.\",\"operator\":\"Address of the third-party operator that interacts on behalf of the wallet.\",\"wallet\":\"Address of the wallet configuring it's operator.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.\",\"params\":{\"from\":\"Address from where token is being transfered.\",\"to\":\"Address to where token is being transfered.\",\"tokenId\":\"Token id that is being minted, Transfered, or burned.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Requires the sender to be in the approved addresses.\",\"params\":{\"to\":\"The address to approve.\",\"tokenId\":\"The affected token.\"}},\"arweaveURI(uint256)\":{\"details\":\"Concatenates 2 sections of the arweave URI.\",\"params\":{\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"string The URI.\"}},\"balanceOf(address)\":{\"details\":\"Used to see total amount of tokens owned by a specific wallet.\",\"params\":{\"wallet\":\"Address for which to get token balance.\"},\"returns\":{\"_0\":\"uint256 Returns an integer, representing total amount of tokens held by address.\"}},\"baseURI()\":{\"details\":\"Concatenates with the CXIP domain name.\",\"returns\":{\"_0\":\"string the token URI.\"}},\"burn(uint256)\":{\"details\":\"The sender must be the owner or approved.\",\"params\":{\"tokenId\":\"The token to burn.\"}},\"constructor\":{\"details\":\"To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \\\"init\\\" function instead.\"},\"contractURI()\":{\"details\":\"Concatenates to https://nft.cxip.dev/.\",\"returns\":{\"_0\":\"string The URI.\"}},\"creator(uint256)\":{\"details\":\"If the token Id doesn't exist it will return zero address.\",\"params\":{\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"address Creator's address.\"}},\"cxipMint(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))\":{\"details\":\"Includes event with the Arwave token URI.\",\"params\":{\"id\":\"The new tokenId.\",\"tokenData\":\"The token data for the NFT.\"},\"returns\":{\"_0\":\"uint256 The new tokenId.\"}},\"getApproved(uint256)\":{\"details\":\"Single operator set for a specific token. Usually used for one-time very specific authorisations.\",\"params\":{\"tokenId\":\"Token id to get approved operator for.\"},\"returns\":{\"_0\":\"address Approved address for token.\"}},\"httpURI(uint256)\":{\"details\":\"Concatenates to the baseURI.\",\"returns\":{\"_0\":\"string The URI.\"}},\"init(address,(bytes32,bytes32,bytes32,address,uint96))\":{\"details\":\"Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.\",\"params\":{\"collectionData\":\"The collection data.\",\"newOwner\":\"The owner of the collection.\"}},\"ipfsURI(uint256)\":{\"details\":\"Concatenates to the IPFS domain.\",\"params\":{\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"string The URI.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Includes references to OpenSea and Rarible marketplace proxies.\",\"params\":{\"operator\":\"Address of the marketplace operator.\",\"wallet\":\"Address of the wallet.\"},\"returns\":{\"_0\":\"bool True if approved.\"}},\"isOwner()\":{\"details\":\"The owner could also be the admin or identity contract of the owner.\",\"returns\":{\"_0\":\"bool True if owner.\"}},\"isOwner(address)\":{\"details\":\"The owner could also be the admin or identity contract of the owner.\",\"returns\":{\"_0\":\"bool True if owner.\"}},\"name()\":{\"details\":\"Uses two names to extend the max length of the collection name in bytes\",\"returns\":{\"_0\":\"string The collection name.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"We have this blank function in place to make sure that external contract sending in NFTs don't error out.Since it's not being used, the _operator variable is commented out to avoid compiler warnings.Since it's not being used, the _from variable is commented out to avoid compiler warnings.Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.Since it's not being used, the _data variable is commented out to avoid compiler warnings.\",\"returns\":{\"_0\":\"bytes4 Returns the interfaceId of onERC721Received.\"}},\"owner()\":{\"details\":\"_owner is first set in init.\",\"returns\":{\"_0\":\"address Of ower.\"}},\"ownerOf(uint256)\":{\"details\":\"The token must exist.\",\"params\":{\"tokenId\":\"The token to look up.\"},\"returns\":{\"_0\":\"address Owner of the token.\"}},\"payloadHash(uint256)\":{\"details\":\"Payload is used for verification.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"bytes32 The hash.\"}},\"payloadSignature(uint256)\":{\"details\":\"Used for signature verification.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"Verification a struct containing v, r, s values of the signature.\"}},\"payloadSigner(uint256)\":{\"details\":\"The creator signs a payload while creating the NFT.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"address The creator.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must exist and be owned by `from`.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must exist and be owned by `from`.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.\",\"params\":{\"approved\":\"Turn on or off approval status.\",\"to\":\"The address to approve.\"}},\"setName(bytes32,bytes32)\":{\"details\":\"The name is split in two for gas optimization.\",\"params\":{\"newName\":\"First part of name.\",\"newName2\":\"Second part of name.\"}},\"setSymbol(bytes32)\":{\"details\":\"This is the ticker symbol for smart contract that shows up on EtherScan.\",\"params\":{\"newSymbol\":\"The ticker symbol to set for smart contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Must add new 4 byte interface Ids here to acknowledge support\",\"params\":{\"interfaceId\":\"ERC165 style 4 byte interfaceId.\"},\"returns\":{\"_0\":\"bool True if supported.\"}},\"symbol()\":{\"details\":\"Trims the symbol.\",\"returns\":{\"_0\":\"string The symbol.\"}},\"tokenByIndex(uint256)\":{\"details\":\"Helpful for token enumeration where token id info is not yet available.\",\"params\":{\"index\":\"Index of token in array.\"},\"returns\":{\"_0\":\"uint256 Returns the token id of token located at that index.\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.\",\"params\":{\"index\":\"Index of token in array.\",\"wallet\":\"Specific address for which to get token for.\"},\"returns\":{\"_0\":\"uint256 Returns the token id of token located at that index in specified wallet.\"}},\"tokenURI(uint256)\":{\"details\":\"Defaults the the Arweave URI\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"string The URI.\"}},\"tokensOfOwner(address)\":{\"params\":{\"wallet\":\"The wallet address to get tokens for.\"},\"returns\":{\"_0\":\"uint256[] Returns an array of token ids owned by wallet.\"}},\"totalSupply()\":{\"details\":\"Ignores burned tokens.\",\"returns\":{\"_0\":\"uint256 Returns the total number of active (not burned) tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must be owned by `from`.\"}},\"transferFrom(address,address,uint256,bytes)\":{\"details\":\"WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.Since it's not being used, the _data variable is commented out to avoid compiler warnings.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must be owned by `from`.\"}},\"verifySHA256(bytes32,bytes)\":{\"details\":\"Uses sha256 instead of keccak.\",\"params\":{\"hash\":\"The hash to check.\",\"payload\":\"The payload prehashed.\"},\"returns\":{\"_0\":\"bool True if the hashes match.\"}}},\"stateVariables\":{\"_admin\":{\"details\":\"Address of admin user. Primarily used as an additional recover address.\"},\"_allTokens\":{\"details\":\"Array of all token ids in collection.\"},\"_collectionData\":{\"details\":\"Stores default collection data: name, symbol, and royalties.\"},\"_currentTokenId\":{\"details\":\"Internal last minted token id, to allow for auto-increment.\"},\"_operatorApprovals\":{\"details\":\"Usually utilised for supporting marketplace proxy wallets.\"},\"_ownedTokens\":{\"details\":\"Map of array of token ids owned by a specific address.\"},\"_ownedTokensCount\":{\"details\":\"Map of total tokens owner by a specific address.\"},\"_ownedTokensIndex\":{\"details\":\"Map of token id to array index of _ownedTokens.\"},\"_owner\":{\"details\":\"Address of contract owner. This address can run all onlyOwner functions.\"},\"_tokenApprovals\":{\"details\":\"1-to-1 map of token id that was assigned an approved operator address.\"},\"_tokenData\":{\"details\":\"Token data mapped by token id.\"},\"_tokenOwner\":{\"details\":\"Token id to wallet (owner) address map.\"},\"_totalTokens\":{\"details\":\"Simple tracker of all minted (not-burned) tokens.\"}},\"title\":\"CXIP ERC721\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Event emitted when an address delegates power, for a token, to another address.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Event emitted when an address authorises an operator (third-party).\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Event emitted when an token is minted, transfered, or burned.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Adds a new address to the token's approval list.\"},\"arweaveURI(uint256)\":{\"notice\":\"Gets the URI of the NFT on Arweave.\"},\"balanceOf(address)\":{\"notice\":\"Get total number of tokens owned by wallet.\"},\"baseURI()\":{\"notice\":\"Get a base URI for the token.\"},\"burn(uint256)\":{\"notice\":\"Burns the token.\"},\"constructor\":{\"notice\":\"Constructor is empty and not utilised.\"},\"contractURI()\":{\"notice\":\"Gets the URI of the NFT backup from CXIP.\"},\"creator(uint256)\":{\"notice\":\"Gets the creator's address.\"},\"cxipMint(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))\":{\"notice\":\"Mints and NFT.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for the token.\"},\"httpURI(uint256)\":{\"notice\":\"Gets the HTTP URI of the token.\"},\"init(address,(bytes32,bytes32,bytes32,address,uint96))\":{\"notice\":\"Initializes the collection.\"},\"ipfsURI(uint256)\":{\"notice\":\"Gets the IPFS URI\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Checks if the address is approved.\"},\"isOwner()\":{\"notice\":\"Check if the sender is the owner.\"},\"isOwner(address)\":{\"notice\":\"Check if the address is the owner.\"},\"name()\":{\"notice\":\"Gets the name of the collection.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Empty function that is triggered by external contract on NFT transfer.\"},\"owner()\":{\"notice\":\"Gets the owner's address.\"},\"ownerOf(uint256)\":{\"notice\":\"Checks who the owner of a token is.\"},\"payloadHash(uint256)\":{\"notice\":\"Gets the hash of the NFT data used to create it.\"},\"payloadSignature(uint256)\":{\"notice\":\"Gets the signature of the signed NFT data used to create it.\"},\"payloadSigner(uint256)\":{\"notice\":\"Gets the address of the creator.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Adds a new approved operator.\"},\"setName(bytes32,bytes32)\":{\"notice\":\"Sets a name for the collection.\"},\"setSymbol(bytes32)\":{\"notice\":\"Set a symbol for the collection.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Shows the interfaces the contracts support\"},\"symbol()\":{\"notice\":\"Gets the collection's symbol.\"},\"tokenByIndex(uint256)\":{\"notice\":\"Get token by index instead of token id.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Get token from wallet by index instead of token id.\"},\"tokenURI(uint256)\":{\"notice\":\"Get's the URI of the token.\"},\"tokensOfOwner(address)\":{\"notice\":\"Get list of tokens owned by wallet.\"},\"totalSupply()\":{\"notice\":\"Total amount of tokens in the collection.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `tokenId` token from `from` to `to`.\"},\"transferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers `tokenId` token from `from` to `to`.\"},\"verifySHA256(bytes32,bytes)\":{\"notice\":\"Checks if a given hash matches a payload hash.\"}},\"notice\":\"A smart contract for minting and managing ERC721 NFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CxipERC721.sol\":\"CxipERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/CxipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./external/OpenSea.sol\\\";\\nimport \\\"./interface/IERC165.sol\\\";\\nimport \\\"./interface/ICxipERC721.sol\\\";\\nimport \\\"./interface/ICxipProvenance.sol\\\";\\nimport \\\"./interface/ICxipRegistry.sol\\\";\\nimport \\\"./interface/IPA1D.sol\\\";\\nimport \\\"./library/Address.sol\\\";\\nimport \\\"./library/Bytes.sol\\\";\\nimport \\\"./library/Strings.sol\\\";\\nimport \\\"./struct/CollectionData.sol\\\";\\nimport \\\"./struct/TokenData.sol\\\";\\nimport \\\"./struct/Verification.sol\\\";\\n\\n/**\\n * @title CXIP ERC721\\n * @author CXIP-Labs\\n * @notice A smart contract for minting and managing ERC721 NFTs.\\n * @dev The entire logic and functionality of the smart contract is self-contained.\\n */\\ncontract CxipERC721 {\\n    /**\\n     * @dev Stores default collection data: name, symbol, and royalties.\\n     */\\n    CollectionData private _collectionData;\\n\\n    /**\\n     * @dev Internal last minted token id, to allow for auto-increment.\\n     */\\n    uint256 private _currentTokenId;\\n\\n    /**\\n     * @dev Array of all token ids in collection.\\n     */\\n    uint256[] private _allTokens;\\n\\n    /**\\n     * @dev Map of token id to array index of _ownedTokens.\\n     */\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    /**\\n     * @dev Token id to wallet (owner) address map.\\n     */\\n    mapping(uint256 => address) private _tokenOwner;\\n\\n    /**\\n     * @dev 1-to-1 map of token id that was assigned an approved operator address.\\n     */\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    /**\\n     * @dev Map of total tokens owner by a specific address.\\n     */\\n    mapping(address => uint256) private _ownedTokensCount;\\n\\n    /**\\n     * @dev Map of array of token ids owned by a specific address.\\n     */\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    /**\\n     * @notice Map of full operator approval for a particular address.\\n     * @dev Usually utilised for supporting marketplace proxy wallets.\\n     */\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Token data mapped by token id.\\n     */\\n    mapping(uint256 => TokenData) private _tokenData;\\n\\n    /**\\n     * @dev Address of admin user. Primarily used as an additional recover address.\\n     */\\n    address private _admin;\\n\\n    /**\\n     * @dev Address of contract owner. This address can run all onlyOwner functions.\\n     */\\n    address private _owner;\\n\\n    /**\\n     * @dev Simple tracker of all minted (not-burned) tokens.\\n     */\\n    uint256 private _totalTokens;\\n\\n    /**\\n     * @notice Event emitted when an token is minted, transfered, or burned.\\n     * @dev If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.\\n     * @param from Address from where token is being transfered.\\n     * @param to Address to where token is being transfered.\\n     * @param tokenId Token id that is being minted, Transfered, or burned.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Event emitted when an address delegates power, for a token, to another address.\\n     * @dev Emits event that informs of address approving a third-party operator for a particular token.\\n     * @param wallet Address of the wallet configuring a token operator.\\n     * @param operator Address of the third-party operator approved for interaction.\\n     * @param tokenId A specific token id that is being authorised to operator.\\n     */\\n    event Approval(address indexed wallet, address indexed operator, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Event emitted when an address authorises an operator (third-party).\\n     * @dev Emits event that informs of address approving/denying a third-party operator.\\n     * @param wallet Address of the wallet configuring it's operator.\\n     * @param operator Address of the third-party operator that interacts on behalf of the wallet.\\n     * @param approved A boolean indicating whether approval was granted or revoked.\\n     */\\n    event ApprovalForAll(address indexed wallet, address indexed operator, bool approved);\\n\\n    /**\\n     * @notice Constructor is empty and not utilised.\\n     * @dev To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \\\"init\\\" function instead.\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"CXIP: caller not an owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Receive is purposefully left blank to not have any out-of-gas errors.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Enables royaltiy functionality at the ERC721 level no other function matches the call.\\n     * @dev See implementation of _royaltiesFallback.\\n     */\\n    fallback() external {\\n        _royaltiesFallback();\\n    }\\n\\n    /**\\n     * @notice Gets the URI of the NFT on Arweave.\\n     * @dev Concatenates 2 sections of the arweave URI.\\n     * @param tokenId Id of the token.\\n     * @return string The URI.\\n     */\\n    function arweaveURI(uint256 tokenId) external view returns (string memory) {\\n        return\\n            string(abi.encodePacked(\\\"https://arweave.cxip.dev/\\\", _tokenData[tokenId].arweave, _tokenData[tokenId].arweave2));\\n    }\\n\\n    /**\\n     * @notice Gets the URI of the NFT backup from CXIP.\\n     * @dev Concatenates to https://nft.cxip.dev/.\\n     * @return string The URI.\\n     */\\n    function contractURI() external view returns (string memory) {\\n        return string(abi.encodePacked(\\\"https://nft.cxip.dev/\\\", Strings.toHexString(address(this)), \\\"/\\\"));\\n    }\\n\\n    /**\\n     * @notice Gets the creator's address.\\n     * @dev If the token Id doesn't exist it will return zero address.\\n     * @param tokenId Id of the token.\\n     * @return address Creator's address.\\n     */\\n    function creator(uint256 tokenId) external view returns (address) {\\n        return _tokenData[tokenId].creator;\\n    }\\n\\n    /**\\n     * @notice Gets the HTTP URI of the token.\\n     * @dev Concatenates to the baseURI.\\n     * @return string The URI.\\n     */\\n    function httpURI(uint256 tokenId) external view returns (string memory) {\\n        return string(abi.encodePacked(baseURI(), \\\"/\\\", Strings.toHexString(tokenId)));\\n    }\\n\\n    /**\\n     * @notice Gets the IPFS URI\\n     * @dev Concatenates to the IPFS domain.\\n     * @param tokenId Id of the token.\\n     * @return string The URI.\\n     */\\n    function ipfsURI(uint256 tokenId) external view returns (string memory) {\\n        return string(abi.encodePacked(\\\"https://ipfs.cxip.dev/\\\", _tokenData[tokenId].ipfs, _tokenData[tokenId].ipfs2));\\n    }\\n\\n    /**\\n     * @notice Gets the name of the collection.\\n     * @dev Uses two names to extend the max length of the collection name in bytes\\n     * @return string The collection name.\\n     */\\n    function name() external view returns (string memory) {\\n        return string(abi.encodePacked(Bytes.trim(_collectionData.name), Bytes.trim(_collectionData.name2)));\\n    }\\n\\n    /**\\n     * @notice Gets the hash of the NFT data used to create it.\\n     * @dev Payload is used for verification.\\n     * @param tokenId The Id of the token.\\n     * @return bytes32 The hash.\\n     */\\n    function payloadHash(uint256 tokenId) external view returns (bytes32) {\\n        return _tokenData[tokenId].payloadHash;\\n    }\\n\\n    /**\\n     * @notice Gets the signature of the signed NFT data used to create it.\\n     * @dev Used for signature verification.\\n     * @param tokenId The Id of the token.\\n     * @return Verification a struct containing v, r, s values of the signature.\\n     */\\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory) {\\n        return _tokenData[tokenId].payloadSignature;\\n    }\\n\\n    /**\\n     * @notice Gets the address of the creator.\\n     * @dev The creator signs a payload while creating the NFT.\\n     * @param tokenId The Id of the token.\\n     * @return address The creator.\\n     */\\n    function payloadSigner(uint256 tokenId) external view returns (address) {\\n        return _tokenData[tokenId].creator;\\n    }\\n\\n    /**\\n     * @notice Shows the interfaces the contracts support\\n     * @dev Must add new 4 byte interface Ids here to acknowledge support\\n     * @param interfaceId ERC165 style 4 byte interfaceId.\\n     * @return bool True if supported.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        if (\\n            interfaceId == 0x01ffc9a7 || // ERC165\\n            interfaceId == 0x80ac58cd || // ERC721\\n            // || interfaceId == 0x780e9d63 // ERC721Enumerable\\n            interfaceId == 0x5b5e139f || // ERC721Metadata\\n            interfaceId == 0x150b7a02 || // ERC721TokenReceiver\\n            interfaceId == 0xe8a3d485 || // contractURI()\\n            IPA1D(getRegistry().getPA1D()).supportsInterface(interfaceId)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the collection's symbol.\\n     * @dev Trims the symbol.\\n     * @return string The symbol.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return string(Bytes.trim(_collectionData.symbol));\\n    }\\n\\n    /**\\n     * @notice Get's the URI of the token.\\n     * @dev Defaults the the Arweave URI\\n     * @param tokenId The Id of the token.\\n     * @return string The URI.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        return\\n            string(abi.encodePacked(\\\"https://arweave.cxip.dev/\\\", _tokenData[tokenId].arweave, _tokenData[tokenId].arweave2));\\n    }\\n\\n    /**\\n     * @notice Get list of tokens owned by wallet.\\n     * @param wallet The wallet address to get tokens for.\\n     * @return uint256[] Returns an array of token ids owned by wallet.\\n     */\\n    function tokensOfOwner(address wallet) external view returns (uint256[] memory) {\\n        return _ownedTokens[wallet];\\n    }\\n\\n    /**\\n     * @notice Checks if a given hash matches a payload hash.\\n     * @dev Uses sha256 instead of keccak.\\n     * @param hash The hash to check.\\n     * @param payload The payload prehashed.\\n     * @return bool True if the hashes match.\\n     */\\n    function verifySHA256(bytes32 hash, bytes calldata payload) external pure returns (bool) {\\n        bytes32 thePayloadHash = sha256(payload);\\n        return hash == thePayloadHash;\\n    }\\n\\n    /**\\n     * @notice Adds a new address to the token's approval list.\\n     * @dev Requires the sender to be in the approved addresses.\\n     * @param to The address to approve.\\n     * @param tokenId The affected token.\\n     */\\n    function approve(address to, uint256 tokenId) public {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        if (to != tokenOwner && _isApproved(msg.sender, tokenId)) {\\n            _tokenApprovals[tokenId] = to;\\n            emit Approval(tokenOwner, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Burns the token.\\n     * @dev The sender must be the owner or approved.\\n     * @param tokenId The token to burn.\\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApproved(msg.sender, tokenId), \\\"CXIP: not approved sender\\\");\\n        address wallet = _tokenOwner[tokenId];\\n        _clearApproval(tokenId);\\n        _tokenOwner[tokenId] = address(0);\\n        emit Transfer(wallet, address(0), tokenId);\\n        _removeTokenFromOwnerEnumeration(wallet, tokenId);\\n    }\\n\\n    /**\\n     * @notice Initializes the collection.\\n     * @dev Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.\\n     * @param newOwner The owner of the collection.\\n     * @param collectionData The collection data.\\n     */\\n    function init(address newOwner, CollectionData calldata collectionData) public {\\n        require(Address.isZero(_admin), \\\"CXIP: already initialized\\\");\\n        _admin = msg.sender;\\n        // temporary set to self, to pass rarible royalties logic trap\\n        _owner = address(this);\\n        _collectionData = collectionData;\\n        IPA1D(address(this)).init(0, payable(collectionData.royalties), collectionData.bps);\\n        // set to actual owner\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     * @param from cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must exist and be owned by `from`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     * @param from cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must exist and be owned by `from`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public payable {\\n        require(_isApproved(msg.sender, tokenId), \\\"CXIP: not approved sender\\\");\\n        _transferFrom(from, to, tokenId);\\n        if (Address.isContract(to)) {\\n            require(\\n                IERC165(to).supportsInterface(0x01ffc9a7) &&\\n                    IERC165(to).supportsInterface(0x150b7a02) &&\\n                    ICxipERC721(to).onERC721Received(address(this), from, tokenId, data) == 0x150b7a02,\\n                \\\"CXIP: onERC721Received fail\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a new approved operator.\\n     * @dev Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.\\n     * @param to The address to approve.\\n     * @param approved Turn on or off approval status.\\n     */\\n    function setApprovalForAll(address to, bool approved) public {\\n        require(to != msg.sender, \\\"CXIP: can't approve self\\\");\\n        _operatorApprovals[msg.sender][to] = approved;\\n        emit ApprovalForAll(msg.sender, to, approved);\\n    }\\n\\n    /**\\n     * @notice Transfers `tokenId` token from `from` to `to`.\\n     * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * @param from  cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must be owned by `from`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        transferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Transfers `tokenId` token from `from` to `to`.\\n     * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.\\n     * @param from  cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must be owned by `from`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory /*_data*/\\n    ) public payable {\\n        require(_isApproved(msg.sender, tokenId), \\\"CXIP: not approved sender\\\");\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Mints and NFT.\\n     * @dev Includes event with the Arwave token URI.\\n     * @param id The new tokenId.\\n     * @param tokenData The token data for the NFT.\\n     * @return uint256 The new tokenId.\\n     */\\n    function cxipMint(uint256 id, TokenData calldata tokenData) public onlyOwner returns (uint256) {\\n        if (id == 0) {\\n            while (_exists(_currentTokenId)) {\\n                _currentTokenId += 1;\\n            }\\n            id = _currentTokenId;\\n        }\\n        _mint(tokenData.creator, id);\\n        _tokenData[id] = tokenData;\\n        return id;\\n    }\\n\\n    /**\\n     * @notice Sets a name for the collection.\\n     * @dev The name is split in two for gas optimization.\\n     * @param newName First part of name.\\n     * @param newName2 Second part of name.\\n     */\\n    function setName(bytes32 newName, bytes32 newName2) public onlyOwner {\\n        _collectionData.name = newName;\\n        _collectionData.name2 = newName2;\\n    }\\n\\n    /**\\n     * @notice Set a symbol for the collection.\\n     * @dev This is the ticker symbol for smart contract that shows up on EtherScan.\\n     * @param newSymbol The ticker symbol to set for smart contract.\\n     */\\n    function setSymbol(bytes32 newSymbol) public onlyOwner {\\n        _collectionData.symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @notice Get total number of tokens owned by wallet.\\n     * @dev Used to see total amount of tokens owned by a specific wallet.\\n     * @param wallet Address for which to get token balance.\\n     * @return uint256 Returns an integer, representing total amount of tokens held by address.\\n     */\\n    function balanceOf(address wallet) public view returns (uint256) {\\n        return _ownedTokensCount[wallet];\\n    }\\n\\n    /**\\n     * @notice Get a base URI for the token.\\n     * @dev Concatenates with the CXIP domain name.\\n     * @return string the token URI.\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return string(abi.encodePacked(\\\"https://cxip.dev/nft/\\\", Strings.toHexString(address(this))));\\n    }\\n\\n    /**\\n     * @notice Gets the approved address for the token.\\n     * @dev Single operator set for a specific token. Usually used for one-time very specific authorisations.\\n     * @param tokenId Token id to get approved operator for.\\n     * @return address Approved address for token.\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @notice Checks if the address is approved.\\n     * @dev Includes references to OpenSea and Rarible marketplace proxies.\\n     * @param wallet Address of the wallet.\\n     * @param operator Address of the marketplace operator.\\n     * @return bool True if approved.\\n     */\\n    function isApprovedForAll(address wallet, address operator) public view returns (bool) {\\n        return _operatorApprovals[wallet][operator];\\n    }\\n\\n    /**\\n     * @notice Check if the sender is the owner.\\n     * @dev The owner could also be the admin or identity contract of the owner.\\n     * @return bool True if owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return (msg.sender == _owner || msg.sender == _admin);\\n    }\\n\\n    /**\\n     * @notice Check if the address is the owner.\\n     * @dev The owner could also be the admin or identity contract of the owner.\\n     * @return bool True if owner.\\n     */\\n    function isOwner(address wallet) public view returns (bool) {\\n        return (wallet == _owner || wallet == _admin);\\n    }\\n\\n    /**\\n     * @notice Gets the owner's address.\\n     * @dev _owner is first set in init.\\n     * @return address Of ower.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Checks who the owner of a token is.\\n     * @dev The token must exist.\\n     * @param tokenId The token to look up.\\n     * @return address Owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        require(!Address.isZero(tokenOwner), \\\"ERC721: token does not exist\\\");\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @notice Get token by index instead of token id.\\n     * @dev Helpful for token enumeration where token id info is not yet available.\\n     * @param index Index of token in array.\\n     * @return uint256 Returns the token id of token located at that index.\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        require(index < totalSupply(), \\\"CXIP: index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @notice Get token from wallet by index instead of token id.\\n     * @dev Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.\\n     * @param wallet Specific address for which to get token for.\\n     * @param index Index of token in array.\\n     * @return uint256 Returns the token id of token located at that index in specified wallet.\\n     */\\n    function tokenOfOwnerByIndex(address wallet, uint256 index) public view returns (uint256) {\\n        require(index < balanceOf(wallet), \\\"CXIP: index out of bounds\\\");\\n        return _ownedTokens[wallet][index];\\n    }\\n\\n    /**\\n     * @notice Total amount of tokens in the collection.\\n     * @dev Ignores burned tokens.\\n     * @return uint256 Returns the total number of active (not burned) tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalTokens;\\n    }\\n\\n    /**\\n     * @notice Empty function that is triggered by external contract on NFT transfer.\\n     * @dev We have this blank function in place to make sure that external contract sending in NFTs don't error out.\\n     * @dev Since it's not being used, the _operator variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _from variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.\\n     * @return bytes4 Returns the interfaceId of onERC721Received.\\n     */\\n    function onERC721Received(\\n        address, /*_operator*/\\n        address, /*_from*/\\n        uint256, /*_tokenId*/\\n        bytes calldata /*_data*/\\n    ) public pure returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    /**\\n     * @notice Allows retrieval of royalties from the contract.\\n     * @dev This is a default fallback to ensure the royalties are available.\\n     */\\n    function _royaltiesFallback() internal {\\n        address _target = getRegistry().getPA1D();\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), _target, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the top-level CXIP Registry smart contract. Function must always be internal to prevent miss-use/abuse through bad programming practices.\\n     * @return ICxipRegistry The address of the top-level CXIP Registry smart contract.\\n     */\\n    function getRegistry() internal pure returns (ICxipRegistry) {\\n        return ICxipRegistry(0x415225c0d082CB195AeE69f490c218def30966da);\\n    }\\n\\n    /**\\n     * @dev Add a newly minted token into managed list of tokens.\\n     * @param to Address of token owner for which to add the token.\\n     * @param tokenId Id of token to add.\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokensCount[to];\\n        _ownedTokensCount[to]++;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    /**\\n     * @notice Deletes a token from the approval list.\\n     * @dev Removes from count.\\n     * @param tokenId T.\\n     */\\n    function _clearApproval(uint256 tokenId) private {\\n        delete _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @notice Mints an NFT.\\n     * @dev Can to mint the token to the zero address and the token cannot already exist.\\n     * @param to Address to mint to.\\n     * @param tokenId The new token.\\n     */\\n    function _mint(address to, uint256 tokenId) private {\\n        if (Address.isZero(to) || _exists(tokenId)) {\\n            assert(false);\\n        }\\n        _tokenOwner[tokenId] = to;\\n        emit Transfer(address(0), to, tokenId);\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n        _totalTokens += 1;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Remove a token from managed list of tokens.\\n     * @param from Address of token owner for which to remove the token.\\n     * @param tokenId Id of token to remove.\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        _ownedTokensCount[from]--;\\n        uint256 lastTokenIndex = _ownedTokensCount[from];\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n        if (lastTokenIndex == 0) {\\n            delete _ownedTokens[from];\\n        } else {\\n            delete _ownedTokens[from][lastTokenIndex];\\n        }\\n    }\\n\\n    /**\\n     * @dev Primary internal function that handles the transfer/mint/burn functionality.\\n     * @param from Address from where token is being transferred. Zero address means it is being minted.\\n     * @param to Address to whom the token is being transferred. Zero address means it is being burned.\\n     * @param tokenId Id of token that is being transferred/minted/burned.\\n     */\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        if (_tokenOwner[tokenId] == from && !Address.isZero(to)) {\\n            _clearApproval(tokenId);\\n            _tokenOwner[tokenId] = to;\\n            emit Transfer(from, to, tokenId);\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        } else {\\n            assert(false);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the token owner exists.\\n     * @dev If the address is the zero address no owner exists.\\n     * @param tokenId The affected token.\\n     * @return bool True if it exists.\\n     */\\n    function _exists(uint256 tokenId) private view returns (bool) {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        return !Address.isZero(tokenOwner);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is an approved one.\\n     * @dev Uses inlined checks for different usecases of approval.\\n     * @param spender Address of the spender.\\n     * @param tokenId The affected token.\\n     * @return bool True if approved.\\n     */\\n    function _isApproved(address spender, uint256 tokenId) private view returns (bool) {\\n        require(_exists(tokenId));\\n        address tokenOwner = _tokenOwner[tokenId];\\n        return (spender == tokenOwner || getApproved(tokenId) == spender || isApprovedForAll(tokenOwner, spender));\\n    }\\n}\\n\",\"keccak256\":\"0x6f9d55371ddfd5ca7c7941949a40959caaa1eae22b7dc2a5dbcec2e064b9e79d\",\"license\":\"MIT\"},\"contracts/external/OpenSea.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ncontract OpenSeaOwnableDelegateProxy {}\\n\\ncontract OpenSeaProxyRegistry {\\n    mapping(address => OpenSeaOwnableDelegateProxy) public proxies;\\n}\\n\",\"keccak256\":\"0xe89c5cb9b98f9eef93b85b707f8740375fda432662147018de296640f5db1ada\",\"license\":\"MIT\"},\"contracts/interface/ICxipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\nimport \\\"../struct/Verification.sol\\\";\\n\\ninterface ICxipERC721 {\\n    function arweaveURI(uint256 tokenId) external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function creator(uint256 tokenId) external view returns (address);\\n\\n    function httpURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ipfsURI(uint256 tokenId) external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function payloadHash(uint256 tokenId) external view returns (bytes32);\\n\\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory);\\n\\n    function payloadSigner(uint256 tokenId) external view returns (address);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function tokensOfOwner(address wallet) external view returns (uint256[] memory);\\n\\n    function verifySHA256(bytes32 hash, bytes calldata payload) external pure returns (bool);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function init(address newOwner, CollectionData calldata collectionData) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function setApprovalForAll(address to, bool approved) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function cxipMint(uint256 id, TokenData calldata tokenData) external returns (uint256);\\n\\n    function setApprovalForAll(\\n        address from,\\n        address to,\\n        bool approved\\n    ) external;\\n\\n    function setName(bytes32 newName, bytes32 newName2) external;\\n\\n    function setSymbol(bytes32 newSymbol) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function balanceOf(address wallet) external view returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function isApprovedForAll(address wallet, address operator) external view returns (bool);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function isOwner(address wallet) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address wallet, uint256 index) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xab469ea2eff4b8c15d0af2128a6529658d23cb157d521f3af41702d3e1f821c6\",\"license\":\"MIT\"},\"contracts/interface/ICxipProvenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/InterfaceType.sol\\\";\\nimport \\\"../struct/Token.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\n\\ninterface ICxipProvenance {\\n    function createERC721Token(\\n        address collection,\\n        uint256 id,\\n        TokenData calldata tokenData,\\n        Verification calldata verification\\n    ) external returns (uint256);\\n\\n    function createERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData\\n    ) external returns (address);\\n\\n    function createCustomERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData,\\n        bytes32 slot,\\n        bytes memory bytecode\\n    ) external returns (address);\\n\\n    function getCollectionById(uint256 index) external view returns (address);\\n\\n    function getCollectionType(address collection) external view returns (InterfaceType);\\n\\n    function isCollectionCertified(address collection) external view returns (bool);\\n\\n    function isCollectionRegistered(address collection) external view returns (bool);\\n\\n    function isTokenCertified(address collection, uint256 tokenId) external view returns (bool);\\n\\n    function isTokenRegistered(address collection, uint256 tokenId) external view returns (bool);\\n\\n    function listCollections(uint256 offset, uint256 length)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function totalCollections() external view returns (uint256);\\n\\n    function isCollectionOpen(address collection) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x87a79ce1a60b39060a2e8370642ab2c9bee4aeefbe5c587046f4e71bbe629794\",\"license\":\"MIT\"},\"contracts/interface/ICxipRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipRegistry {\\n    function getCustomSource(bytes32 name) external view returns (address);\\n\\n    function getCustomSourceFromString(string memory name) external view returns (address);\\n\\n    function getERC1155CollectionSource() external view returns (address);\\n\\n    function getERC721CollectionSource() external view returns (address);\\n\\n    function getPA1D() external view returns (address);\\n\\n    function getPA1DSource() external view returns (address);\\n\\n    function getProvenance() external view returns (address);\\n\\n    function getProvenanceSource() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function setCustomSource(string memory name, address source) external;\\n\\n    function setERC1155CollectionSource(address source) external;\\n\\n    function setERC721CollectionSource(address source) external;\\n\\n    function setPA1D(address proxy) external;\\n\\n    function setPA1DSource(address source) external;\\n\\n    function setProvenance(address proxy) external;\\n\\n    function setProvenanceSource(address source) external;\\n}\\n\",\"keccak256\":\"0x859741a06ea797260e95a1fb0ecbc39b8d3a1f4eb98ea5103060ca60b45e92ab\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xef051967d1848e9eb3117e8cb45b7a2d7a54c0aac715c7bcbaf56d8fb85f39e7\",\"license\":\"MIT\"},\"contracts/interface/IPA1D.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../library/Zora.sol\\\";\\n\\ninterface IPA1D {\\n    function init(\\n        uint256 tokenId,\\n        address payable receiver,\\n        uint256 bp\\n    ) external;\\n\\n    function configurePayouts(address payable[] memory addresses, uint256[] memory bps) external;\\n\\n    function getPayoutInfo()\\n        external\\n        view\\n        returns (address payable[] memory addresses, uint256[] memory bps);\\n\\n    function getEthPayout() external;\\n\\n    function getTokenPayout(address tokenAddress) external;\\n\\n    function getTokenPayoutByName(string memory tokenName) external;\\n\\n    function getTokensPayout(address[] memory tokenAddresses) external;\\n\\n    function getTokensPayoutByName(string[] memory tokenNames) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n\\n    function setRoyalties(\\n        uint256 tokenId,\\n        address payable receiver,\\n        uint256 bp\\n    ) external;\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    function getFeeBps(uint256 tokenId) external view returns (uint256[] memory);\\n\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n\\n    function getRoyalties(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    function tokenCreator(address contractAddress, uint256 tokenId) external view returns (address);\\n\\n    function calculateRoyaltyFee(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function marketContract() external view returns (address);\\n\\n    function tokenCreators(uint256 tokenId) external view returns (address);\\n\\n    function bidSharesForToken(uint256 tokenId)\\n        external\\n        view\\n        returns (Zora.BidShares memory bidShares);\\n\\n    function getStorageSlot(string calldata slot) external pure returns (bytes32);\\n\\n    function getTokenAddress(string memory tokenName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5737f7397b240725908f0fba96c6f3bf87cd5230530a680aba2c07dd2128936e\",\"license\":\"MIT\"},\"contracts/library/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 &&\\n            codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\\n    }\\n\\n    function isZero(address account) internal pure returns (bool) {\\n        return (account == address(0));\\n    }\\n}\\n\",\"keccak256\":\"0x53828b644743921c47d7b36278f23203cd56d18c1f57a6833cc316558befffef\",\"license\":\"MIT\"},\"contracts/library/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Bytes {\\n    function getBoolean(uint192 _packedBools, uint192 _boolNumber) internal pure returns (bool) {\\n        uint192 flag = (_packedBools >> _boolNumber) & uint192(1);\\n        return (flag == 1 ? true : false);\\n    }\\n\\n    function setBoolean(\\n        uint192 _packedBools,\\n        uint192 _boolNumber,\\n        bool _value\\n    ) internal pure returns (uint192) {\\n        if (_value) {\\n            return _packedBools | (uint192(1) << _boolNumber);\\n        } else {\\n            return _packedBools & ~(uint192(1) << _boolNumber);\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n        bytes memory tempBytes;\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                tempBytes := mload(0x40)\\n                let lengthmod := and(_length, 31)\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n                for {\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n                mstore(tempBytes, _length)\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            default {\\n                tempBytes := mload(0x40)\\n                mstore(tempBytes, 0)\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n        return tempBytes;\\n    }\\n\\n    function trim(bytes32 source) internal pure returns (bytes memory) {\\n        uint256 temp = uint256(source);\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return slice(abi.encodePacked(source), 32 - length, length);\\n    }\\n}\\n\",\"keccak256\":\"0xcd2deba6787d70b02a45d413f123c369ec896f8cadcd0f885d8133e8bdefad6b\",\"license\":\"MIT\"},\"contracts/library/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Strings {\\n    function toHexString(address account) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(account)));\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = bytes16(\\\"0123456789abcdef\\\")[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x341fbf23317cf1ee333cff62957814e8057b4c9c87a9d359db22c9e89c63a43e\",\"license\":\"MIT\"},\"contracts/library/Zora.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Zora {\\n    struct Decimal {\\n        uint256 value;\\n    }\\n\\n    struct BidShares {\\n        // % of sale value that goes to the _previous_ owner of the nft\\n        Decimal prevOwner;\\n        // % of sale value that goes to the original creator of the nft\\n        Decimal creator;\\n        // % of sale value that goes to the seller (current owner) of the nft\\n        Decimal owner;\\n    }\\n}\\n\",\"keccak256\":\"0x76a26baf5d8a39f8ac350b0747a96b81bd7a06ce5e013bb34945d8197f9fd731\",\"license\":\"MIT\"},\"contracts/struct/CollectionData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./UriType.sol\\\";\\n\\nstruct CollectionData {\\n    bytes32 name;\\n    bytes32 name2;\\n    bytes32 symbol;\\n    address royalties;\\n    uint96 bps;\\n}\\n\",\"keccak256\":\"0x328167148d845d1945ef8b77f710750d10cd38d2c8510e22ca52ec67781e3b8f\",\"license\":\"MIT\"},\"contracts/struct/InterfaceType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum InterfaceType {\\n    NULL, // 0\\n    ERC20, // 1\\n    ERC721, // 2\\n    ERC1155 // 3\\n}\\n\",\"keccak256\":\"0xed4f93a0fc084fa9d0a55d5e7c11f53e34b4c0d45d93de6ff03f345ae9a52885\",\"license\":\"MIT\"},\"contracts/struct/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./InterfaceType.sol\\\";\\n\\nstruct Token {\\n    address collection;\\n    uint256 tokenId;\\n    InterfaceType tokenType;\\n    address creator;\\n}\\n\",\"keccak256\":\"0xa9c13c64d8f611f96d8b4c39eb42dab1a05d70119f351047ee939e63d3a29e6f\",\"license\":\"MIT\"},\"contracts/struct/TokenData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./Verification.sol\\\";\\n\\nstruct TokenData {\\n    bytes32 payloadHash;\\n    Verification payloadSignature;\\n    address creator;\\n    bytes32 arweave;\\n    bytes11 arweave2;\\n    bytes32 ipfs;\\n    bytes14 ipfs2;\\n}\\n\",\"keccak256\":\"0xd7288c705f3247427487e4491a7cddb84a42af2a32720a16f75c8950380a717d\",\"license\":\"MIT\"},\"contracts/struct/UriType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum UriType {\\n    ARWEAVE, // 0\\n    IPFS, // 1\\n    HTTP // 2\\n}\\n\",\"keccak256\":\"0xe64f56b37ab2043dd80ae3b06abb928151837a546653ea0bd350d9078ccb29a6\",\"license\":\"MIT\"},\"contracts/struct/Verification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nstruct Verification {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n}\\n\",\"keccak256\":\"0x56a68601446e86e6a5d8bc4dc66df60fb6fb1518c4cc4fd0e9a87d50386a8652\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612564806100206000396000f3fe6080604052600436106101ee5760003560e01c80634f8baacc1161011357806395d89b41116100ab578063b88d4fde1161006f578063b88d4fde146106b9578063c87b56dd14610666578063e8a3d485146106cc578063e985e9c5146106e1578063f95bb91e14610701576101f5565b806395d89b4114610631578063a22cb46514610646578063a546993e14610666578063ab67aa5814610686578063b0cacd4314610699576101f5565b80634f8baacc14610526578063510b51581461024157806351e32024146105465780636352211e146105665780636c0360eb1461058657806370a082311461059b5780638462151c146105d15780638da5cb5b146105fe5780638f32d59b1461061c576101f5565b806323b872dd1161018657806323b872dd146103a25780632c2dadbc146103b55780632f54bf6e146104465780632f745c591461046657806342842e0e1461048657806342966c6814610499578063475a8035146104b957806349e65440146104e65780634f6ccce714610506576101f5565b806301ffc9a71461020c57806306ce0db81461024157806306fdde0314610292578063081812fc146102b4578063095ea7b3146102ea578063128bfa251461030a578063150b7a021461032a57806318160ddd146103635780631a5c7f9214610382576101f5565b366101f557005b34801561020157600080fd5b5061020a610721565b005b34801561021857600080fd5b5061022c610227366004611b97565b6107c4565b60405190151581526020015b60405180910390f35b34801561024d57600080fd5b5061027a61025c366004611bb4565b6000908152600c60205260409020600401546001600160a01b031690565b6040516001600160a01b039091168152602001610238565b34801561029e57600080fd5b506102a7610943565b6040516102389190611c25565b3480156102c057600080fd5b5061027a6102cf366004611bb4565b6000908152600860205260409020546001600160a01b031690565b3480156102f657600080fd5b5061020a610305366004611c4d565b610983565b34801561031657600080fd5b5061020a610325366004611c79565b610a15565b34801561033657600080fd5b50610356610345366004611d03565b630a85bd0160e11b95945050505050565b6040516102389190611d76565b34801561036f57600080fd5b50600f545b604051908152602001610238565b34801561038e57600080fd5b506102a761039d366004611bb4565b610b5a565b61020a6103b0366004611d8b565b610bd7565b3480156103c157600080fd5b506104216103d0366004611bb4565b604080516060808201835260008083526020808401829052928401819052938452600c82529282902082519384018352600181015484526002810154918401919091526003015460ff169082015290565b6040805182518152602080840151908201529181015160ff1690820152606001610238565b34801561045257600080fd5b5061022c610461366004611dcc565b610bf2565b34801561047257600080fd5b50610374610481366004611c4d565b610c24565b61020a610494366004611d8b565b610c98565b3480156104a557600080fd5b5061020a6104b4366004611bb4565b610cb3565b3480156104c557600080fd5b506103746104d4366004611bb4565b6000908152600c602052604090205490565b3480156104f257600080fd5b5061020a610501366004611bb4565b610d47565b34801561051257600080fd5b50610374610521366004611bb4565b610d70565b34801561053257600080fd5b50610374610541366004611de9565b610dbe565b34801561055257600080fd5b506102a7610561366004611bb4565b610e5a565b34801561057257600080fd5b5061027a610581366004611bb4565b610e7e565b34801561059257600080fd5b506102a7610ee3565b3480156105a757600080fd5b506103746105b6366004611dcc565b6001600160a01b031660009081526009602052604090205490565b3480156105dd57600080fd5b506105f16105ec366004611dcc565b610efe565b6040516102389190611e15565b34801561060a57600080fd5b50600e546001600160a01b031661027a565b34801561062857600080fd5b5061022c610f6a565b34801561063d57600080fd5b506102a7610f95565b34801561065257600080fd5b5061020a610661366004611e67565b610fa5565b34801561067257600080fd5b506102a7610681366004611bb4565b611065565b61020a610694366004611eb6565b6110cf565b3480156106a557600080fd5b5061022c6106b4366004611f96565b611106565b61020a6106c7366004611eb6565b611166565b3480156106d857600080fd5b506102a7611364565b3480156106ed57600080fd5b5061022c6106fc366004611fe2565b61137f565b34801561070d57600080fd5b5061020a61071c366004612010565b6113ad565b600073415225c0d082cb195aee69f490c218def30966da6001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107999190612032565b90503660008037600080366000845af43d6000803e8080156107ba573d6000f35b3d6000fd5b505050565b60006301ffc9a760e01b6001600160e01b0319831614806107f557506380ac58cd60e01b6001600160e01b03198316145b806108105750635b5e139f60e01b6001600160e01b03198316145b8061082b5750630a85bd0160e11b6001600160e01b03198316145b80610846575063e8a3d48560e01b6001600160e01b03198316145b8061092e575073415225c0d082cb195aee69f490c218def30966da6001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c29190612032565b6001600160a01b03166301ffc9a7836040518263ffffffff1660e01b81526004016108ed9190611d76565b602060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e919061204f565b1561093b57506001919050565b506000919050565b606061095260008001546113dc565b60015461095e906113dc565b60405160200161096f92919061206c565b604051602081830303815290604052905090565b6000818152600760205260409020546001600160a01b0390811690831681148015906109b457506109b43383611440565b156107bf5760008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600d546001600160a01b031615610a6f5760405162461bcd60e51b815260206004820152601960248201527810d612540e88185b1c9958591e481a5b9a5d1a585b1a5e9959603a1b60448201526064015b60405180910390fd5b600d80546001600160a01b03199081163317909155600e805490911630179055806000610a9c82826120dd565b5030905063ea2299f86000610ab76080850160608601611dcc565b610ac760a0860160808701612142565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526001600160601b03166044820152606401600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b5050600e80546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000818152600c602090815260409182902060078101546008909101549251606093610bc19360909190911b91017568747470733a2f2f697066732e637869702e6465762f60501b815260168101929092526001600160901b031916603682015260440190565b6040516020818303038152906040529050919050565b6107bf838383604051806020016040528060008152506110cf565b600e546000906001600160a01b0383811691161480610c1e5750600d546001600160a01b038381169116145b92915050565b6001600160a01b0382166000908152600960205260408120548210610c5b5760405162461bcd60e51b8152600401610a669061215f565b6001600160a01b0383166000908152600a60205260409020805483908110610c8557610c85612192565b9060005260206000200154905092915050565b6107bf83838360405180602001604052806000815250611166565b610cbd3382611440565b610cd95760405162461bcd60e51b8152600401610a66906121a8565b6000818152600760205260409020546001600160a01b0316610cfa826114a7565b60008281526007602052604080822080546001600160a01b0319169055518391906001600160a01b0384169060008051602061250f833981519152908390a4610d4381836114c5565b5050565b610d4f610f6a565b610d6b5760405162461bcd60e51b8152600401610a66906121db565b600255565b6000610d7b600f5490565b8210610d995760405162461bcd60e51b8152600401610a669061215f565b60058281548110610dac57610dac612192565b90600052602060002001549050919050565b6000610dc8610f6a565b610de45760405162461bcd60e51b8152600401610a66906121db565b82610e1e575b610df5600454611611565b15610e1857600160046000828254610e0d9190612224565b90915550610dea9050565b60045492505b610e37610e3160a0840160808501611dcc565b8461162e565b6000838152600c602052604090208290610e518282612270565b50929392505050565b6060610e64610ee3565b610e6d836116f0565b604051602001610bc1929190612334565b6000818152600760205260408120546001600160a01b031680610c1e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20646f6573206e6f74206578697374000000006044820152606401610a66565b6060610eee30611744565b60405160200161096f9190612370565b6001600160a01b0381166000908152600a6020908152604091829020805483518184028101840190945280845260609392830182828015610f5e57602002820191906000526020600020905b815481526020019060010190808311610f4a575b50505050509050919050565b600e546000906001600160a01b0316331480610f905750600d546001600160a01b031633145b905090565b6060610f906000600201546113dc565b6001600160a01b038216331415610ff95760405162461bcd60e51b815260206004820152601860248201527721ac24a81d1031b0b713ba1030b8383937bb329039b2b63360411b6044820152606401610a66565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000818152600c602090815260409182902060058101546006909101549251606093610bc19360a89190911b91017868747470733a2f2f617277656176652e637869702e6465762f60381b815260198101929092526001600160a81b031916603982015260440190565b6110d93383611440565b6110f55760405162461bcd60e51b8152600401610a66906121a8565b611100848484611758565b50505050565b6000806002848460405161111b9291906123ad565b602060405180830381855afa158015611138573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061115b91906123bd565b909414949350505050565b6111703383611440565b61118c5760405162461bcd60e51b8152600401610a66906121a8565b611197848484611758565b6111a0836117f8565b15611100576040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906111d19082906004016123d6565b602060405180830381865afa1580156111ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611212919061204f565b801561128a57506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906112499063150b7a02906004016123d6565b602060405180830381865afa158015611266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128a919061204f565b80156113185750604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906112c39030908890879087906004016123ee565b602060405180830381865afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611304919061242b565b6001600160e01b03191663150b7a0260e01b145b6111005760405162461bcd60e51b815260206004820152601b60248201527f435849503a206f6e4552433732315265636569766564206661696c00000000006044820152606401610a66565b606061136f30611744565b60405160200161096f9190612448565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b6113b5610f6a565b6113d15760405162461bcd60e51b8152600401610a66906121db565b600091909155600155565b60608160005b811561140157806113f281612490565b915050600882901c91506113e2565b6114388460405160200161141791815260200190565b60408051601f198184030181529190526114328360206124ab565b83611832565b949350505050565b600061144b82611611565b61145457600080fd5b6000828152600760205260409020546001600160a01b0390811690841681148061149757506000838152600860205260409020546001600160a01b038581169116145b806114385750611438818561137f565b600090815260086020526040902080546001600160a01b0319169055565b6001600160a01b03821660009081526009602052604081208054916114e9836124c2565b90915550506001600160a01b0382166000908152600960209081526040808320548484526006909252909120548082146115ab576001600160a01b0384166000908152600a6020526040812080548490811061154757611547612192565b9060005260206000200154905080600a6000876001600160a01b03166001600160a01b03168152602001908152602001600020838154811061158b5761158b612192565b600091825260208083209091019290925591825260069052604090208190555b816115d6576001600160a01b0384166000908152600a602052604081206115d191611b47565b611100565b6001600160a01b0384166000908152600a6020526040902080548390811061160057611600612192565b600091825260208220015550505050565b6000908152600760205260409020546001600160a01b0316151590565b6001600160a01b0382161580611648575061164881611611565b15611655576116556124d9565b60008181526007602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183929060008051602061250f833981519152908290a46116a2828261193f565b6001600f60008282546116b59190612224565b9091555050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0015550565b6060816117175750506040805180820190915260048152630307830360e41b602082015290565b8160005b811561173a578061172b81612490565b915050600882901c915061171b565b61143884826119ab565b6060610c1e826001600160a01b03166116f0565b6000818152600760205260409020546001600160a01b03848116911614801561178957506001600160a01b03821615155b156117f057611797816114a7565b60008181526007602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061250f83398151915291a46117e683826114c5565b6107bf828261193f565b6107bf6124d9565b6000813f801580159061182b57507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708114155b9392505050565b60608161184081601f612224565b101561187f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610a66565b6118898284612224565b845110156118cd5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610a66565b6060821580156118ec5760405191506000825260208201604052611936565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561192557805183526020928301920161190d565b5050858452601f01601f1916604052505b50949350505050565b6001600160a01b0382166000818152600960208181526040808420805487865260068452918520829055948452919052919061197a83612490565b90915550506001600160a01b039091166000908152600a602090815260408220805460018101825590835291200155565b606060006119ba8360026124ef565b6119c5906002612224565b67ffffffffffffffff8111156119dd576119dd611ea0565b6040519080825280601f01601f191660200182016040528015611a07576020820181803683370190505b509050600360fc1b81600081518110611a2257611a22612192565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5157611a51612192565b60200101906001600160f81b031916908160001a9053506000611a758460026124ef565b611a80906001612224565b90505b6001811115611af8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ab457611ab4612192565b1a60f81b828281518110611aca57611aca612192565b60200101906001600160f81b031916908160001a90535060049490941c93611af1816124c2565b9050611a83565b50831561182b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a66565b5080546000825590600052602060002090810190611b659190611b68565b50565b5b80821115611b7d5760008155600101611b69565b5090565b6001600160e01b031981168114611b6557600080fd5b600060208284031215611ba957600080fd5b813561182b81611b81565b600060208284031215611bc657600080fd5b5035919050565b60005b83811015611be8578181015183820152602001611bd0565b838111156111005750506000910152565b60008151808452611c11816020860160208601611bcd565b601f01601f19169290920160200192915050565b60208152600061182b6020830184611bf9565b6001600160a01b0381168114611b6557600080fd5b60008060408385031215611c6057600080fd5b8235611c6b81611c38565b946020939093013593505050565b60008082840360c0811215611c8d57600080fd5b8335611c9881611c38565b925060a0601f1982011215611cac57600080fd5b506020830190509250929050565b60008083601f840112611ccc57600080fd5b50813567ffffffffffffffff811115611ce457600080fd5b602083019150836020828501011115611cfc57600080fd5b9250929050565b600080600080600060808688031215611d1b57600080fd5b8535611d2681611c38565b94506020860135611d3681611c38565b935060408601359250606086013567ffffffffffffffff811115611d5957600080fd5b611d6588828901611cba565b969995985093965092949392505050565b6001600160e01b031991909116815260200190565b600080600060608486031215611da057600080fd5b8335611dab81611c38565b92506020840135611dbb81611c38565b929592945050506040919091013590565b600060208284031215611dde57600080fd5b813561182b81611c38565b600080828403610140811215611dfe57600080fd5b83359250610120601f1982011215611cac57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015611e4d57835183529284019291840191600101611e31565b50909695505050505050565b8015158114611b6557600080fd5b60008060408385031215611e7a57600080fd5b8235611e8581611c38565b91506020830135611e9581611e59565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611ecc57600080fd5b8435611ed781611c38565b93506020850135611ee781611c38565b925060408501359150606085013567ffffffffffffffff80821115611f0b57600080fd5b818701915087601f830112611f1f57600080fd5b813581811115611f3157611f31611ea0565b604051601f8201601f19908116603f01168101908382118183101715611f5957611f59611ea0565b816040528281528a6020848701011115611f7257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080600060408486031215611fab57600080fd5b83359250602084013567ffffffffffffffff811115611fc957600080fd5b611fd586828701611cba565b9497909650939450505050565b60008060408385031215611ff557600080fd5b823561200081611c38565b91506020830135611e9581611c38565b6000806040838503121561202357600080fd5b50508035926020909101359150565b60006020828403121561204457600080fd5b815161182b81611c38565b60006020828403121561206157600080fd5b815161182b81611e59565b6000835161207e818460208801611bcd565b835190830190612092818360208801611bcd565b01949350505050565b60008135610c1e81611c38565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160601b0381168114611b6557600080fd5b81358155602082013560018201556040820135600282015560038101606083013561210781611c38565b61211181836120a8565b506080830135612120816120c8565b81546001600160a01b031660a09190911b6001600160a01b0319161790555050565b60006020828403121561215457600080fd5b813561182b816120c8565b602080825260199082015278435849503a20696e646578206f7574206f6620626f756e647360381b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526019908201527821ac24a81d103737ba1030b8383937bb32b21039b2b73232b960391b604082015260600190565b60208082526019908201527821ac24a81d1031b0b63632b9103737ba1030b71037bbb732b960391b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156122375761223761220e565b500190565b600081356001600160a81b031981168114610c1e57600080fd5b600081356001600160901b031981168114610c1e57600080fd5b81358155602082013560018201556040820135600282015560038101606083013560ff81168082146122a157600080fd5b825460ff191617909155506122c46122bb6080840161209b565b600483016120a8565b60a082013560058201556122fc6122dd60c0840161223c565b600683018160a81c6affffffffffffffffffffff198254161781555050565b60e08201356007820155610d436123166101008401612256565b6008830180546001600160701b03191660909290921c919091179055565b60008351612346818460208801611bcd565b602f60f81b9083019081528351612364816001840160208801611bcd565b01600101949350505050565b7468747470733a2f2f637869702e6465762f6e66742f60581b8152600082516123a0816015850160208701611bcd565b9190910160150192915050565b8183823760009101908152919050565b6000602082840312156123cf57600080fd5b5051919050565b60e09190911b6001600160e01b031916815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061242190830184611bf9565b9695505050505050565b60006020828403121561243d57600080fd5b815161182b81611b81565b7468747470733a2f2f6e66742e637869702e6465762f60581b815260008251612478816015850160208701611bcd565b602f60f81b6015939091019283015250601601919050565b60006000198214156124a4576124a461220e565b5060010190565b6000828210156124bd576124bd61220e565b500390565b6000816124d1576124d161220e565b506000190190565b634e487b7160e01b600052600160045260246000fd5b60008160001904831182151516156125095761250961220e565b50029056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122076de3b2bcd11e4ae473741106b11a7e475d6bcd349531c74871d976be12d198e64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80634f8baacc1161011357806395d89b41116100ab578063b88d4fde1161006f578063b88d4fde146106b9578063c87b56dd14610666578063e8a3d485146106cc578063e985e9c5146106e1578063f95bb91e14610701576101f5565b806395d89b4114610631578063a22cb46514610646578063a546993e14610666578063ab67aa5814610686578063b0cacd4314610699576101f5565b80634f8baacc14610526578063510b51581461024157806351e32024146105465780636352211e146105665780636c0360eb1461058657806370a082311461059b5780638462151c146105d15780638da5cb5b146105fe5780638f32d59b1461061c576101f5565b806323b872dd1161018657806323b872dd146103a25780632c2dadbc146103b55780632f54bf6e146104465780632f745c591461046657806342842e0e1461048657806342966c6814610499578063475a8035146104b957806349e65440146104e65780634f6ccce714610506576101f5565b806301ffc9a71461020c57806306ce0db81461024157806306fdde0314610292578063081812fc146102b4578063095ea7b3146102ea578063128bfa251461030a578063150b7a021461032a57806318160ddd146103635780631a5c7f9214610382576101f5565b366101f557005b34801561020157600080fd5b5061020a610721565b005b34801561021857600080fd5b5061022c610227366004611b97565b6107c4565b60405190151581526020015b60405180910390f35b34801561024d57600080fd5b5061027a61025c366004611bb4565b6000908152600c60205260409020600401546001600160a01b031690565b6040516001600160a01b039091168152602001610238565b34801561029e57600080fd5b506102a7610943565b6040516102389190611c25565b3480156102c057600080fd5b5061027a6102cf366004611bb4565b6000908152600860205260409020546001600160a01b031690565b3480156102f657600080fd5b5061020a610305366004611c4d565b610983565b34801561031657600080fd5b5061020a610325366004611c79565b610a15565b34801561033657600080fd5b50610356610345366004611d03565b630a85bd0160e11b95945050505050565b6040516102389190611d76565b34801561036f57600080fd5b50600f545b604051908152602001610238565b34801561038e57600080fd5b506102a761039d366004611bb4565b610b5a565b61020a6103b0366004611d8b565b610bd7565b3480156103c157600080fd5b506104216103d0366004611bb4565b604080516060808201835260008083526020808401829052928401819052938452600c82529282902082519384018352600181015484526002810154918401919091526003015460ff169082015290565b6040805182518152602080840151908201529181015160ff1690820152606001610238565b34801561045257600080fd5b5061022c610461366004611dcc565b610bf2565b34801561047257600080fd5b50610374610481366004611c4d565b610c24565b61020a610494366004611d8b565b610c98565b3480156104a557600080fd5b5061020a6104b4366004611bb4565b610cb3565b3480156104c557600080fd5b506103746104d4366004611bb4565b6000908152600c602052604090205490565b3480156104f257600080fd5b5061020a610501366004611bb4565b610d47565b34801561051257600080fd5b50610374610521366004611bb4565b610d70565b34801561053257600080fd5b50610374610541366004611de9565b610dbe565b34801561055257600080fd5b506102a7610561366004611bb4565b610e5a565b34801561057257600080fd5b5061027a610581366004611bb4565b610e7e565b34801561059257600080fd5b506102a7610ee3565b3480156105a757600080fd5b506103746105b6366004611dcc565b6001600160a01b031660009081526009602052604090205490565b3480156105dd57600080fd5b506105f16105ec366004611dcc565b610efe565b6040516102389190611e15565b34801561060a57600080fd5b50600e546001600160a01b031661027a565b34801561062857600080fd5b5061022c610f6a565b34801561063d57600080fd5b506102a7610f95565b34801561065257600080fd5b5061020a610661366004611e67565b610fa5565b34801561067257600080fd5b506102a7610681366004611bb4565b611065565b61020a610694366004611eb6565b6110cf565b3480156106a557600080fd5b5061022c6106b4366004611f96565b611106565b61020a6106c7366004611eb6565b611166565b3480156106d857600080fd5b506102a7611364565b3480156106ed57600080fd5b5061022c6106fc366004611fe2565b61137f565b34801561070d57600080fd5b5061020a61071c366004612010565b6113ad565b600073415225c0d082cb195aee69f490c218def30966da6001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107999190612032565b90503660008037600080366000845af43d6000803e8080156107ba573d6000f35b3d6000fd5b505050565b60006301ffc9a760e01b6001600160e01b0319831614806107f557506380ac58cd60e01b6001600160e01b03198316145b806108105750635b5e139f60e01b6001600160e01b03198316145b8061082b5750630a85bd0160e11b6001600160e01b03198316145b80610846575063e8a3d48560e01b6001600160e01b03198316145b8061092e575073415225c0d082cb195aee69f490c218def30966da6001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c29190612032565b6001600160a01b03166301ffc9a7836040518263ffffffff1660e01b81526004016108ed9190611d76565b602060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e919061204f565b1561093b57506001919050565b506000919050565b606061095260008001546113dc565b60015461095e906113dc565b60405160200161096f92919061206c565b604051602081830303815290604052905090565b6000818152600760205260409020546001600160a01b0390811690831681148015906109b457506109b43383611440565b156107bf5760008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600d546001600160a01b031615610a6f5760405162461bcd60e51b815260206004820152601960248201527810d612540e88185b1c9958591e481a5b9a5d1a585b1a5e9959603a1b60448201526064015b60405180910390fd5b600d80546001600160a01b03199081163317909155600e805490911630179055806000610a9c82826120dd565b5030905063ea2299f86000610ab76080850160608601611dcc565b610ac760a0860160808701612142565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526001600160601b03166044820152606401600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b5050600e80546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000818152600c602090815260409182902060078101546008909101549251606093610bc19360909190911b91017568747470733a2f2f697066732e637869702e6465762f60501b815260168101929092526001600160901b031916603682015260440190565b6040516020818303038152906040529050919050565b6107bf838383604051806020016040528060008152506110cf565b600e546000906001600160a01b0383811691161480610c1e5750600d546001600160a01b038381169116145b92915050565b6001600160a01b0382166000908152600960205260408120548210610c5b5760405162461bcd60e51b8152600401610a669061215f565b6001600160a01b0383166000908152600a60205260409020805483908110610c8557610c85612192565b9060005260206000200154905092915050565b6107bf83838360405180602001604052806000815250611166565b610cbd3382611440565b610cd95760405162461bcd60e51b8152600401610a66906121a8565b6000818152600760205260409020546001600160a01b0316610cfa826114a7565b60008281526007602052604080822080546001600160a01b0319169055518391906001600160a01b0384169060008051602061250f833981519152908390a4610d4381836114c5565b5050565b610d4f610f6a565b610d6b5760405162461bcd60e51b8152600401610a66906121db565b600255565b6000610d7b600f5490565b8210610d995760405162461bcd60e51b8152600401610a669061215f565b60058281548110610dac57610dac612192565b90600052602060002001549050919050565b6000610dc8610f6a565b610de45760405162461bcd60e51b8152600401610a66906121db565b82610e1e575b610df5600454611611565b15610e1857600160046000828254610e0d9190612224565b90915550610dea9050565b60045492505b610e37610e3160a0840160808501611dcc565b8461162e565b6000838152600c602052604090208290610e518282612270565b50929392505050565b6060610e64610ee3565b610e6d836116f0565b604051602001610bc1929190612334565b6000818152600760205260408120546001600160a01b031680610c1e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20646f6573206e6f74206578697374000000006044820152606401610a66565b6060610eee30611744565b60405160200161096f9190612370565b6001600160a01b0381166000908152600a6020908152604091829020805483518184028101840190945280845260609392830182828015610f5e57602002820191906000526020600020905b815481526020019060010190808311610f4a575b50505050509050919050565b600e546000906001600160a01b0316331480610f905750600d546001600160a01b031633145b905090565b6060610f906000600201546113dc565b6001600160a01b038216331415610ff95760405162461bcd60e51b815260206004820152601860248201527721ac24a81d1031b0b713ba1030b8383937bb329039b2b63360411b6044820152606401610a66565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000818152600c602090815260409182902060058101546006909101549251606093610bc19360a89190911b91017868747470733a2f2f617277656176652e637869702e6465762f60381b815260198101929092526001600160a81b031916603982015260440190565b6110d93383611440565b6110f55760405162461bcd60e51b8152600401610a66906121a8565b611100848484611758565b50505050565b6000806002848460405161111b9291906123ad565b602060405180830381855afa158015611138573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061115b91906123bd565b909414949350505050565b6111703383611440565b61118c5760405162461bcd60e51b8152600401610a66906121a8565b611197848484611758565b6111a0836117f8565b15611100576040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906111d19082906004016123d6565b602060405180830381865afa1580156111ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611212919061204f565b801561128a57506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906112499063150b7a02906004016123d6565b602060405180830381865afa158015611266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128a919061204f565b80156113185750604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906112c39030908890879087906004016123ee565b602060405180830381865afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611304919061242b565b6001600160e01b03191663150b7a0260e01b145b6111005760405162461bcd60e51b815260206004820152601b60248201527f435849503a206f6e4552433732315265636569766564206661696c00000000006044820152606401610a66565b606061136f30611744565b60405160200161096f9190612448565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b6113b5610f6a565b6113d15760405162461bcd60e51b8152600401610a66906121db565b600091909155600155565b60608160005b811561140157806113f281612490565b915050600882901c91506113e2565b6114388460405160200161141791815260200190565b60408051601f198184030181529190526114328360206124ab565b83611832565b949350505050565b600061144b82611611565b61145457600080fd5b6000828152600760205260409020546001600160a01b0390811690841681148061149757506000838152600860205260409020546001600160a01b038581169116145b806114385750611438818561137f565b600090815260086020526040902080546001600160a01b0319169055565b6001600160a01b03821660009081526009602052604081208054916114e9836124c2565b90915550506001600160a01b0382166000908152600960209081526040808320548484526006909252909120548082146115ab576001600160a01b0384166000908152600a6020526040812080548490811061154757611547612192565b9060005260206000200154905080600a6000876001600160a01b03166001600160a01b03168152602001908152602001600020838154811061158b5761158b612192565b600091825260208083209091019290925591825260069052604090208190555b816115d6576001600160a01b0384166000908152600a602052604081206115d191611b47565b611100565b6001600160a01b0384166000908152600a6020526040902080548390811061160057611600612192565b600091825260208220015550505050565b6000908152600760205260409020546001600160a01b0316151590565b6001600160a01b0382161580611648575061164881611611565b15611655576116556124d9565b60008181526007602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183929060008051602061250f833981519152908290a46116a2828261193f565b6001600f60008282546116b59190612224565b9091555050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0015550565b6060816117175750506040805180820190915260048152630307830360e41b602082015290565b8160005b811561173a578061172b81612490565b915050600882901c915061171b565b61143884826119ab565b6060610c1e826001600160a01b03166116f0565b6000818152600760205260409020546001600160a01b03848116911614801561178957506001600160a01b03821615155b156117f057611797816114a7565b60008181526007602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061250f83398151915291a46117e683826114c5565b6107bf828261193f565b6107bf6124d9565b6000813f801580159061182b57507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708114155b9392505050565b60608161184081601f612224565b101561187f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610a66565b6118898284612224565b845110156118cd5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610a66565b6060821580156118ec5760405191506000825260208201604052611936565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561192557805183526020928301920161190d565b5050858452601f01601f1916604052505b50949350505050565b6001600160a01b0382166000818152600960208181526040808420805487865260068452918520829055948452919052919061197a83612490565b90915550506001600160a01b039091166000908152600a602090815260408220805460018101825590835291200155565b606060006119ba8360026124ef565b6119c5906002612224565b67ffffffffffffffff8111156119dd576119dd611ea0565b6040519080825280601f01601f191660200182016040528015611a07576020820181803683370190505b509050600360fc1b81600081518110611a2257611a22612192565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5157611a51612192565b60200101906001600160f81b031916908160001a9053506000611a758460026124ef565b611a80906001612224565b90505b6001811115611af8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ab457611ab4612192565b1a60f81b828281518110611aca57611aca612192565b60200101906001600160f81b031916908160001a90535060049490941c93611af1816124c2565b9050611a83565b50831561182b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a66565b5080546000825590600052602060002090810190611b659190611b68565b50565b5b80821115611b7d5760008155600101611b69565b5090565b6001600160e01b031981168114611b6557600080fd5b600060208284031215611ba957600080fd5b813561182b81611b81565b600060208284031215611bc657600080fd5b5035919050565b60005b83811015611be8578181015183820152602001611bd0565b838111156111005750506000910152565b60008151808452611c11816020860160208601611bcd565b601f01601f19169290920160200192915050565b60208152600061182b6020830184611bf9565b6001600160a01b0381168114611b6557600080fd5b60008060408385031215611c6057600080fd5b8235611c6b81611c38565b946020939093013593505050565b60008082840360c0811215611c8d57600080fd5b8335611c9881611c38565b925060a0601f1982011215611cac57600080fd5b506020830190509250929050565b60008083601f840112611ccc57600080fd5b50813567ffffffffffffffff811115611ce457600080fd5b602083019150836020828501011115611cfc57600080fd5b9250929050565b600080600080600060808688031215611d1b57600080fd5b8535611d2681611c38565b94506020860135611d3681611c38565b935060408601359250606086013567ffffffffffffffff811115611d5957600080fd5b611d6588828901611cba565b969995985093965092949392505050565b6001600160e01b031991909116815260200190565b600080600060608486031215611da057600080fd5b8335611dab81611c38565b92506020840135611dbb81611c38565b929592945050506040919091013590565b600060208284031215611dde57600080fd5b813561182b81611c38565b600080828403610140811215611dfe57600080fd5b83359250610120601f1982011215611cac57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015611e4d57835183529284019291840191600101611e31565b50909695505050505050565b8015158114611b6557600080fd5b60008060408385031215611e7a57600080fd5b8235611e8581611c38565b91506020830135611e9581611e59565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611ecc57600080fd5b8435611ed781611c38565b93506020850135611ee781611c38565b925060408501359150606085013567ffffffffffffffff80821115611f0b57600080fd5b818701915087601f830112611f1f57600080fd5b813581811115611f3157611f31611ea0565b604051601f8201601f19908116603f01168101908382118183101715611f5957611f59611ea0565b816040528281528a6020848701011115611f7257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080600060408486031215611fab57600080fd5b83359250602084013567ffffffffffffffff811115611fc957600080fd5b611fd586828701611cba565b9497909650939450505050565b60008060408385031215611ff557600080fd5b823561200081611c38565b91506020830135611e9581611c38565b6000806040838503121561202357600080fd5b50508035926020909101359150565b60006020828403121561204457600080fd5b815161182b81611c38565b60006020828403121561206157600080fd5b815161182b81611e59565b6000835161207e818460208801611bcd565b835190830190612092818360208801611bcd565b01949350505050565b60008135610c1e81611c38565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160601b0381168114611b6557600080fd5b81358155602082013560018201556040820135600282015560038101606083013561210781611c38565b61211181836120a8565b506080830135612120816120c8565b81546001600160a01b031660a09190911b6001600160a01b0319161790555050565b60006020828403121561215457600080fd5b813561182b816120c8565b602080825260199082015278435849503a20696e646578206f7574206f6620626f756e647360381b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526019908201527821ac24a81d103737ba1030b8383937bb32b21039b2b73232b960391b604082015260600190565b60208082526019908201527821ac24a81d1031b0b63632b9103737ba1030b71037bbb732b960391b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156122375761223761220e565b500190565b600081356001600160a81b031981168114610c1e57600080fd5b600081356001600160901b031981168114610c1e57600080fd5b81358155602082013560018201556040820135600282015560038101606083013560ff81168082146122a157600080fd5b825460ff191617909155506122c46122bb6080840161209b565b600483016120a8565b60a082013560058201556122fc6122dd60c0840161223c565b600683018160a81c6affffffffffffffffffffff198254161781555050565b60e08201356007820155610d436123166101008401612256565b6008830180546001600160701b03191660909290921c919091179055565b60008351612346818460208801611bcd565b602f60f81b9083019081528351612364816001840160208801611bcd565b01600101949350505050565b7468747470733a2f2f637869702e6465762f6e66742f60581b8152600082516123a0816015850160208701611bcd565b9190910160150192915050565b8183823760009101908152919050565b6000602082840312156123cf57600080fd5b5051919050565b60e09190911b6001600160e01b031916815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061242190830184611bf9565b9695505050505050565b60006020828403121561243d57600080fd5b815161182b81611b81565b7468747470733a2f2f6e66742e637869702e6465762f60581b815260008251612478816015850160208701611bcd565b602f60f81b6015939091019283015250601601919050565b60006000198214156124a4576124a461220e565b5060010190565b6000828210156124bd576124bd61220e565b500390565b6000816124d1576124d161220e565b506000190190565b634e487b7160e01b600052600160045260246000fd5b60008160001904831182151516156125095761250961220e565b50029056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122076de3b2bcd11e4ae473741106b11a7e475d6bcd349531c74871d976be12d198e64736f6c634300080c0033",
  "devdoc": {
    "author": "CXIP-Labs",
    "details": "The entire logic and functionality of the smart contract is self-contained.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emits event that informs of address approving a third-party operator for a particular token.",
        "params": {
          "operator": "Address of the third-party operator approved for interaction.",
          "tokenId": "A specific token id that is being authorised to operator.",
          "wallet": "Address of the wallet configuring a token operator."
        }
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emits event that informs of address approving/denying a third-party operator.",
        "params": {
          "approved": "A boolean indicating whether approval was granted or revoked.",
          "operator": "Address of the third-party operator that interacts on behalf of the wallet.",
          "wallet": "Address of the wallet configuring it's operator."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.",
        "params": {
          "from": "Address from where token is being transfered.",
          "to": "Address to where token is being transfered.",
          "tokenId": "Token id that is being minted, Transfered, or burned."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Requires the sender to be in the approved addresses.",
        "params": {
          "to": "The address to approve.",
          "tokenId": "The affected token."
        }
      },
      "arweaveURI(uint256)": {
        "details": "Concatenates 2 sections of the arweave URI.",
        "params": {
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "string The URI."
        }
      },
      "balanceOf(address)": {
        "details": "Used to see total amount of tokens owned by a specific wallet.",
        "params": {
          "wallet": "Address for which to get token balance."
        },
        "returns": {
          "_0": "uint256 Returns an integer, representing total amount of tokens held by address."
        }
      },
      "baseURI()": {
        "details": "Concatenates with the CXIP domain name.",
        "returns": {
          "_0": "string the token URI."
        }
      },
      "burn(uint256)": {
        "details": "The sender must be the owner or approved.",
        "params": {
          "tokenId": "The token to burn."
        }
      },
      "constructor": {
        "details": "To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \"init\" function instead."
      },
      "contractURI()": {
        "details": "Concatenates to https://nft.cxip.dev/.",
        "returns": {
          "_0": "string The URI."
        }
      },
      "creator(uint256)": {
        "details": "If the token Id doesn't exist it will return zero address.",
        "params": {
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "address Creator's address."
        }
      },
      "cxipMint(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))": {
        "details": "Includes event with the Arwave token URI.",
        "params": {
          "id": "The new tokenId.",
          "tokenData": "The token data for the NFT."
        },
        "returns": {
          "_0": "uint256 The new tokenId."
        }
      },
      "getApproved(uint256)": {
        "details": "Single operator set for a specific token. Usually used for one-time very specific authorisations.",
        "params": {
          "tokenId": "Token id to get approved operator for."
        },
        "returns": {
          "_0": "address Approved address for token."
        }
      },
      "httpURI(uint256)": {
        "details": "Concatenates to the baseURI.",
        "returns": {
          "_0": "string The URI."
        }
      },
      "init(address,(bytes32,bytes32,bytes32,address,uint96))": {
        "details": "Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.",
        "params": {
          "collectionData": "The collection data.",
          "newOwner": "The owner of the collection."
        }
      },
      "ipfsURI(uint256)": {
        "details": "Concatenates to the IPFS domain.",
        "params": {
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "string The URI."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Includes references to OpenSea and Rarible marketplace proxies.",
        "params": {
          "operator": "Address of the marketplace operator.",
          "wallet": "Address of the wallet."
        },
        "returns": {
          "_0": "bool True if approved."
        }
      },
      "isOwner()": {
        "details": "The owner could also be the admin or identity contract of the owner.",
        "returns": {
          "_0": "bool True if owner."
        }
      },
      "isOwner(address)": {
        "details": "The owner could also be the admin or identity contract of the owner.",
        "returns": {
          "_0": "bool True if owner."
        }
      },
      "name()": {
        "details": "Uses two names to extend the max length of the collection name in bytes",
        "returns": {
          "_0": "string The collection name."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "We have this blank function in place to make sure that external contract sending in NFTs don't error out.Since it's not being used, the _operator variable is commented out to avoid compiler warnings.Since it's not being used, the _from variable is commented out to avoid compiler warnings.Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.Since it's not being used, the _data variable is commented out to avoid compiler warnings.",
        "returns": {
          "_0": "bytes4 Returns the interfaceId of onERC721Received."
        }
      },
      "owner()": {
        "details": "_owner is first set in init.",
        "returns": {
          "_0": "address Of ower."
        }
      },
      "ownerOf(uint256)": {
        "details": "The token must exist.",
        "params": {
          "tokenId": "The token to look up."
        },
        "returns": {
          "_0": "address Owner of the token."
        }
      },
      "payloadHash(uint256)": {
        "details": "Payload is used for verification.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "bytes32 The hash."
        }
      },
      "payloadSignature(uint256)": {
        "details": "Used for signature verification.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "Verification a struct containing v, r, s values of the signature."
        }
      },
      "payloadSigner(uint256)": {
        "details": "The creator signs a payload while creating the NFT.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "address The creator."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must exist and be owned by `from`."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must exist and be owned by `from`."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.",
        "params": {
          "approved": "Turn on or off approval status.",
          "to": "The address to approve."
        }
      },
      "setName(bytes32,bytes32)": {
        "details": "The name is split in two for gas optimization.",
        "params": {
          "newName": "First part of name.",
          "newName2": "Second part of name."
        }
      },
      "setSymbol(bytes32)": {
        "details": "This is the ticker symbol for smart contract that shows up on EtherScan.",
        "params": {
          "newSymbol": "The ticker symbol to set for smart contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Must add new 4 byte interface Ids here to acknowledge support",
        "params": {
          "interfaceId": "ERC165 style 4 byte interfaceId."
        },
        "returns": {
          "_0": "bool True if supported."
        }
      },
      "symbol()": {
        "details": "Trims the symbol.",
        "returns": {
          "_0": "string The symbol."
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Helpful for token enumeration where token id info is not yet available.",
        "params": {
          "index": "Index of token in array."
        },
        "returns": {
          "_0": "uint256 Returns the token id of token located at that index."
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.",
        "params": {
          "index": "Index of token in array.",
          "wallet": "Specific address for which to get token for."
        },
        "returns": {
          "_0": "uint256 Returns the token id of token located at that index in specified wallet."
        }
      },
      "tokenURI(uint256)": {
        "details": "Defaults the the Arweave URI",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "string The URI."
        }
      },
      "tokensOfOwner(address)": {
        "params": {
          "wallet": "The wallet address to get tokens for."
        },
        "returns": {
          "_0": "uint256[] Returns an array of token ids owned by wallet."
        }
      },
      "totalSupply()": {
        "details": "Ignores burned tokens.",
        "returns": {
          "_0": "uint256 Returns the total number of active (not burned) tokens."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must be owned by `from`."
        }
      },
      "transferFrom(address,address,uint256,bytes)": {
        "details": "WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.Since it's not being used, the _data variable is commented out to avoid compiler warnings.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must be owned by `from`."
        }
      },
      "verifySHA256(bytes32,bytes)": {
        "details": "Uses sha256 instead of keccak.",
        "params": {
          "hash": "The hash to check.",
          "payload": "The payload prehashed."
        },
        "returns": {
          "_0": "bool True if the hashes match."
        }
      }
    },
    "stateVariables": {
      "_admin": {
        "details": "Address of admin user. Primarily used as an additional recover address."
      },
      "_allTokens": {
        "details": "Array of all token ids in collection."
      },
      "_collectionData": {
        "details": "Stores default collection data: name, symbol, and royalties."
      },
      "_currentTokenId": {
        "details": "Internal last minted token id, to allow for auto-increment."
      },
      "_operatorApprovals": {
        "details": "Usually utilised for supporting marketplace proxy wallets."
      },
      "_ownedTokens": {
        "details": "Map of array of token ids owned by a specific address."
      },
      "_ownedTokensCount": {
        "details": "Map of total tokens owner by a specific address."
      },
      "_ownedTokensIndex": {
        "details": "Map of token id to array index of _ownedTokens."
      },
      "_owner": {
        "details": "Address of contract owner. This address can run all onlyOwner functions."
      },
      "_tokenApprovals": {
        "details": "1-to-1 map of token id that was assigned an approved operator address."
      },
      "_tokenData": {
        "details": "Token data mapped by token id."
      },
      "_tokenOwner": {
        "details": "Token id to wallet (owner) address map."
      },
      "_totalTokens": {
        "details": "Simple tracker of all minted (not-burned) tokens."
      }
    },
    "title": "CXIP ERC721",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "Event emitted when an address delegates power, for a token, to another address."
      },
      "ApprovalForAll(address,address,bool)": {
        "notice": "Event emitted when an address authorises an operator (third-party)."
      },
      "Transfer(address,address,uint256)": {
        "notice": "Event emitted when an token is minted, transfered, or burned."
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Adds a new address to the token's approval list."
      },
      "arweaveURI(uint256)": {
        "notice": "Gets the URI of the NFT on Arweave."
      },
      "balanceOf(address)": {
        "notice": "Get total number of tokens owned by wallet."
      },
      "baseURI()": {
        "notice": "Get a base URI for the token."
      },
      "burn(uint256)": {
        "notice": "Burns the token."
      },
      "constructor": {
        "notice": "Constructor is empty and not utilised."
      },
      "contractURI()": {
        "notice": "Gets the URI of the NFT backup from CXIP."
      },
      "creator(uint256)": {
        "notice": "Gets the creator's address."
      },
      "cxipMint(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))": {
        "notice": "Mints and NFT."
      },
      "getApproved(uint256)": {
        "notice": "Gets the approved address for the token."
      },
      "httpURI(uint256)": {
        "notice": "Gets the HTTP URI of the token."
      },
      "init(address,(bytes32,bytes32,bytes32,address,uint96))": {
        "notice": "Initializes the collection."
      },
      "ipfsURI(uint256)": {
        "notice": "Gets the IPFS URI"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Checks if the address is approved."
      },
      "isOwner()": {
        "notice": "Check if the sender is the owner."
      },
      "isOwner(address)": {
        "notice": "Check if the address is the owner."
      },
      "name()": {
        "notice": "Gets the name of the collection."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Empty function that is triggered by external contract on NFT transfer."
      },
      "owner()": {
        "notice": "Gets the owner's address."
      },
      "ownerOf(uint256)": {
        "notice": "Checks who the owner of a token is."
      },
      "payloadHash(uint256)": {
        "notice": "Gets the hash of the NFT data used to create it."
      },
      "payloadSignature(uint256)": {
        "notice": "Gets the signature of the signed NFT data used to create it."
      },
      "payloadSigner(uint256)": {
        "notice": "Gets the address of the creator."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Adds a new approved operator."
      },
      "setName(bytes32,bytes32)": {
        "notice": "Sets a name for the collection."
      },
      "setSymbol(bytes32)": {
        "notice": "Set a symbol for the collection."
      },
      "supportsInterface(bytes4)": {
        "notice": "Shows the interfaces the contracts support"
      },
      "symbol()": {
        "notice": "Gets the collection's symbol."
      },
      "tokenByIndex(uint256)": {
        "notice": "Get token by index instead of token id."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Get token from wallet by index instead of token id."
      },
      "tokenURI(uint256)": {
        "notice": "Get's the URI of the token."
      },
      "tokensOfOwner(address)": {
        "notice": "Get list of tokens owned by wallet."
      },
      "totalSupply()": {
        "notice": "Total amount of tokens in the collection."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers `tokenId` token from `from` to `to`."
      },
      "transferFrom(address,address,uint256,bytes)": {
        "notice": "Transfers `tokenId` token from `from` to `to`."
      },
      "verifySHA256(bytes32,bytes)": {
        "notice": "Checks if a given hash matches a payload hash."
      }
    },
    "notice": "A smart contract for minting and managing ERC721 NFTs.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_collectionData",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(CollectionData)5168_storage"
      },
      {
        "astId": 21,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_currentTokenId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_allTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 30,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 35,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_tokenOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 40,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_ownedTokensCount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 51,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 58,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 64,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_tokenData",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(TokenData)5239_storage)"
      },
      {
        "astId": 67,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_admin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 70,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_totalTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes11": {
        "encoding": "inplace",
        "label": "bytes11",
        "numberOfBytes": "11"
      },
      "t_bytes14": {
        "encoding": "inplace",
        "label": "bytes14",
        "numberOfBytes": "14"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)5239_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)5239_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CollectionData)5168_storage": {
        "encoding": "inplace",
        "label": "struct CollectionData",
        "members": [
          {
            "astId": 5159,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5161,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "name2",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5163,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "symbol",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 5165,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "royalties",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5167,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "bps",
            "offset": 20,
            "slot": "3",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenData)5239_storage": {
        "encoding": "inplace",
        "label": "struct TokenData",
        "members": [
          {
            "astId": 5225,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "payloadHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5228,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "payloadSignature",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Verification)5254_storage"
          },
          {
            "astId": 5230,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5232,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "arweave",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 5234,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "arweave2",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes11"
          },
          {
            "astId": 5236,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "ipfs",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 5238,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "ipfs2",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes14"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Verification)5254_storage": {
        "encoding": "inplace",
        "label": "struct Verification",
        "members": [
          {
            "astId": 5249,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "r",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5251,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "s",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5253,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "v",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}