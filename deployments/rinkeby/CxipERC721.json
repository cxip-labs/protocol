{
  "address": "0xcd414C01c5E182b563f654F8323b2CEE18524981",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "arweaveURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "payloadHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Verification",
              "name": "payloadSignature",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "arweave",
              "type": "bytes32"
            },
            {
              "internalType": "bytes11",
              "name": "arweave2",
              "type": "bytes11"
            },
            {
              "internalType": "bytes32",
              "name": "ipfs",
              "type": "bytes32"
            },
            {
              "internalType": "bytes14",
              "name": "ipfs2",
              "type": "bytes14"
            }
          ],
          "internalType": "struct TokenData",
          "name": "tokenData",
          "type": "tuple"
        }
      ],
      "name": "cxipMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdentity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "httpURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name2",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "symbol",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "royalties",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "bps",
              "type": "uint96"
            }
          ],
          "internalType": "struct CollectionData",
          "name": "collectionData",
          "type": "tuple"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ipfsURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadSignature",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "newName2",
          "type": "bytes32"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newSymbol",
          "type": "bytes32"
        }
      ],
      "name": "setSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "verifySHA256",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x15f8b2defa006368eefc3c5650d7187c6831090cef6593afc7daeb9198e57261",
  "receipt": {
    "to": null,
    "from": "0x9E22aA58Bf2F5E60801b90FDD3b51B65d38eA20b",
    "contractAddress": "0xcd414C01c5E182b563f654F8323b2CEE18524981",
    "transactionIndex": 6,
    "gasUsed": "2133185",
    "logsBloom": "0x
    "blockHash": "0x57332ff8c349533ca0574ead13c6663ff7a280a9e0abc8b7de08b19e651d67f8",
    "transactionHash": "0x15f8b2defa006368eefc3c5650d7187c6831090cef6593afc7daeb9198e57261",
    "logs": [],
    "blockNumber": 10533247,
    "cumulativeGasUsed": "2793306",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e0ef7620f017a1d2ec7d904f481b4614",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"arweaveURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"payloadSignature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"arweave\",\"type\":\"bytes32\"},{\"internalType\":\"bytes11\",\"name\":\"arweave2\",\"type\":\"bytes11\"},{\"internalType\":\"bytes32\",\"name\":\"ipfs\",\"type\":\"bytes32\"},{\"internalType\":\"bytes14\",\"name\":\"ipfs2\",\"type\":\"bytes14\"}],\"internalType\":\"struct TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"name\":\"cxipMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"httpURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"royalties\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"internalType\":\"struct CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ipfsURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadSignature\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newName2\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newSymbol\",\"type\":\"bytes32\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"verifySHA256\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"CXIP-Labs\",\"details\":\"The entire logic and functionality of the smart contract is self-contained.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emits event that informs of address approving a third-party operator for a particular token.\",\"params\":{\"operator\":\"Address of the third-party operator approved for interaction.\",\"tokenId\":\"A specific token id that is being authorised to operator.\",\"wallet\":\"Address of the wallet configuring a token operator.\"}},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emits event that informs of address approving/denying a third-party operator.\",\"params\":{\"approved\":\"A boolean indicating whether approval was granted or revoked.\",\"operator\":\"Address of the third-party operator that interacts on behalf of the wallet.\",\"wallet\":\"Address of the wallet configuring it's operator.\"}},\"PermanentURI(string,uint256)\":{\"details\":\"Even though OpenSea advertises support for this, they do not listen to this event, and do not respond to it.\",\"params\":{\"id\":\"Token id of the NFT.\",\"uri\":\"The permanent/static URL of the NFT. Cannot ever be changed again.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.\",\"params\":{\"from\":\"Address from where token is being transfered.\",\"to\":\"Address to where token is being transfered.\",\"tokenId\":\"Token id that is being minted, Transfered, or burned.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Requires the sender to be in the approved addresses.\",\"params\":{\"to\":\"The address to approve.\",\"tokenId\":\"The affected token.\"}},\"arweaveURI(uint256)\":{\"details\":\"Concatenates 2 sections of the arweave URI.\",\"params\":{\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"string The URI.\"}},\"balanceOf(address)\":{\"details\":\"Used to see total amount of tokens owned by a specific wallet.\",\"params\":{\"wallet\":\"Address for which to get token balance.\"},\"returns\":{\"_0\":\"uint256 Returns an integer, representing total amount of tokens held by address.\"}},\"baseURI()\":{\"details\":\"Concatenates with the CXIP domain name.\",\"returns\":{\"_0\":\"string the token URI.\"}},\"burn(uint256)\":{\"details\":\"The sender must be the owner or approved.\",\"params\":{\"tokenId\":\"The token to burn.\"}},\"constructor\":{\"details\":\"To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \\\"init\\\" function instead.\"},\"contractURI()\":{\"details\":\"Concatenates to https://nft.cxip.dev/.\",\"returns\":{\"_0\":\"string The URI.\"}},\"creator(uint256)\":{\"details\":\"If the token Id doesn't exist it will return zero address.\",\"params\":{\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"address Creator's address.\"}},\"cxipMint(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))\":{\"details\":\"Includes event with the Arwave token URI.\",\"params\":{\"id\":\"The new tokenId.\",\"tokenData\":\"The token data for the NFT.\"},\"returns\":{\"_0\":\"uint256 The new tokenId.\"}},\"getApproved(uint256)\":{\"details\":\"Single operator set for a specific token. Usually used for one-time very specific authorisations.\",\"params\":{\"tokenId\":\"Token id to get approved operator for.\"},\"returns\":{\"_0\":\"address Approved address for token.\"}},\"getIdentity()\":{\"details\":\"Goes up the chain to read from the registry.\",\"returns\":{\"_0\":\"address Identity contract address.\"}},\"httpURI(uint256)\":{\"details\":\"Concatenates to the baseURI.\",\"returns\":{\"_0\":\"string The URI.\"}},\"init(address,(bytes32,bytes32,bytes32,address,uint96))\":{\"details\":\"Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.\",\"params\":{\"collectionData\":\"The collection data.\",\"newOwner\":\"The owner of the collection.\"}},\"ipfsURI(uint256)\":{\"details\":\"Concatenates to the IPFS domain.\",\"params\":{\"tokenId\":\"Id of the token.\"},\"returns\":{\"_0\":\"string The URI.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Includes references to OpenSea and Rarible marketplace proxies.\",\"params\":{\"operator\":\"Address of the marketplace operator.\",\"wallet\":\"Address of the wallet.\"},\"returns\":{\"_0\":\"bool True if approved.\"}},\"isOwner()\":{\"details\":\"The owner could also be the admin or identity contract of the owner.\",\"returns\":{\"_0\":\"bool True if owner.\"}},\"name()\":{\"details\":\"Uses two names to extend the max length of the collection name in bytes\",\"returns\":{\"_0\":\"string The collection name.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"We have this blank function in place to make sure that external contract sending in NFTs don't error out.Since it's not being used, the _operator variable is commented out to avoid compiler warnings.Since it's not being used, the _from variable is commented out to avoid compiler warnings.Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.Since it's not being used, the _data variable is commented out to avoid compiler warnings.\",\"returns\":{\"_0\":\"bytes4 Returns the interfaceId of onERC721Received.\"}},\"owner()\":{\"details\":\"_owner is first set in init.\",\"returns\":{\"_0\":\"address Of ower.\"}},\"ownerOf(uint256)\":{\"details\":\"The token must exist.\",\"params\":{\"tokenId\":\"The token to look up.\"},\"returns\":{\"_0\":\"address Owner of the token.\"}},\"payloadHash(uint256)\":{\"details\":\"Payload is used for verification.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"bytes32 The hash.\"}},\"payloadSignature(uint256)\":{\"details\":\"Used for signature verification.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"Verification a struct containing v, r, s values of the signature.\"}},\"payloadSigner(uint256)\":{\"details\":\"The creator signs a payload while creating the NFT.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"address The creator.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must exist and be owned by `from`.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Since it's not being used, the _data variable is commented out to avoid compiler warnings. are aware of the ERC721 protocol to prevent tokens from being forever locked.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must exist and be owned by `from`.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.\",\"params\":{\"approved\":\"Turn on or off approval status.\",\"to\":\"The address to approve.\"}},\"setName(bytes32,bytes32)\":{\"details\":\"The name is split in two for gas optimization.\",\"params\":{\"newName\":\"First part of name.\",\"newName2\":\"Second part of name.\"}},\"setSymbol(bytes32)\":{\"details\":\"This is the ticker symbol for smart contract that shows up on EtherScan.\",\"params\":{\"newSymbol\":\"The ticker symbol to set for smart contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Must add new 4 byte interface Ids here to acknowledge support\",\"params\":{\"interfaceId\":\"ERC165 style 4 byte interfaceId.\"},\"returns\":{\"_0\":\"bool True if supported.\"}},\"symbol()\":{\"details\":\"Trims the symbol.\",\"returns\":{\"_0\":\"string The symbol.\"}},\"tokenByIndex(uint256)\":{\"details\":\"Helpful for token enumeration where token id info is not yet available.\",\"params\":{\"index\":\"Index of token in array.\"},\"returns\":{\"_0\":\"uint256 Returns the token id of token located at that index.\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.\",\"params\":{\"index\":\"Index of token in array.\",\"wallet\":\"Specific address for which to get token for.\"},\"returns\":{\"_0\":\"uint256 Returns the token id of token located at that index in specified wallet.\"}},\"tokenURI(uint256)\":{\"details\":\"Defaults the the Arweave URI\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"string The URI.\"}},\"tokensOfOwner(address)\":{\"params\":{\"wallet\":\"The wallet address to get tokens for.\"},\"returns\":{\"_0\":\"uint256[] Returns an array of token ids owned by wallet.\"}},\"totalSupply()\":{\"details\":\"Ignores burned tokens.\",\"returns\":{\"_0\":\"uint256 Returns the total number of active (not burned) tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must be owned by `from`.\"}},\"transferFrom(address,address,uint256,bytes)\":{\"details\":\"WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.Since it's not being used, the _data variable is commented out to avoid compiler warnings.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must be owned by `from`.\"}},\"transferOwnership(address)\":{\"details\":\"Can't be the zero address.\",\"params\":{\"newOwner\":\"Address of new owner.\"}},\"verifySHA256(bytes32,bytes)\":{\"details\":\"Uses sha256 instead of keccak.\",\"params\":{\"hash\":\"The hash to check.\",\"payload\":\"The payload prehashed.\"},\"returns\":{\"_0\":\"bool True if the hashes match.\"}}},\"stateVariables\":{\"_admin\":{\"details\":\"Address of admin user. Primarily used as an additional recover address.\"},\"_allTokens\":{\"details\":\"Array of all token ids in collection.\"},\"_collectionData\":{\"details\":\"Stores default collection data: name, symbol, and royalties.\"},\"_currentTokenId\":{\"details\":\"Internal last minted token id, to allow for auto-increment.\"},\"_operatorApprovals\":{\"details\":\"Usually utilised for supporting marketplace proxy wallets.\"},\"_ownedTokens\":{\"details\":\"Map of array of token ids owned by a specific address.\"},\"_ownedTokensCount\":{\"details\":\"Map of total tokens owner by a specific address.\"},\"_ownedTokensIndex\":{\"details\":\"Map of token id to array index of _ownedTokens.\"},\"_owner\":{\"details\":\"Address of contract owner. This address can run all onlyOwner functions.\"},\"_tokenApprovals\":{\"details\":\"1-to-1 map of token id that was assigned an approved operator address.\"},\"_tokenData\":{\"details\":\"Token data mapped by token id.\"},\"_tokenOwner\":{\"details\":\"Token id to wallet (owner) address map.\"},\"_totalTokens\":{\"details\":\"Simple tracker of all minted (not-burned) tokens.\"}},\"title\":\"CXIP ERC721\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Event emitted when an address delegates power, for a token, to another address.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Event emitted when an address authorises an operator (third-party).\"},\"PermanentURI(string,uint256)\":{\"notice\":\"Event emitted to signal to OpenSea that a permanent URI was created.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Event emitted when an token is minted, transfered, or burned.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Adds a new address to the token's approval list.\"},\"arweaveURI(uint256)\":{\"notice\":\"Gets the URI of the NFT on Arweave.\"},\"balanceOf(address)\":{\"notice\":\"Get total number of tokens owned by wallet.\"},\"baseURI()\":{\"notice\":\"Get a base URI for the token.\"},\"burn(uint256)\":{\"notice\":\"Burns the token.\"},\"constructor\":{\"notice\":\"Constructor is empty and not utilised.\"},\"contractURI()\":{\"notice\":\"Gets the URI of the NFT backup from CXIP.\"},\"creator(uint256)\":{\"notice\":\"Gets the creator's address.\"},\"cxipMint(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))\":{\"notice\":\"Mints and NFT.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for the token.\"},\"getIdentity()\":{\"notice\":\"Get the associated identity for the collection.\"},\"httpURI(uint256)\":{\"notice\":\"Gets the HTTP URI of the token.\"},\"init(address,(bytes32,bytes32,bytes32,address,uint96))\":{\"notice\":\"Initializes the collection.\"},\"ipfsURI(uint256)\":{\"notice\":\"Gets the IPFS URI\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Checks if the address is approved.\"},\"isOwner()\":{\"notice\":\"Check if the sender is the owner.\"},\"name()\":{\"notice\":\"Gets the name of the collection.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Empty function that is triggered by external contract on NFT transfer.\"},\"owner()\":{\"notice\":\"Gets the owner's address.\"},\"ownerOf(uint256)\":{\"notice\":\"Checks who the owner of a token is.\"},\"payloadHash(uint256)\":{\"notice\":\"Gets the hash of the NFT data used to create it.\"},\"payloadSignature(uint256)\":{\"notice\":\"Gets the signature of the signed NFT data used to create it.\"},\"payloadSigner(uint256)\":{\"notice\":\"Gets the address of the creator.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Adds a new approved operator.\"},\"setName(bytes32,bytes32)\":{\"notice\":\"Sets a name for the collection.\"},\"setSymbol(bytes32)\":{\"notice\":\"Set a symbol for the collection.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Shows the interfaces the contracts support\"},\"symbol()\":{\"notice\":\"Gets the collection's symbol.\"},\"tokenByIndex(uint256)\":{\"notice\":\"Get token by index instead of token id.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Get token from wallet by index instead of token id.\"},\"tokenURI(uint256)\":{\"notice\":\"Get's the URI of the token.\"},\"tokensOfOwner(address)\":{\"notice\":\"Get list of tokens owned by wallet.\"},\"totalSupply()\":{\"notice\":\"Total amount of tokens in the collection.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `tokenId` token from `from` to `to`.\"},\"transferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers `tokenId` token from `from` to `to`.\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the collection.\"},\"verifySHA256(bytes32,bytes)\":{\"notice\":\"Checks if a given hash matches a payload hash.\"}},\"notice\":\"A smart contract for minting and managing ERC721 NFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CxipERC721.sol\":\"CxipERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/CxipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./external/OpenSea.sol\\\";\\nimport \\\"./interface/ICxipERC721.sol\\\";\\nimport \\\"./interface/ICxipIdentity.sol\\\";\\nimport \\\"./interface/ICxipProvenance.sol\\\";\\nimport \\\"./interface/ICxipRegistry.sol\\\";\\nimport \\\"./interface/IPA1D.sol\\\";\\nimport \\\"./library/Address.sol\\\";\\nimport \\\"./library/Bytes.sol\\\";\\nimport \\\"./library/Strings.sol\\\";\\nimport \\\"./struct/CollectionData.sol\\\";\\nimport \\\"./struct/TokenData.sol\\\";\\nimport \\\"./struct/Verification.sol\\\";\\n\\n/**\\n * @title CXIP ERC721\\n * @author CXIP-Labs\\n * @notice A smart contract for minting and managing ERC721 NFTs.\\n * @dev The entire logic and functionality of the smart contract is self-contained.\\n */\\ncontract CxipERC721 {\\n    /**\\n     * @dev Stores default collection data: name, symbol, and royalties.\\n     */\\n    CollectionData private _collectionData;\\n\\n    /**\\n     * @dev Internal last minted token id, to allow for auto-increment.\\n     */\\n    uint256 private _currentTokenId;\\n\\n    /**\\n     * @dev Array of all token ids in collection.\\n     */\\n    uint256[] private _allTokens;\\n\\n    /**\\n     * @dev Map of token id to array index of _ownedTokens.\\n     */\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    /**\\n     * @dev Token id to wallet (owner) address map.\\n     */\\n    mapping(uint256 => address) private _tokenOwner;\\n\\n    /**\\n     * @dev 1-to-1 map of token id that was assigned an approved operator address.\\n     */\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    /**\\n     * @dev Map of total tokens owner by a specific address.\\n     */\\n    mapping(address => uint256) private _ownedTokensCount;\\n\\n    /**\\n     * @dev Map of array of token ids owned by a specific address.\\n     */\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    /**\\n     * @notice Map of full operator approval for a particular address.\\n     * @dev Usually utilised for supporting marketplace proxy wallets.\\n     */\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Token data mapped by token id.\\n     */\\n    mapping(uint256 => TokenData) private _tokenData;\\n\\n    /**\\n     * @dev Address of admin user. Primarily used as an additional recover address.\\n     */\\n    address private _admin;\\n\\n    /**\\n     * @dev Address of contract owner. This address can run all onlyOwner functions.\\n     */\\n    address private _owner;\\n\\n    /**\\n     * @dev Simple tracker of all minted (not-burned) tokens.\\n     */\\n    uint256 private _totalTokens;\\n\\n    /**\\n     * @notice Event emitted when an token is minted, transfered, or burned.\\n     * @dev If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.\\n     * @param from Address from where token is being transfered.\\n     * @param to Address to where token is being transfered.\\n     * @param tokenId Token id that is being minted, Transfered, or burned.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Event emitted when an address delegates power, for a token, to another address.\\n     * @dev Emits event that informs of address approving a third-party operator for a particular token.\\n     * @param wallet Address of the wallet configuring a token operator.\\n     * @param operator Address of the third-party operator approved for interaction.\\n     * @param tokenId A specific token id that is being authorised to operator.\\n     */\\n    event Approval(address indexed wallet, address indexed operator, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Event emitted when an address authorises an operator (third-party).\\n     * @dev Emits event that informs of address approving/denying a third-party operator.\\n     * @param wallet Address of the wallet configuring it's operator.\\n     * @param operator Address of the third-party operator that interacts on behalf of the wallet.\\n     * @param approved A boolean indicating whether approval was granted or revoked.\\n     */\\n    event ApprovalForAll(address indexed wallet, address indexed operator, bool approved);\\n\\n    /**\\n     * @notice Event emitted to signal to OpenSea that a permanent URI was created.\\n     * @dev Even though OpenSea advertises support for this, they do not listen to this event, and do not respond to it.\\n     * @param uri The permanent/static URL of the NFT. Cannot ever be changed again.\\n     * @param id Token id of the NFT.\\n     */\\n    event PermanentURI(string uri, uint256 indexed id);\\n\\n    /**\\n     * @notice Constructor is empty and not utilised.\\n     * @dev To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \\\"init\\\" function instead.\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"CXIP: caller not an owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enables royaltiy functionality at the ERC721 level when ether is sent with no calldata.\\n     * @dev See implementation of _royaltiesFallback.\\n     */\\n    receive() external payable {\\n        _royaltiesFallback();\\n    }\\n\\n    /**\\n     * @notice Enables royaltiy functionality at the ERC721 level no other function matches the call.\\n     * @dev See implementation of _royaltiesFallback.\\n     */\\n    fallback() external {\\n        _royaltiesFallback();\\n    }\\n\\n    /**\\n     * @notice Gets the URI of the NFT on Arweave.\\n     * @dev Concatenates 2 sections of the arweave URI.\\n     * @param tokenId Id of the token.\\n     * @return string The URI.\\n     */\\n    function arweaveURI(uint256 tokenId) external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://arweave.cxip.dev/\\\",\\n                    _tokenData[tokenId].arweave,\\n                    _tokenData[tokenId].arweave2\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the URI of the NFT backup from CXIP.\\n     * @dev Concatenates to https://nft.cxip.dev/.\\n     * @return string The URI.\\n     */\\n    function contractURI() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\\"https://nft.cxip.dev/\\\", Strings.toHexString(address(this)), \\\"/\\\")\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the creator's address.\\n     * @dev If the token Id doesn't exist it will return zero address.\\n     * @param tokenId Id of the token.\\n     * @return address Creator's address.\\n     */\\n    function creator(uint256 tokenId) external view returns (address) {\\n        return _tokenData[tokenId].creator;\\n    }\\n\\n    /**\\n     * @notice Gets the HTTP URI of the token.\\n     * @dev Concatenates to the baseURI.\\n     * @return string The URI.\\n     */\\n    function httpURI(uint256 tokenId) external view returns (string memory) {\\n        return string(abi.encodePacked(baseURI(), \\\"/\\\", Strings.toHexString(tokenId)));\\n    }\\n\\n    /**\\n     * @notice Gets the IPFS URI\\n     * @dev Concatenates to the IPFS domain.\\n     * @param tokenId Id of the token.\\n     * @return string The URI.\\n     */\\n    function ipfsURI(uint256 tokenId) external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://ipfs.cxip.dev/\\\",\\n                    _tokenData[tokenId].ipfs,\\n                    _tokenData[tokenId].ipfs2\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the name of the collection.\\n     * @dev Uses two names to extend the max length of the collection name in bytes\\n     * @return string The collection name.\\n     */\\n    function name() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Bytes.trim(_collectionData.name),\\n                    Bytes.trim(_collectionData.name2)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the hash of the NFT data used to create it.\\n     * @dev Payload is used for verification.\\n     * @param tokenId The Id of the token.\\n     * @return bytes32 The hash.\\n     */\\n    function payloadHash(uint256 tokenId) external view returns (bytes32) {\\n        return _tokenData[tokenId].payloadHash;\\n    }\\n\\n    /**\\n     * @notice Gets the signature of the signed NFT data used to create it.\\n     * @dev Used for signature verification.\\n     * @param tokenId The Id of the token.\\n     * @return Verification a struct containing v, r, s values of the signature.\\n     */\\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory) {\\n        return _tokenData[tokenId].payloadSignature;\\n    }\\n\\n    /**\\n     * @notice Gets the address of the creator.\\n     * @dev The creator signs a payload while creating the NFT.\\n     * @param tokenId The Id of the token.\\n     * @return address The creator.\\n     */\\n    function payloadSigner(uint256 tokenId) external view returns (address) {\\n        return _tokenData[tokenId].creator;\\n    }\\n\\n    /**\\n     * @notice Shows the interfaces the contracts support\\n     * @dev Must add new 4 byte interface Ids here to acknowledge support\\n     * @param interfaceId ERC165 style 4 byte interfaceId.\\n     * @return bool True if supported.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        if (\\n            interfaceId == 0x01ffc9a7 || // ERC165\\n            interfaceId == 0x80ac58cd || // ERC721\\n            // || interfaceId == 0x780e9d63 // ERC721Enumerable\\n            interfaceId == 0x5b5e139f || // ERC721Metadata\\n            interfaceId == 0x150b7a02 || // ERC721TokenReceiver\\n            interfaceId == 0xe8a3d485 || // contractURI()\\n            IPA1D(getRegistry().getPA1D()).supportsInterface(interfaceId)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the collection's symbol.\\n     * @dev Trims the symbol.\\n     * @return string The symbol.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return string(Bytes.trim(_collectionData.symbol));\\n    }\\n\\n    /**\\n     * @notice Get's the URI of the token.\\n     * @dev Defaults the the Arweave URI\\n     * @param tokenId The Id of the token.\\n     * @return string The URI.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://arweave.cxip.dev/\\\",\\n                    _tokenData[tokenId].arweave,\\n                    _tokenData[tokenId].arweave2\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Get list of tokens owned by wallet.\\n     * @param wallet The wallet address to get tokens for.\\n     * @return uint256[] Returns an array of token ids owned by wallet.\\n     */\\n    function tokensOfOwner(address wallet) external view returns (uint256[] memory) {\\n        return _ownedTokens[wallet];\\n    }\\n\\n    /**\\n     * @notice Checks if a given hash matches a payload hash.\\n     * @dev Uses sha256 instead of keccak.\\n     * @param hash The hash to check.\\n     * @param payload The payload prehashed.\\n     * @return bool True if the hashes match.\\n     */\\n    function verifySHA256(bytes32 hash, bytes calldata payload) external pure returns (bool) {\\n        bytes32 thePayloadHash = sha256(payload);\\n        return hash == thePayloadHash;\\n    }\\n\\n    /**\\n     * @notice Adds a new address to the token's approval list.\\n     * @dev Requires the sender to be in the approved addresses.\\n     * @param to The address to approve.\\n     * @param tokenId The affected token.\\n     */\\n    function approve(address to, uint256 tokenId) public {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        if (to != tokenOwner && _isApproved(msg.sender, tokenId)) {\\n            _tokenApprovals[tokenId] = to;\\n            emit Approval(tokenOwner, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Burns the token.\\n     * @dev The sender must be the owner or approved.\\n     * @param tokenId The token to burn.\\n     */\\n    function burn(uint256 tokenId) public {\\n        if (_isApproved(msg.sender, tokenId)) {\\n            address wallet = _tokenOwner[tokenId];\\n            require(!Address.isZero(wallet));\\n            _clearApproval(tokenId);\\n            _tokenOwner[tokenId] = address(0);\\n            emit Transfer(wallet, address(0), tokenId);\\n            _removeTokenFromOwnerEnumeration(wallet, tokenId);\\n            uint256 index = _allTokens.length;\\n            index--;\\n            if (index == 0) {\\n                delete _allTokens;\\n            } else {\\n                delete _allTokens[index];\\n            }\\n            _totalTokens -= 1;\\n            delete _tokenData[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @notice Initializes the collection.\\n     * @dev Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.\\n     * @param newOwner The owner of the collection.\\n     * @param collectionData The collection data.\\n     */\\n    function init(address newOwner, CollectionData calldata collectionData) public {\\n        require(Address.isZero(_admin), \\\"CXIP: already initialized\\\");\\n        _admin = msg.sender;\\n        // temporary set to self, to pass rarible royalties logic trap\\n        _owner = address(this);\\n        _collectionData = collectionData;\\n        IPA1D(address(this)).init(0, payable(collectionData.royalties), collectionData.bps);\\n        // set to actual owner\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     * @param from cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must exist and be owned by `from`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     * @param from cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must exist and be owned by `from`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory /*_data*/\\n    ) public payable {\\n        if (_isApproved(msg.sender, tokenId)) {\\n            _transferFrom(from, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a new approved operator.\\n     * @dev Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.\\n     * @param to The address to approve.\\n     * @param approved Turn on or off approval status.\\n     */\\n    function setApprovalForAll(address to, bool approved) public {\\n        if (to != msg.sender) {\\n            _operatorApprovals[msg.sender][to] = approved;\\n            emit ApprovalForAll(msg.sender, to, approved);\\n        } else {\\n            assert(false);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers `tokenId` token from `from` to `to`.\\n     * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * @param from  cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must be owned by `from`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        transferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Transfers `tokenId` token from `from` to `to`.\\n     * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.\\n     * @param from  cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must be owned by `from`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory /*_data*/\\n    ) public payable {\\n        if (_isApproved(msg.sender, tokenId)) {\\n            _transferFrom(from, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Mints and NFT.\\n     * @dev Includes event with the Arwave token URI.\\n     * @param id The new tokenId.\\n     * @param tokenData The token data for the NFT.\\n     * @return uint256 The new tokenId.\\n     */\\n    function cxipMint(uint256 id, TokenData calldata tokenData) public onlyOwner returns (uint256) {\\n        if (id == 0) {\\n            _currentTokenId += 1;\\n            id = _currentTokenId;\\n        }\\n        _mint(tokenData.creator, id);\\n        _tokenData[id] = tokenData;\\n        emit PermanentURI(\\n            string(abi.encodePacked(\\\"https://arweave.cxip.dev/\\\", tokenData.arweave, tokenData.arweave2)),\\n            id\\n        );\\n        return id;\\n    }\\n\\n    /**\\n     * @notice Sets a name for the collection.\\n     * @dev The name is split in two for gas optimization.\\n     * @param newName First part of name.\\n     * @param newName2 Second part of name.\\n     */\\n    function setName(bytes32 newName, bytes32 newName2) public onlyOwner {\\n        _collectionData.name = newName;\\n        _collectionData.name2 = newName2;\\n    }\\n\\n    /**\\n     * @notice Set a symbol for the collection.\\n     * @dev This is the ticker symbol for smart contract that shows up on EtherScan.\\n     * @param newSymbol The ticker symbol to set for smart contract.\\n     */\\n    function setSymbol(bytes32 newSymbol) public onlyOwner {\\n        _collectionData.symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the collection.\\n     * @dev Can't be the zero address.\\n     * @param newOwner Address of new owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (!Address.isZero(newOwner)) {\\n            _owner = newOwner;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get total number of tokens owned by wallet.\\n     * @dev Used to see total amount of tokens owned by a specific wallet.\\n     * @param wallet Address for which to get token balance.\\n     * @return uint256 Returns an integer, representing total amount of tokens held by address.\\n     */\\n    function balanceOf(address wallet) public view returns (uint256) {\\n        return _ownedTokensCount[wallet];\\n    }\\n\\n    /**\\n     * @notice Get a base URI for the token.\\n     * @dev Concatenates with the CXIP domain name.\\n     * @return string the token URI.\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return string(abi.encodePacked(\\\"https://cxip.dev/nft/\\\", Strings.toHexString(address(this))));\\n    }\\n\\n    /**\\n     * @notice Gets the approved address for the token.\\n     * @dev Single operator set for a specific token. Usually used for one-time very specific authorisations.\\n     * @param tokenId Token id to get approved operator for.\\n     * @return address Approved address for token.\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @notice Get the associated identity for the collection.\\n     * @dev Goes up the chain to read from the registry.\\n     * @return address Identity contract address.\\n     */\\n    function getIdentity() public view returns (address) {\\n        return ICxipProvenance(getRegistry().getProvenance()).getWalletIdentity(_owner);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is approved.\\n     * @dev Includes references to OpenSea and Rarible marketplace proxies.\\n     * @param wallet Address of the wallet.\\n     * @param operator Address of the marketplace operator.\\n     * @return bool True if approved.\\n     */\\n    function isApprovedForAll(address wallet, address operator) public view returns (bool) {\\n        return (_operatorApprovals[wallet][operator] ||\\n            // Rarible Transfer Proxy\\n            0x72617269626C655472616E7366657250726F7879 == operator ||\\n            // OpenSea Transfer Proxy\\n            address(\\n                OpenSeaProxyRegistry(0x6f70656E5365615472616E7366657250726F7879).proxies(wallet)\\n            ) ==\\n            operator);\\n    }\\n\\n    /**\\n     * @notice Check if the sender is the owner.\\n     * @dev The owner could also be the admin or identity contract of the owner.\\n     * @return bool True if owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return (msg.sender == _owner || msg.sender == _admin || isIdentityWallet(msg.sender));\\n    }\\n\\n    /**\\n     * @notice Gets the owner's address.\\n     * @dev _owner is first set in init.\\n     * @return address Of ower.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Checks who the owner of a token is.\\n     * @dev The token must exist.\\n     * @param tokenId The token to look up.\\n     * @return address Owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        require(!Address.isZero(tokenOwner), \\\"ERC721: token does not exist\\\");\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @notice Get token by index instead of token id.\\n     * @dev Helpful for token enumeration where token id info is not yet available.\\n     * @param index Index of token in array.\\n     * @return uint256 Returns the token id of token located at that index.\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        require(index < totalSupply());\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @notice Get token from wallet by index instead of token id.\\n     * @dev Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.\\n     * @param wallet Specific address for which to get token for.\\n     * @param index Index of token in array.\\n     * @return uint256 Returns the token id of token located at that index in specified wallet.\\n     */\\n    function tokenOfOwnerByIndex(address wallet, uint256 index) public view returns (uint256) {\\n        require(index < balanceOf(wallet));\\n        return _ownedTokens[wallet][index];\\n    }\\n\\n    /**\\n     * @notice Total amount of tokens in the collection.\\n     * @dev Ignores burned tokens.\\n     * @return uint256 Returns the total number of active (not burned) tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalTokens;\\n    }\\n\\n    /**\\n     * @notice Empty function that is triggered by external contract on NFT transfer.\\n     * @dev We have this blank function in place to make sure that external contract sending in NFTs don't error out.\\n     * @dev Since it's not being used, the _operator variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _from variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.\\n     * @return bytes4 Returns the interfaceId of onERC721Received.\\n     */\\n    function onERC721Received(\\n        address, /*_operator*/\\n        address, /*_from*/\\n        uint256, /*_tokenId*/\\n        bytes calldata /*_data*/\\n    ) public pure returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    /**\\n     * @notice Allows retrieval of royalties from the contract.\\n     * @dev This is a default fallback to ensure the royalties are available.\\n     */\\n    function _royaltiesFallback() internal {\\n        address _target = getRegistry().getPA1D();\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), _target, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if an address is an identity contract.\\n     * @dev It must also be registred.\\n     * @param sender Address to check if registered to identity.\\n     * @return bool True if registred identity.\\n     */\\n    function isIdentityWallet(address sender) internal view returns (bool) {\\n        address identity = getIdentity();\\n        if (Address.isZero(identity)) {\\n            return false;\\n        }\\n        return ICxipIdentity(identity).isWalletRegistered(sender);\\n    }\\n\\n    /**\\n     * @dev Get the top-level CXIP Registry smart contract. Function must always be internal to prevent miss-use/abuse through bad programming practices.\\n     * @return ICxipRegistry The address of the top-level CXIP Registry smart contract.\\n     */\\n    function getRegistry() internal pure returns (ICxipRegistry) {\\n        return ICxipRegistry(0x5FbDB2315678afecb367f032d93F642f64180aa3);\\n    }\\n\\n    /**\\n     * @dev Add a newly minted token into managed list of tokens.\\n     * @param to Address of token owner for which to add the token.\\n     * @param tokenId Id of token to add.\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokensCount[to];\\n        _ownedTokensCount[to]++;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    /**\\n     * @notice Deletes a token from the approval list.\\n     * @dev Removes from count.\\n     * @param tokenId T.\\n     */\\n    function _clearApproval(uint256 tokenId) private {\\n        delete _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @notice Mints an NFT.\\n     * @dev Can to mint the token to the zero address and the token cannot already exist.\\n     * @param to Address to mint to.\\n     * @param tokenId The new token.\\n     */\\n    function _mint(address to, uint256 tokenId) private {\\n        if (Address.isZero(to) || _exists(tokenId)) {\\n            assert(false);\\n        }\\n        _tokenOwner[tokenId] = to;\\n        emit Transfer(address(0), to, tokenId);\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n        _totalTokens += 1;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Remove a token from managed list of tokens.\\n     * @param from Address of token owner for which to remove the token.\\n     * @param tokenId Id of token to remove.\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        _ownedTokensCount[from]--;\\n        uint256 lastTokenIndex = _ownedTokensCount[from];\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n        if (lastTokenIndex == 0) {\\n            delete _ownedTokens[from];\\n        } else {\\n            delete _ownedTokens[from][lastTokenIndex];\\n        }\\n    }\\n\\n    /**\\n     * @dev Primary internal function that handles the transfer/mint/burn functionality.\\n     * @param from Address from where token is being transferred. Zero address means it is being minted.\\n     * @param to Address to whom the token is being transferred. Zero address means it is being burned.\\n     * @param tokenId Id of token that is being transferred/minted/burned.\\n     */\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        if (_tokenOwner[tokenId] == from && !Address.isZero(to)) {\\n            _clearApproval(tokenId);\\n            _tokenOwner[tokenId] = to;\\n            emit Transfer(from, to, tokenId);\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        } else {\\n            assert(false);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the token owner exists.\\n     * @dev If the address is the zero address no owner exists.\\n     * @param tokenId The affected token.\\n     * @return bool True if it exists.\\n     */\\n    function _exists(uint256 tokenId) private view returns (bool) {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        return !Address.isZero(tokenOwner);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is an approved one.\\n     * @dev Uses inlined checks for different usecases of approval.\\n     * @param spender Address of the spender.\\n     * @param tokenId The affected token.\\n     * @return bool True if approved.\\n     */\\n    function _isApproved(address spender, uint256 tokenId) private view returns (bool) {\\n        require(_exists(tokenId));\\n        address tokenOwner = _tokenOwner[tokenId];\\n        return (spender == tokenOwner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(tokenOwner, spender));\\n    }\\n}\\n\",\"keccak256\":\"0x7fc7f006c9d62ca844c9fc36e466b59685c4daf27f048d3c527e1ab0a11f8b77\",\"license\":\"MIT\"},\"contracts/external/OpenSea.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ncontract OpenSeaOwnableDelegateProxy {}\\n\\ncontract OpenSeaProxyRegistry {\\n    mapping(address => OpenSeaOwnableDelegateProxy) public proxies;\\n}\\n\",\"keccak256\":\"0xe89c5cb9b98f9eef93b85b707f8740375fda432662147018de296640f5db1ada\",\"license\":\"MIT\"},\"contracts/interface/ICxipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\nimport \\\"../struct/Verification.sol\\\";\\n\\ninterface ICxipERC721 {\\n    function arweaveURI(uint256 tokenId) external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function creator(uint256 tokenId) external view returns (address);\\n\\n    function httpURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ipfsURI(uint256 tokenId) external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function payloadHash(uint256 tokenId) external view returns (bytes32);\\n\\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory);\\n\\n    function payloadSigner(uint256 tokenId) external view returns (address);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function tokensOfOwner(address wallet) external view returns (uint256[] memory);\\n\\n    function verifySHA256(bytes32 hash, bytes calldata payload) external pure returns (bool);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function init(address newOwner, CollectionData calldata collectionData) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function setApprovalForAll(address to, bool approved) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function cxipMint(uint256 id, TokenData calldata tokenData) external returns (uint256);\\n\\n    function setApprovalForAll(\\n        address from,\\n        address to,\\n        bool approved\\n    ) external;\\n\\n    function setName(bytes32 newName, bytes32 newName2) external;\\n\\n    function setSymbol(bytes32 newSymbol) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function balanceOf(address wallet) external view returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getIdentity() external view returns (address);\\n\\n    function isApprovedForAll(address wallet, address operator) external view returns (bool);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address wallet, uint256 index) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x9663198e9f69416d7325429a056da75c98d64444fa0c542685e080388ee65b37\",\"license\":\"MIT\"},\"contracts/interface/ICxipIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/InterfaceType.sol\\\";\\nimport \\\"../struct/Token.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\n\\ninterface ICxipIdentity {\\n    function addSignedWallet(\\n        address newWallet,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function addWallet(address newWallet) external;\\n\\n    function connectWallet() external;\\n\\n    function createERC721Token(\\n        address collection,\\n        uint256 id,\\n        TokenData calldata tokenData,\\n        Verification calldata verification\\n    ) external returns (uint256);\\n\\n    function createERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData\\n    ) external returns (address);\\n\\n    function createCustomERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData,\\n        bytes32 slot,\\n        bytes memory bytecode\\n    ) external returns (address);\\n\\n    function init(address wallet, address secondaryWallet) external;\\n\\n    function getAuthorizer(address wallet) external view returns (address);\\n\\n    function getCollectionById(uint256 index) external view returns (address);\\n\\n    function getCollectionType(address collection) external view returns (InterfaceType);\\n\\n    function getWallets() external view returns (address[] memory);\\n\\n    function isCollectionCertified(address collection) external view returns (bool);\\n\\n    function isCollectionRegistered(address collection) external view returns (bool);\\n\\n    function isNew() external view returns (bool);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function isTokenCertified(address collection, uint256 tokenId) external view returns (bool);\\n\\n    function isTokenRegistered(address collection, uint256 tokenId) external view returns (bool);\\n\\n    function isWalletRegistered(address wallet) external view returns (bool);\\n\\n    function listCollections(uint256 offset, uint256 length)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function nextNonce(address wallet) external view returns (uint256);\\n\\n    function totalCollections() external view returns (uint256);\\n\\n    function isCollectionOpen(address collection) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x04e91a9e35ef22a807346515245afc515a5f1b0358fa2cb8272cce5bae35f325\",\"license\":\"MIT\"},\"contracts/interface/ICxipProvenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipProvenance {\\n    function createIdentity(\\n        bytes32 saltHash,\\n        address wallet,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256, address);\\n\\n    function createIdentityBatch(\\n        bytes32 saltHash,\\n        address[] memory wallets,\\n        uint8[] memory V,\\n        bytes32[] memory RS\\n    ) external returns (uint256, address);\\n\\n    function getIdentity() external view returns (address);\\n\\n    function getWalletIdentity(address wallet) external view returns (address);\\n\\n    function informAboutNewWallet(address newWallet) external;\\n\\n    function isIdentityValid(address identity) external view returns (bool);\\n\\n    function nextNonce(address wallet) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdea801440658a3db585723764647f20a5232da262891914a8f97f70f1d538508\",\"license\":\"MIT\"},\"contracts/interface/ICxipRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipRegistry {\\n    function getAsset() external view returns (address);\\n\\n    function getAssetSigner() external view returns (address);\\n\\n    function getAssetSource() external view returns (address);\\n\\n    function getCopyright() external view returns (address);\\n\\n    function getCopyrightSource() external view returns (address);\\n\\n    function getCustomSource(bytes32 name) external view returns (address);\\n\\n    function getCustomSourceFromString(string memory name) external view returns (address);\\n\\n    function getERC1155CollectionSource() external view returns (address);\\n\\n    function getERC721CollectionSource() external view returns (address);\\n\\n    function getIdentitySource() external view returns (address);\\n\\n    function getPA1D() external view returns (address);\\n\\n    function getPA1DSource() external view returns (address);\\n\\n    function getProvenance() external view returns (address);\\n\\n    function getProvenanceSource() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function setAsset(address proxy) external;\\n\\n    function setAssetSigner(address source) external;\\n\\n    function setAssetSource(address source) external;\\n\\n    function setCopyright(address proxy) external;\\n\\n    function setCopyrightSource(address source) external;\\n\\n    function setCustomSource(string memory name, address source) external;\\n\\n    function setERC1155CollectionSource(address source) external;\\n\\n    function setERC721CollectionSource(address source) external;\\n\\n    function setIdentitySource(address source) external;\\n\\n    function setPA1D(address proxy) external;\\n\\n    function setPA1DSource(address source) external;\\n\\n    function setProvenance(address proxy) external;\\n\\n    function setProvenanceSource(address source) external;\\n}\\n\",\"keccak256\":\"0x955bdf21dd441b5f52524655fec5b24a580ab498cf746e736f6a1b92ff36a959\",\"license\":\"MIT\"},\"contracts/interface/IPA1D.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../library/Zora.sol\\\";\\n\\ninterface IPA1D {\\n    function init(\\n        uint256 tokenId,\\n        address payable receiver,\\n        uint256 bp\\n    ) external;\\n\\n    function configurePayouts(address payable[] memory addresses, uint256[] memory bps) external;\\n\\n    function getPayoutInfo()\\n        external\\n        view\\n        returns (address payable[] memory addresses, uint256[] memory bps);\\n\\n    function getEthPayout() external;\\n\\n    function getTokenPayout(address tokenAddress) external;\\n\\n    function getTokenPayoutByName(string memory tokenName) external;\\n\\n    function getTokensPayout(address[] memory tokenAddresses) external;\\n\\n    function getTokensPayoutByName(string[] memory tokenNames) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n\\n    function setRoyalties(\\n        uint256 tokenId,\\n        address payable receiver,\\n        uint256 bp\\n    ) external;\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    function getFeeBps(uint256 tokenId) external view returns (uint256[] memory);\\n\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n\\n    function getRoyalties(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    function tokenCreator(address contractAddress, uint256 tokenId) external view returns (address);\\n\\n    function calculateRoyaltyFee(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function marketContract() external view returns (address);\\n\\n    function tokenCreators(uint256 tokenId) external view returns (address);\\n\\n    function bidSharesForToken(uint256 tokenId)\\n        external\\n        view\\n        returns (Zora.BidShares memory bidShares);\\n\\n    function getStorageSlot(string calldata slot) external pure returns (bytes32);\\n\\n    function getTokenAddress(string memory tokenName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5737f7397b240725908f0fba96c6f3bf87cd5230530a680aba2c07dd2128936e\",\"license\":\"MIT\"},\"contracts/library/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 &&\\n            codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\\n    }\\n\\n    function isZero(address account) internal pure returns (bool) {\\n        return (account == address(0));\\n    }\\n}\\n\",\"keccak256\":\"0x53828b644743921c47d7b36278f23203cd56d18c1f57a6833cc316558befffef\",\"license\":\"MIT\"},\"contracts/library/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Bytes {\\n    function getBoolean(uint192 _packedBools, uint192 _boolNumber) internal pure returns (bool) {\\n        uint192 flag = (_packedBools >> _boolNumber) & uint192(1);\\n        return (flag == 1 ? true : false);\\n    }\\n\\n    function setBoolean(\\n        uint192 _packedBools,\\n        uint192 _boolNumber,\\n        bool _value\\n    ) internal pure returns (uint192) {\\n        if (_value) {\\n            return _packedBools | (uint192(1) << _boolNumber);\\n        } else {\\n            return _packedBools & ~(uint192(1) << _boolNumber);\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n        bytes memory tempBytes;\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                tempBytes := mload(0x40)\\n                let lengthmod := and(_length, 31)\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n                for {\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n                mstore(tempBytes, _length)\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            default {\\n                tempBytes := mload(0x40)\\n                mstore(tempBytes, 0)\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n        return tempBytes;\\n    }\\n\\n    function trim(bytes32 source) internal pure returns (bytes memory) {\\n        uint256 temp = uint256(source);\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return slice(abi.encodePacked(source), 32 - length, length);\\n    }\\n}\\n\",\"keccak256\":\"0xcd2deba6787d70b02a45d413f123c369ec896f8cadcd0f885d8133e8bdefad6b\",\"license\":\"MIT\"},\"contracts/library/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Strings {\\n    function toHexString(address account) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(account)));\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = bytes16(\\\"0123456789abcdef\\\")[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x341fbf23317cf1ee333cff62957814e8057b4c9c87a9d359db22c9e89c63a43e\",\"license\":\"MIT\"},\"contracts/library/Zora.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Zora {\\n    struct Decimal {\\n        uint256 value;\\n    }\\n\\n    struct BidShares {\\n        // % of sale value that goes to the _previous_ owner of the nft\\n        Decimal prevOwner;\\n        // % of sale value that goes to the original creator of the nft\\n        Decimal creator;\\n        // % of sale value that goes to the seller (current owner) of the nft\\n        Decimal owner;\\n    }\\n}\\n\",\"keccak256\":\"0x76a26baf5d8a39f8ac350b0747a96b81bd7a06ce5e013bb34945d8197f9fd731\",\"license\":\"MIT\"},\"contracts/struct/CollectionData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./UriType.sol\\\";\\n\\nstruct CollectionData {\\n    bytes32 name;\\n    bytes32 name2;\\n    bytes32 symbol;\\n    address royalties;\\n    uint96 bps;\\n}\\n\",\"keccak256\":\"0x328167148d845d1945ef8b77f710750d10cd38d2c8510e22ca52ec67781e3b8f\",\"license\":\"MIT\"},\"contracts/struct/InterfaceType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum InterfaceType {\\n    NULL, // 0\\n    ERC20, // 1\\n    ERC721, // 2\\n    ERC1155 // 3\\n}\\n\",\"keccak256\":\"0xed4f93a0fc084fa9d0a55d5e7c11f53e34b4c0d45d93de6ff03f345ae9a52885\",\"license\":\"MIT\"},\"contracts/struct/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./InterfaceType.sol\\\";\\n\\nstruct Token {\\n    address collection;\\n    uint256 tokenId;\\n    InterfaceType tokenType;\\n    address creator;\\n}\\n\",\"keccak256\":\"0xa9c13c64d8f611f96d8b4c39eb42dab1a05d70119f351047ee939e63d3a29e6f\",\"license\":\"MIT\"},\"contracts/struct/TokenData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./Verification.sol\\\";\\n\\nstruct TokenData {\\n    bytes32 payloadHash;\\n    Verification payloadSignature;\\n    address creator;\\n    bytes32 arweave;\\n    bytes11 arweave2;\\n    bytes32 ipfs;\\n    bytes14 ipfs2;\\n}\\n\",\"keccak256\":\"0xd7288c705f3247427487e4491a7cddb84a42af2a32720a16f75c8950380a717d\",\"license\":\"MIT\"},\"contracts/struct/UriType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum UriType {\\n    ARWEAVE, // 0\\n    IPFS, // 1\\n    HTTP // 2\\n}\\n\",\"keccak256\":\"0xe64f56b37ab2043dd80ae3b06abb928151837a546653ea0bd350d9078ccb29a6\",\"license\":\"MIT\"},\"contracts/struct/Verification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nstruct Verification {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n}\\n\",\"keccak256\":\"0x56a68601446e86e6a5d8bc4dc66df60fb6fb1518c4cc4fd0e9a87d50386a8652\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506125a1806100206000396000f3fe6080604052600436106102095760003560e01c8063510b515811610113578063a22cb465116100ab578063c87b56dd1161006f578063c87b56dd1461065e578063e8a3d485146106b1578063e985e9c5146106c6578063f2fde38b146106e6578063f95bb91e1461070657610218565b8063a22cb4651461063e578063a546993e1461065e578063ab67aa581461067e578063b0cacd4314610691578063b88d4fde1461067e57610218565b8063510b51581461026257806351e320241461053e5780636352211e1461055e5780636c0360eb1461057e57806370a08231146105935780638462151c146105c95780638da5cb5b146105f65780638f32d59b1461061457806395d89b411461062957610218565b806323b872dd116101a157806342966c681161016557806342966c6814610491578063475a8035146104b157806349e65440146104de5780634f6ccce7146104fe5780634f8baacc1461051e57610218565b806323b872dd146103b85780632c2dadbc146103cb5780632f745c591461045c57806336afc6fa1461047c57806342842e0e146103b857610218565b806301ffc9a71461022d57806306ce0db81461026257806306fdde03146102a8578063081812fc146102ca578063095ea7b314610300578063128bfa2514610320578063150b7a021461034057806318160ddd146103795780631a5c7f921461039857610218565b3661021857610216610726565b005b34801561022457600080fd5b50610216610726565b34801561023957600080fd5b5061024d610248366004611c35565b6107c9565b60405190151581526020015b60405180910390f35b34801561026e57600080fd5b5061029b61027d366004611c5f565b6000908152600c60205260409020600401546001600160a01b031690565b6040516102599190611c78565b3480156102b457600080fd5b506102bd610948565b6040516102599190611cb8565b3480156102d657600080fd5b5061029b6102e5366004611c5f565b6000908152600860205260409020546001600160a01b031690565b34801561030c57600080fd5b5061021661031b366004611d00565b610988565b34801561032c57600080fd5b5061021661033b366004611d2c565b610a1a565b34801561034c57600080fd5b5061036c61035b366004611db6565b630a85bd0160e11b95945050505050565b6040516102599190611e29565b34801561038557600080fd5b50600f545b604051908152602001610259565b3480156103a457600080fd5b506102bd6103b3366004611c5f565b610b67565b6102166103c6366004611e3e565b610be4565b3480156103d757600080fd5b506104376103e6366004611c5f565b604080516060808201835260008083526020808401829052928401819052938452600c82529282902082519384018352600181015484526002810154918401919091526003015460ff169082015290565b6040805182518152602080840151908201529181015160ff1690820152606001610259565b34801561046857600080fd5b5061038a610477366004611d00565b610bff565b34801561048857600080fd5b5061029b610c60565b34801561049d57600080fd5b506102166104ac366004611c5f565b610d4f565b3480156104bd57600080fd5b5061038a6104cc366004611c5f565b6000908152600c602052604090205490565b3480156104ea57600080fd5b506102166104f9366004611c5f565b610eb1565b34801561050a57600080fd5b5061038a610519366004611c5f565b610eda565b34801561052a57600080fd5b5061038a610539366004611e7f565b610f15565b34801561054a57600080fd5b506102bd610559366004611c5f565b611005565b34801561056a57600080fd5b5061029b610579366004611c5f565b611029565b34801561058a57600080fd5b506102bd61109d565b34801561059f57600080fd5b5061038a6105ae366004611eab565b6001600160a01b031660009081526009602052604090205490565b3480156105d557600080fd5b506105e96105e4366004611eab565b6110b8565b6040516102599190611ec8565b34801561060257600080fd5b50600e546001600160a01b031661029b565b34801561062057600080fd5b5061024d611124565b34801561063557600080fd5b506102bd611159565b34801561064a57600080fd5b50610216610659366004611f1a565b611169565b34801561066a57600080fd5b506102bd610679366004611c5f565b6111f1565b61021661068c366004611f69565b611224565b34801561069d57600080fd5b5061024d6106ac366004612049565b611244565b3480156106bd57600080fd5b506102bd6112a4565b3480156106d257600080fd5b5061024d6106e1366004612095565b6112bf565b3480156106f257600080fd5b50610216610701366004611eab565b6113ac565b34801561071257600080fd5b506102166107213660046120c3565b6113fd565b6000735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e91906120e5565b90503660008037600080366000845af43d6000803e8080156107bf573d6000f35b3d6000fd5b505050565b60006301ffc9a760e01b6001600160e01b0319831614806107fa57506380ac58cd60e01b6001600160e01b03198316145b806108155750635b5e139f60e01b6001600160e01b03198316145b806108305750630a85bd0160e11b6001600160e01b03198316145b8061084b575063e8a3d48560e01b6001600160e01b03198316145b806109335750735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c791906120e5565b6001600160a01b03166301ffc9a7836040518263ffffffff1660e01b81526004016108f29190611e29565b602060405180830381865afa15801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190612102565b1561094057506001919050565b506000919050565b6060610957600080015461142c565b6001546109639061142c565b60405160200161097492919061211f565b604051602081830303815290604052905090565b6000818152600760205260409020546001600160a01b0390811690831681148015906109b957506109b93383611490565b156107c45760008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600d54610a2f906001600160a01b03166114f7565b610a7c5760405162461bcd60e51b815260206004820152601960248201527810d612540e88185b1c9958591e481a5b9a5d1a585b1a5e9959603a1b60448201526064015b60405180910390fd5b600d80546001600160a01b03199081163317909155600e805490911630179055806000610aa98282612190565b5030905063ea2299f86000610ac46080850160608601611eab565b610ad460a08601608087016121f5565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526001600160601b03166044820152606401600060405180830381600087803b158015610b2b57600080fd5b505af1158015610b3f573d6000803e3d6000fd5b5050600e80546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000818152600c602090815260409182902060078101546008909101549251606093610bce9360909190911b91017568747470733a2f2f697066732e637869702e6465762f60501b815260168101929092526001600160901b031916603682015260440190565b6040516020818303038152906040529050919050565b6107c483838360405180602001604052806000815250611224565b6001600160a01b0382166000908152600960205260408120548210610c2357600080fd5b6001600160a01b0383166000908152600a60205260409020805483908110610c4d57610c4d612212565b9060005260206000200154905092915050565b6000735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd891906120e5565b600e546040516309633f5960e31b81526001600160a01b0392831692634b19fac892610d0992911690600401611c78565b602060405180830381865afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a91906120e5565b905090565b610d593382611490565b15610eae576000818152600760205260409020546001600160a01b0316610d7f816114f7565b15610d8957600080fd5b610d9282611504565b60008281526007602052604080822080546001600160a01b0319169055518391906001600160a01b0384169060008051602061254c833981519152908390a4610ddb8183611522565b60055480610de88161223e565b91505080610e0157610dfc60056000611c03565b610e20565b60058181548110610e1457610e14612212565b60009182526020822001555b6001600f6000828254610e339190612255565b9091555050506000828152600c60205260408120818155600181018290556002810182905560038101805460ff191690556004810180546001600160a01b0319169055600581018290556006810180546affffffffffffffffffffff19169055600781019190915560080180546001600160701b0319169055505b50565b610eb9611124565b610ed55760405162461bcd60e51b8152600401610a739061226c565b600255565b6000610ee5600f5490565b8210610ef057600080fd5b60058281548110610f0357610f03612212565b90600052602060002001549050919050565b6000610f1f611124565b610f3b5760405162461bcd60e51b8152600401610a739061226c565b82610f5e57600160046000828254610f53919061229f565b909155505060045492505b610f77610f7160a0840160808501611eab565b8461166e565b6000838152600c602052604090208290610f9182826122f4565b508390507fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720760a0840135610fcb60e0860160c087016123b8565b604051602001610fdc9291906123d5565b60408051601f1981840301815290829052610ff691611cb8565b60405180910390a25090919050565b606061100f61109d565b6110188361172e565b604051602001610bce929190612411565b6000818152600760205260408120546001600160a01b031661104a816114f7565b156110975760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20646f6573206e6f74206578697374000000006044820152606401610a73565b92915050565b60606110a830611782565b604051602001610974919061244d565b6001600160a01b0381166000908152600a602090815260409182902080548351818402810184019094528084526060939283018282801561111857602002820191906000526020600020905b815481526020019060010190808311611104575b50505050509050919050565b600e546000906001600160a01b031633148061114a5750600d546001600160a01b031633145b80610d4a5750610d4a33611796565b6060610d4a60006002015461142c565b6001600160a01b03821633146111e557336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6111ed61248a565b5050565b6000818152600c602090815260409182902060058101546006909101549251606093610bce9360a89190911b91016123d5565b61122e3383611490565b1561123e5761123e848484611827565b50505050565b600080600284846040516112599291906124a0565b602060405180830381855afa158015611276573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061129991906124b0565b909414949350505050565b60606112af30611782565b60405160200161097491906124c9565b6001600160a01b038083166000908152600b6020908152604080832093851683529290529081205460ff168061131157507372617269626c655472616e7366657250726f78796001600160a01b038316145b806113a5575060405163c455279160e01b81526001600160a01b03831690736f70656e5365615472616e7366657250726f78799063c455279190611359908790600401611c78565b602060405180830381865afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a91906120e5565b6001600160a01b0316145b9392505050565b6113b4611124565b6113d05760405162461bcd60e51b8152600401610a739061226c565b6113d9816114f7565b610eae57600e80546001600160a01b0383166001600160a01b031990911617905550565b611405611124565b6114215760405162461bcd60e51b8152600401610a739061226c565b600091909155600155565b60608160005b8115611451578061144281612511565b915050600882901c9150611432565b6114888460405160200161146791815260200190565b60408051601f19818403018152919052611482836020612255565b836118c5565b949350505050565b600061149b826119d2565b6114a457600080fd5b6000828152600760205260409020546001600160a01b039081169084168114806114e757506000838152600860205260409020546001600160a01b038581169116145b80611488575061148881856112bf565b6001600160a01b03161590565b600090815260086020526040902080546001600160a01b0319169055565b6001600160a01b03821660009081526009602052604081208054916115468361223e565b90915550506001600160a01b038216600090815260096020908152604080832054848452600690925290912054808214611608576001600160a01b0384166000908152600a602052604081208054849081106115a4576115a4612212565b9060005260206000200154905080600a6000876001600160a01b03166001600160a01b0316815260200190815260200160002083815481106115e8576115e8612212565b600091825260208083209091019290925591825260069052604090208190555b81611633576001600160a01b0384166000908152600a6020526040812061162e91611c03565b61123e565b6001600160a01b0384166000908152600a6020526040902080548390811061165d5761165d612212565b600091825260208220015550505050565b611677826114f7565b806116865750611686816119d2565b156116935761169361248a565b60008181526007602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183929060008051602061254c833981519152908290a46116e082826119fb565b6001600f60008282546116f3919061229f565b9091555050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0015550565b6060816117555750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115611778578061176981612511565b915050600882901c9150611759565b6114888482611a67565b6060611097826001600160a01b031661172e565b6000806117a1610c60565b90506117ac816114f7565b156117ba5750600092915050565b604051637f247e4960e01b81526001600160a01b03821690637f247e49906117e6908690600401611c78565b602060405180830381865afa158015611803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190612102565b6000818152600760205260409020546001600160a01b0384811691161480156118565750611854826114f7565b155b156118bd5761186481611504565b60008181526007602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061254c83398151915291a46118b38382611522565b6107c482826119fb565b6107c461248a565b6060816118d381601f61229f565b10156119125760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610a73565b61191c828461229f565b845110156119605760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610a73565b60608215801561197f57604051915060008252602082016040526119c9565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156119b85780518352602092830192016119a0565b5050858452601f01601f1916604052505b50949350505050565b6000818152600760205260408120546001600160a01b03166119f3816114f7565b159392505050565b6001600160a01b03821660008181526009602081815260408084208054878652600684529185208290559484529190529190611a3683612511565b90915550506001600160a01b039091166000908152600a602090815260408220805460018101825590835291200155565b60606000611a7683600261252c565b611a8190600261229f565b67ffffffffffffffff811115611a9957611a99611f53565b6040519080825280601f01601f191660200182016040528015611ac3576020820181803683370190505b509050600360fc1b81600081518110611ade57611ade612212565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b0d57611b0d612212565b60200101906001600160f81b031916908160001a9053506000611b3184600261252c565b611b3c90600161229f565b90505b6001811115611bb4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b7057611b70612212565b1a60f81b828281518110611b8657611b86612212565b60200101906001600160f81b031916908160001a90535060049490941c93611bad8161223e565b9050611b3f565b5083156113a55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a73565b5080546000825590600052602060002090810190610eae91905b80821115611c315760008155600101611c1d565b5090565b600060208284031215611c4757600080fd5b81356001600160e01b0319811681146113a557600080fd5b600060208284031215611c7157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60005b83811015611ca7578181015183820152602001611c8f565b8381111561123e5750506000910152565b6020815260008251806020840152611cd7816040850160208701611c8c565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610eae57600080fd5b60008060408385031215611d1357600080fd5b8235611d1e81611ceb565b946020939093013593505050565b60008082840360c0811215611d4057600080fd5b8335611d4b81611ceb565b925060a0601f1982011215611d5f57600080fd5b506020830190509250929050565b60008083601f840112611d7f57600080fd5b50813567ffffffffffffffff811115611d9757600080fd5b602083019150836020828501011115611daf57600080fd5b9250929050565b600080600080600060808688031215611dce57600080fd5b8535611dd981611ceb565b94506020860135611de981611ceb565b935060408601359250606086013567ffffffffffffffff811115611e0c57600080fd5b611e1888828901611d6d565b969995985093965092949392505050565b6001600160e01b031991909116815260200190565b600080600060608486031215611e5357600080fd5b8335611e5e81611ceb565b92506020840135611e6e81611ceb565b929592945050506040919091013590565b600080828403610140811215611e9457600080fd5b83359250610120601f1982011215611d5f57600080fd5b600060208284031215611ebd57600080fd5b81356113a581611ceb565b6020808252825182820181905260009190848201906040850190845b81811015611f0057835183529284019291840191600101611ee4565b50909695505050505050565b8015158114610eae57600080fd5b60008060408385031215611f2d57600080fd5b8235611f3881611ceb565b91506020830135611f4881611f0c565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611f7f57600080fd5b8435611f8a81611ceb565b93506020850135611f9a81611ceb565b925060408501359150606085013567ffffffffffffffff80821115611fbe57600080fd5b818701915087601f830112611fd257600080fd5b813581811115611fe457611fe4611f53565b604051601f8201601f19908116603f0116810190838211818310171561200c5761200c611f53565b816040528281528a602084870101111561202557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006040848603121561205e57600080fd5b83359250602084013567ffffffffffffffff81111561207c57600080fd5b61208886828701611d6d565b9497909650939450505050565b600080604083850312156120a857600080fd5b82356120b381611ceb565b91506020830135611f4881611ceb565b600080604083850312156120d657600080fd5b50508035926020909101359150565b6000602082840312156120f757600080fd5b81516113a581611ceb565b60006020828403121561211457600080fd5b81516113a581611f0c565b60008351612131818460208801611c8c565b835190830190612145818360208801611c8c565b01949350505050565b6000813561109781611ceb565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160601b0381168114610eae57600080fd5b8135815560208201356001820155604082013560028201556003810160608301356121ba81611ceb565b6121c4818361215b565b5060808301356121d38161217b565b81546001600160a01b031660a09190911b6001600160a01b0319161790555050565b60006020828403121561220757600080fd5b81356113a58161217b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008161224d5761224d612228565b506000190190565b60008282101561226757612267612228565b500390565b60208082526019908201527821ac24a81d1031b0b63632b9103737ba1030b71037bbb732b960391b604082015260600190565b600082198211156122b2576122b2612228565b500190565b6001600160a81b031981168114610eae57600080fd5b60008135611097816122b7565b600081356001600160901b03198116811461109757600080fd5b81358155602082013560018201556040820135600282015560038101606083013560ff811680821461232557600080fd5b825460ff1916179091555061234861233f6080840161214e565b6004830161215b565b60a0820135600582015561238061236160c084016122cd565b600683018160a81c6affffffffffffffffffffff198254161781555050565b60e082013560078201556111ed61239a61010084016122da565b6008830180546001600160701b03191660909290921c919091179055565b6000602082840312156123ca57600080fd5b81356113a5816122b7565b7868747470733a2f2f617277656176652e637869702e6465762f60381b815260198101929092526001600160a81b031916603982015260440190565b60008351612423818460208801611c8c565b602f60f81b9083019081528351612441816001840160208801611c8c565b01600101949350505050565b7468747470733a2f2f637869702e6465762f6e66742f60581b81526000825161247d816015850160208701611c8c565b9190910160150192915050565b634e487b7160e01b600052600160045260246000fd5b8183823760009101908152919050565b6000602082840312156124c257600080fd5b5051919050565b7468747470733a2f2f6e66742e637869702e6465762f60581b8152600082516124f9816015850160208701611c8c565b602f60f81b6015939091019283015250601601919050565b600060001982141561252557612525612228565b5060010190565b600081600019048311821515161561254657612546612228565b50029056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220091a1750a429c9f7a1c42dbb7685faea245c4caf967fac219aaae7492d3ca69e64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102095760003560e01c8063510b515811610113578063a22cb465116100ab578063c87b56dd1161006f578063c87b56dd1461065e578063e8a3d485146106b1578063e985e9c5146106c6578063f2fde38b146106e6578063f95bb91e1461070657610218565b8063a22cb4651461063e578063a546993e1461065e578063ab67aa581461067e578063b0cacd4314610691578063b88d4fde1461067e57610218565b8063510b51581461026257806351e320241461053e5780636352211e1461055e5780636c0360eb1461057e57806370a08231146105935780638462151c146105c95780638da5cb5b146105f65780638f32d59b1461061457806395d89b411461062957610218565b806323b872dd116101a157806342966c681161016557806342966c6814610491578063475a8035146104b157806349e65440146104de5780634f6ccce7146104fe5780634f8baacc1461051e57610218565b806323b872dd146103b85780632c2dadbc146103cb5780632f745c591461045c57806336afc6fa1461047c57806342842e0e146103b857610218565b806301ffc9a71461022d57806306ce0db81461026257806306fdde03146102a8578063081812fc146102ca578063095ea7b314610300578063128bfa2514610320578063150b7a021461034057806318160ddd146103795780631a5c7f921461039857610218565b3661021857610216610726565b005b34801561022457600080fd5b50610216610726565b34801561023957600080fd5b5061024d610248366004611c35565b6107c9565b60405190151581526020015b60405180910390f35b34801561026e57600080fd5b5061029b61027d366004611c5f565b6000908152600c60205260409020600401546001600160a01b031690565b6040516102599190611c78565b3480156102b457600080fd5b506102bd610948565b6040516102599190611cb8565b3480156102d657600080fd5b5061029b6102e5366004611c5f565b6000908152600860205260409020546001600160a01b031690565b34801561030c57600080fd5b5061021661031b366004611d00565b610988565b34801561032c57600080fd5b5061021661033b366004611d2c565b610a1a565b34801561034c57600080fd5b5061036c61035b366004611db6565b630a85bd0160e11b95945050505050565b6040516102599190611e29565b34801561038557600080fd5b50600f545b604051908152602001610259565b3480156103a457600080fd5b506102bd6103b3366004611c5f565b610b67565b6102166103c6366004611e3e565b610be4565b3480156103d757600080fd5b506104376103e6366004611c5f565b604080516060808201835260008083526020808401829052928401819052938452600c82529282902082519384018352600181015484526002810154918401919091526003015460ff169082015290565b6040805182518152602080840151908201529181015160ff1690820152606001610259565b34801561046857600080fd5b5061038a610477366004611d00565b610bff565b34801561048857600080fd5b5061029b610c60565b34801561049d57600080fd5b506102166104ac366004611c5f565b610d4f565b3480156104bd57600080fd5b5061038a6104cc366004611c5f565b6000908152600c602052604090205490565b3480156104ea57600080fd5b506102166104f9366004611c5f565b610eb1565b34801561050a57600080fd5b5061038a610519366004611c5f565b610eda565b34801561052a57600080fd5b5061038a610539366004611e7f565b610f15565b34801561054a57600080fd5b506102bd610559366004611c5f565b611005565b34801561056a57600080fd5b5061029b610579366004611c5f565b611029565b34801561058a57600080fd5b506102bd61109d565b34801561059f57600080fd5b5061038a6105ae366004611eab565b6001600160a01b031660009081526009602052604090205490565b3480156105d557600080fd5b506105e96105e4366004611eab565b6110b8565b6040516102599190611ec8565b34801561060257600080fd5b50600e546001600160a01b031661029b565b34801561062057600080fd5b5061024d611124565b34801561063557600080fd5b506102bd611159565b34801561064a57600080fd5b50610216610659366004611f1a565b611169565b34801561066a57600080fd5b506102bd610679366004611c5f565b6111f1565b61021661068c366004611f69565b611224565b34801561069d57600080fd5b5061024d6106ac366004612049565b611244565b3480156106bd57600080fd5b506102bd6112a4565b3480156106d257600080fd5b5061024d6106e1366004612095565b6112bf565b3480156106f257600080fd5b50610216610701366004611eab565b6113ac565b34801561071257600080fd5b506102166107213660046120c3565b6113fd565b6000735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e91906120e5565b90503660008037600080366000845af43d6000803e8080156107bf573d6000f35b3d6000fd5b505050565b60006301ffc9a760e01b6001600160e01b0319831614806107fa57506380ac58cd60e01b6001600160e01b03198316145b806108155750635b5e139f60e01b6001600160e01b03198316145b806108305750630a85bd0160e11b6001600160e01b03198316145b8061084b575063e8a3d48560e01b6001600160e01b03198316145b806109335750735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c791906120e5565b6001600160a01b03166301ffc9a7836040518263ffffffff1660e01b81526004016108f29190611e29565b602060405180830381865afa15801561090f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109339190612102565b1561094057506001919050565b506000919050565b6060610957600080015461142c565b6001546109639061142c565b60405160200161097492919061211f565b604051602081830303815290604052905090565b6000818152600760205260409020546001600160a01b0390811690831681148015906109b957506109b93383611490565b156107c45760008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600d54610a2f906001600160a01b03166114f7565b610a7c5760405162461bcd60e51b815260206004820152601960248201527810d612540e88185b1c9958591e481a5b9a5d1a585b1a5e9959603a1b60448201526064015b60405180910390fd5b600d80546001600160a01b03199081163317909155600e805490911630179055806000610aa98282612190565b5030905063ea2299f86000610ac46080850160608601611eab565b610ad460a08601608087016121f5565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526001600160601b03166044820152606401600060405180830381600087803b158015610b2b57600080fd5b505af1158015610b3f573d6000803e3d6000fd5b5050600e80546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000818152600c602090815260409182902060078101546008909101549251606093610bce9360909190911b91017568747470733a2f2f697066732e637869702e6465762f60501b815260168101929092526001600160901b031916603682015260440190565b6040516020818303038152906040529050919050565b6107c483838360405180602001604052806000815250611224565b6001600160a01b0382166000908152600960205260408120548210610c2357600080fd5b6001600160a01b0383166000908152600a60205260409020805483908110610c4d57610c4d612212565b9060005260206000200154905092915050565b6000735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd891906120e5565b600e546040516309633f5960e31b81526001600160a01b0392831692634b19fac892610d0992911690600401611c78565b602060405180830381865afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a91906120e5565b905090565b610d593382611490565b15610eae576000818152600760205260409020546001600160a01b0316610d7f816114f7565b15610d8957600080fd5b610d9282611504565b60008281526007602052604080822080546001600160a01b0319169055518391906001600160a01b0384169060008051602061254c833981519152908390a4610ddb8183611522565b60055480610de88161223e565b91505080610e0157610dfc60056000611c03565b610e20565b60058181548110610e1457610e14612212565b60009182526020822001555b6001600f6000828254610e339190612255565b9091555050506000828152600c60205260408120818155600181018290556002810182905560038101805460ff191690556004810180546001600160a01b0319169055600581018290556006810180546affffffffffffffffffffff19169055600781019190915560080180546001600160701b0319169055505b50565b610eb9611124565b610ed55760405162461bcd60e51b8152600401610a739061226c565b600255565b6000610ee5600f5490565b8210610ef057600080fd5b60058281548110610f0357610f03612212565b90600052602060002001549050919050565b6000610f1f611124565b610f3b5760405162461bcd60e51b8152600401610a739061226c565b82610f5e57600160046000828254610f53919061229f565b909155505060045492505b610f77610f7160a0840160808501611eab565b8461166e565b6000838152600c602052604090208290610f9182826122f4565b508390507fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720760a0840135610fcb60e0860160c087016123b8565b604051602001610fdc9291906123d5565b60408051601f1981840301815290829052610ff691611cb8565b60405180910390a25090919050565b606061100f61109d565b6110188361172e565b604051602001610bce929190612411565b6000818152600760205260408120546001600160a01b031661104a816114f7565b156110975760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20646f6573206e6f74206578697374000000006044820152606401610a73565b92915050565b60606110a830611782565b604051602001610974919061244d565b6001600160a01b0381166000908152600a602090815260409182902080548351818402810184019094528084526060939283018282801561111857602002820191906000526020600020905b815481526020019060010190808311611104575b50505050509050919050565b600e546000906001600160a01b031633148061114a5750600d546001600160a01b031633145b80610d4a5750610d4a33611796565b6060610d4a60006002015461142c565b6001600160a01b03821633146111e557336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6111ed61248a565b5050565b6000818152600c602090815260409182902060058101546006909101549251606093610bce9360a89190911b91016123d5565b61122e3383611490565b1561123e5761123e848484611827565b50505050565b600080600284846040516112599291906124a0565b602060405180830381855afa158015611276573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061129991906124b0565b909414949350505050565b60606112af30611782565b60405160200161097491906124c9565b6001600160a01b038083166000908152600b6020908152604080832093851683529290529081205460ff168061131157507372617269626c655472616e7366657250726f78796001600160a01b038316145b806113a5575060405163c455279160e01b81526001600160a01b03831690736f70656e5365615472616e7366657250726f78799063c455279190611359908790600401611c78565b602060405180830381865afa158015611376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139a91906120e5565b6001600160a01b0316145b9392505050565b6113b4611124565b6113d05760405162461bcd60e51b8152600401610a739061226c565b6113d9816114f7565b610eae57600e80546001600160a01b0383166001600160a01b031990911617905550565b611405611124565b6114215760405162461bcd60e51b8152600401610a739061226c565b600091909155600155565b60608160005b8115611451578061144281612511565b915050600882901c9150611432565b6114888460405160200161146791815260200190565b60408051601f19818403018152919052611482836020612255565b836118c5565b949350505050565b600061149b826119d2565b6114a457600080fd5b6000828152600760205260409020546001600160a01b039081169084168114806114e757506000838152600860205260409020546001600160a01b038581169116145b80611488575061148881856112bf565b6001600160a01b03161590565b600090815260086020526040902080546001600160a01b0319169055565b6001600160a01b03821660009081526009602052604081208054916115468361223e565b90915550506001600160a01b038216600090815260096020908152604080832054848452600690925290912054808214611608576001600160a01b0384166000908152600a602052604081208054849081106115a4576115a4612212565b9060005260206000200154905080600a6000876001600160a01b03166001600160a01b0316815260200190815260200160002083815481106115e8576115e8612212565b600091825260208083209091019290925591825260069052604090208190555b81611633576001600160a01b0384166000908152600a6020526040812061162e91611c03565b61123e565b6001600160a01b0384166000908152600a6020526040902080548390811061165d5761165d612212565b600091825260208220015550505050565b611677826114f7565b806116865750611686816119d2565b156116935761169361248a565b60008181526007602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183929060008051602061254c833981519152908290a46116e082826119fb565b6001600f60008282546116f3919061229f565b9091555050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0015550565b6060816117555750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115611778578061176981612511565b915050600882901c9150611759565b6114888482611a67565b6060611097826001600160a01b031661172e565b6000806117a1610c60565b90506117ac816114f7565b156117ba5750600092915050565b604051637f247e4960e01b81526001600160a01b03821690637f247e49906117e6908690600401611c78565b602060405180830381865afa158015611803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190612102565b6000818152600760205260409020546001600160a01b0384811691161480156118565750611854826114f7565b155b156118bd5761186481611504565b60008181526007602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061254c83398151915291a46118b38382611522565b6107c482826119fb565b6107c461248a565b6060816118d381601f61229f565b10156119125760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610a73565b61191c828461229f565b845110156119605760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610a73565b60608215801561197f57604051915060008252602082016040526119c9565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156119b85780518352602092830192016119a0565b5050858452601f01601f1916604052505b50949350505050565b6000818152600760205260408120546001600160a01b03166119f3816114f7565b159392505050565b6001600160a01b03821660008181526009602081815260408084208054878652600684529185208290559484529190529190611a3683612511565b90915550506001600160a01b039091166000908152600a602090815260408220805460018101825590835291200155565b60606000611a7683600261252c565b611a8190600261229f565b67ffffffffffffffff811115611a9957611a99611f53565b6040519080825280601f01601f191660200182016040528015611ac3576020820181803683370190505b509050600360fc1b81600081518110611ade57611ade612212565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b0d57611b0d612212565b60200101906001600160f81b031916908160001a9053506000611b3184600261252c565b611b3c90600161229f565b90505b6001811115611bb4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b7057611b70612212565b1a60f81b828281518110611b8657611b86612212565b60200101906001600160f81b031916908160001a90535060049490941c93611bad8161223e565b9050611b3f565b5083156113a55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a73565b5080546000825590600052602060002090810190610eae91905b80821115611c315760008155600101611c1d565b5090565b600060208284031215611c4757600080fd5b81356001600160e01b0319811681146113a557600080fd5b600060208284031215611c7157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60005b83811015611ca7578181015183820152602001611c8f565b8381111561123e5750506000910152565b6020815260008251806020840152611cd7816040850160208701611c8c565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610eae57600080fd5b60008060408385031215611d1357600080fd5b8235611d1e81611ceb565b946020939093013593505050565b60008082840360c0811215611d4057600080fd5b8335611d4b81611ceb565b925060a0601f1982011215611d5f57600080fd5b506020830190509250929050565b60008083601f840112611d7f57600080fd5b50813567ffffffffffffffff811115611d9757600080fd5b602083019150836020828501011115611daf57600080fd5b9250929050565b600080600080600060808688031215611dce57600080fd5b8535611dd981611ceb565b94506020860135611de981611ceb565b935060408601359250606086013567ffffffffffffffff811115611e0c57600080fd5b611e1888828901611d6d565b969995985093965092949392505050565b6001600160e01b031991909116815260200190565b600080600060608486031215611e5357600080fd5b8335611e5e81611ceb565b92506020840135611e6e81611ceb565b929592945050506040919091013590565b600080828403610140811215611e9457600080fd5b83359250610120601f1982011215611d5f57600080fd5b600060208284031215611ebd57600080fd5b81356113a581611ceb565b6020808252825182820181905260009190848201906040850190845b81811015611f0057835183529284019291840191600101611ee4565b50909695505050505050565b8015158114610eae57600080fd5b60008060408385031215611f2d57600080fd5b8235611f3881611ceb565b91506020830135611f4881611f0c565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611f7f57600080fd5b8435611f8a81611ceb565b93506020850135611f9a81611ceb565b925060408501359150606085013567ffffffffffffffff80821115611fbe57600080fd5b818701915087601f830112611fd257600080fd5b813581811115611fe457611fe4611f53565b604051601f8201601f19908116603f0116810190838211818310171561200c5761200c611f53565b816040528281528a602084870101111561202557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006040848603121561205e57600080fd5b83359250602084013567ffffffffffffffff81111561207c57600080fd5b61208886828701611d6d565b9497909650939450505050565b600080604083850312156120a857600080fd5b82356120b381611ceb565b91506020830135611f4881611ceb565b600080604083850312156120d657600080fd5b50508035926020909101359150565b6000602082840312156120f757600080fd5b81516113a581611ceb565b60006020828403121561211457600080fd5b81516113a581611f0c565b60008351612131818460208801611c8c565b835190830190612145818360208801611c8c565b01949350505050565b6000813561109781611ceb565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160601b0381168114610eae57600080fd5b8135815560208201356001820155604082013560028201556003810160608301356121ba81611ceb565b6121c4818361215b565b5060808301356121d38161217b565b81546001600160a01b031660a09190911b6001600160a01b0319161790555050565b60006020828403121561220757600080fd5b81356113a58161217b565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008161224d5761224d612228565b506000190190565b60008282101561226757612267612228565b500390565b60208082526019908201527821ac24a81d1031b0b63632b9103737ba1030b71037bbb732b960391b604082015260600190565b600082198211156122b2576122b2612228565b500190565b6001600160a81b031981168114610eae57600080fd5b60008135611097816122b7565b600081356001600160901b03198116811461109757600080fd5b81358155602082013560018201556040820135600282015560038101606083013560ff811680821461232557600080fd5b825460ff1916179091555061234861233f6080840161214e565b6004830161215b565b60a0820135600582015561238061236160c084016122cd565b600683018160a81c6affffffffffffffffffffff198254161781555050565b60e082013560078201556111ed61239a61010084016122da565b6008830180546001600160701b03191660909290921c919091179055565b6000602082840312156123ca57600080fd5b81356113a5816122b7565b7868747470733a2f2f617277656176652e637869702e6465762f60381b815260198101929092526001600160a81b031916603982015260440190565b60008351612423818460208801611c8c565b602f60f81b9083019081528351612441816001840160208801611c8c565b01600101949350505050565b7468747470733a2f2f637869702e6465762f6e66742f60581b81526000825161247d816015850160208701611c8c565b9190910160150192915050565b634e487b7160e01b600052600160045260246000fd5b8183823760009101908152919050565b6000602082840312156124c257600080fd5b5051919050565b7468747470733a2f2f6e66742e637869702e6465762f60581b8152600082516124f9816015850160208701611c8c565b602f60f81b6015939091019283015250601601919050565b600060001982141561252557612525612228565b5060010190565b600081600019048311821515161561254657612546612228565b50029056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220091a1750a429c9f7a1c42dbb7685faea245c4caf967fac219aaae7492d3ca69e64736f6c634300080c0033",
  "devdoc": {
    "author": "CXIP-Labs",
    "details": "The entire logic and functionality of the smart contract is self-contained.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emits event that informs of address approving a third-party operator for a particular token.",
        "params": {
          "operator": "Address of the third-party operator approved for interaction.",
          "tokenId": "A specific token id that is being authorised to operator.",
          "wallet": "Address of the wallet configuring a token operator."
        }
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emits event that informs of address approving/denying a third-party operator.",
        "params": {
          "approved": "A boolean indicating whether approval was granted or revoked.",
          "operator": "Address of the third-party operator that interacts on behalf of the wallet.",
          "wallet": "Address of the wallet configuring it's operator."
        }
      },
      "PermanentURI(string,uint256)": {
        "details": "Even though OpenSea advertises support for this, they do not listen to this event, and do not respond to it.",
        "params": {
          "id": "Token id of the NFT.",
          "uri": "The permanent/static URL of the NFT. Cannot ever be changed again."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.",
        "params": {
          "from": "Address from where token is being transfered.",
          "to": "Address to where token is being transfered.",
          "tokenId": "Token id that is being minted, Transfered, or burned."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Requires the sender to be in the approved addresses.",
        "params": {
          "to": "The address to approve.",
          "tokenId": "The affected token."
        }
      },
      "arweaveURI(uint256)": {
        "details": "Concatenates 2 sections of the arweave URI.",
        "params": {
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "string The URI."
        }
      },
      "balanceOf(address)": {
        "details": "Used to see total amount of tokens owned by a specific wallet.",
        "params": {
          "wallet": "Address for which to get token balance."
        },
        "returns": {
          "_0": "uint256 Returns an integer, representing total amount of tokens held by address."
        }
      },
      "baseURI()": {
        "details": "Concatenates with the CXIP domain name.",
        "returns": {
          "_0": "string the token URI."
        }
      },
      "burn(uint256)": {
        "details": "The sender must be the owner or approved.",
        "params": {
          "tokenId": "The token to burn."
        }
      },
      "constructor": {
        "details": "To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \"init\" function instead."
      },
      "contractURI()": {
        "details": "Concatenates to https://nft.cxip.dev/.",
        "returns": {
          "_0": "string The URI."
        }
      },
      "creator(uint256)": {
        "details": "If the token Id doesn't exist it will return zero address.",
        "params": {
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "address Creator's address."
        }
      },
      "cxipMint(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))": {
        "details": "Includes event with the Arwave token URI.",
        "params": {
          "id": "The new tokenId.",
          "tokenData": "The token data for the NFT."
        },
        "returns": {
          "_0": "uint256 The new tokenId."
        }
      },
      "getApproved(uint256)": {
        "details": "Single operator set for a specific token. Usually used for one-time very specific authorisations.",
        "params": {
          "tokenId": "Token id to get approved operator for."
        },
        "returns": {
          "_0": "address Approved address for token."
        }
      },
      "getIdentity()": {
        "details": "Goes up the chain to read from the registry.",
        "returns": {
          "_0": "address Identity contract address."
        }
      },
      "httpURI(uint256)": {
        "details": "Concatenates to the baseURI.",
        "returns": {
          "_0": "string The URI."
        }
      },
      "init(address,(bytes32,bytes32,bytes32,address,uint96))": {
        "details": "Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.",
        "params": {
          "collectionData": "The collection data.",
          "newOwner": "The owner of the collection."
        }
      },
      "ipfsURI(uint256)": {
        "details": "Concatenates to the IPFS domain.",
        "params": {
          "tokenId": "Id of the token."
        },
        "returns": {
          "_0": "string The URI."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Includes references to OpenSea and Rarible marketplace proxies.",
        "params": {
          "operator": "Address of the marketplace operator.",
          "wallet": "Address of the wallet."
        },
        "returns": {
          "_0": "bool True if approved."
        }
      },
      "isOwner()": {
        "details": "The owner could also be the admin or identity contract of the owner.",
        "returns": {
          "_0": "bool True if owner."
        }
      },
      "name()": {
        "details": "Uses two names to extend the max length of the collection name in bytes",
        "returns": {
          "_0": "string The collection name."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "We have this blank function in place to make sure that external contract sending in NFTs don't error out.Since it's not being used, the _operator variable is commented out to avoid compiler warnings.Since it's not being used, the _from variable is commented out to avoid compiler warnings.Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.Since it's not being used, the _data variable is commented out to avoid compiler warnings.",
        "returns": {
          "_0": "bytes4 Returns the interfaceId of onERC721Received."
        }
      },
      "owner()": {
        "details": "_owner is first set in init.",
        "returns": {
          "_0": "address Of ower."
        }
      },
      "ownerOf(uint256)": {
        "details": "The token must exist.",
        "params": {
          "tokenId": "The token to look up."
        },
        "returns": {
          "_0": "address Owner of the token."
        }
      },
      "payloadHash(uint256)": {
        "details": "Payload is used for verification.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "bytes32 The hash."
        }
      },
      "payloadSignature(uint256)": {
        "details": "Used for signature verification.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "Verification a struct containing v, r, s values of the signature."
        }
      },
      "payloadSigner(uint256)": {
        "details": "The creator signs a payload while creating the NFT.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "address The creator."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must exist and be owned by `from`."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Since it's not being used, the _data variable is commented out to avoid compiler warnings. are aware of the ERC721 protocol to prevent tokens from being forever locked.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must exist and be owned by `from`."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.",
        "params": {
          "approved": "Turn on or off approval status.",
          "to": "The address to approve."
        }
      },
      "setName(bytes32,bytes32)": {
        "details": "The name is split in two for gas optimization.",
        "params": {
          "newName": "First part of name.",
          "newName2": "Second part of name."
        }
      },
      "setSymbol(bytes32)": {
        "details": "This is the ticker symbol for smart contract that shows up on EtherScan.",
        "params": {
          "newSymbol": "The ticker symbol to set for smart contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Must add new 4 byte interface Ids here to acknowledge support",
        "params": {
          "interfaceId": "ERC165 style 4 byte interfaceId."
        },
        "returns": {
          "_0": "bool True if supported."
        }
      },
      "symbol()": {
        "details": "Trims the symbol.",
        "returns": {
          "_0": "string The symbol."
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Helpful for token enumeration where token id info is not yet available.",
        "params": {
          "index": "Index of token in array."
        },
        "returns": {
          "_0": "uint256 Returns the token id of token located at that index."
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.",
        "params": {
          "index": "Index of token in array.",
          "wallet": "Specific address for which to get token for."
        },
        "returns": {
          "_0": "uint256 Returns the token id of token located at that index in specified wallet."
        }
      },
      "tokenURI(uint256)": {
        "details": "Defaults the the Arweave URI",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "string The URI."
        }
      },
      "tokensOfOwner(address)": {
        "params": {
          "wallet": "The wallet address to get tokens for."
        },
        "returns": {
          "_0": "uint256[] Returns an array of token ids owned by wallet."
        }
      },
      "totalSupply()": {
        "details": "Ignores burned tokens.",
        "returns": {
          "_0": "uint256 Returns the total number of active (not burned) tokens."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must be owned by `from`."
        }
      },
      "transferFrom(address,address,uint256,bytes)": {
        "details": "WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.Since it's not being used, the _data variable is commented out to avoid compiler warnings.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must be owned by `from`."
        }
      },
      "transferOwnership(address)": {
        "details": "Can't be the zero address.",
        "params": {
          "newOwner": "Address of new owner."
        }
      },
      "verifySHA256(bytes32,bytes)": {
        "details": "Uses sha256 instead of keccak.",
        "params": {
          "hash": "The hash to check.",
          "payload": "The payload prehashed."
        },
        "returns": {
          "_0": "bool True if the hashes match."
        }
      }
    },
    "stateVariables": {
      "_admin": {
        "details": "Address of admin user. Primarily used as an additional recover address."
      },
      "_allTokens": {
        "details": "Array of all token ids in collection."
      },
      "_collectionData": {
        "details": "Stores default collection data: name, symbol, and royalties."
      },
      "_currentTokenId": {
        "details": "Internal last minted token id, to allow for auto-increment."
      },
      "_operatorApprovals": {
        "details": "Usually utilised for supporting marketplace proxy wallets."
      },
      "_ownedTokens": {
        "details": "Map of array of token ids owned by a specific address."
      },
      "_ownedTokensCount": {
        "details": "Map of total tokens owner by a specific address."
      },
      "_ownedTokensIndex": {
        "details": "Map of token id to array index of _ownedTokens."
      },
      "_owner": {
        "details": "Address of contract owner. This address can run all onlyOwner functions."
      },
      "_tokenApprovals": {
        "details": "1-to-1 map of token id that was assigned an approved operator address."
      },
      "_tokenData": {
        "details": "Token data mapped by token id."
      },
      "_tokenOwner": {
        "details": "Token id to wallet (owner) address map."
      },
      "_totalTokens": {
        "details": "Simple tracker of all minted (not-burned) tokens."
      }
    },
    "title": "CXIP ERC721",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "Event emitted when an address delegates power, for a token, to another address."
      },
      "ApprovalForAll(address,address,bool)": {
        "notice": "Event emitted when an address authorises an operator (third-party)."
      },
      "PermanentURI(string,uint256)": {
        "notice": "Event emitted to signal to OpenSea that a permanent URI was created."
      },
      "Transfer(address,address,uint256)": {
        "notice": "Event emitted when an token is minted, transfered, or burned."
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Adds a new address to the token's approval list."
      },
      "arweaveURI(uint256)": {
        "notice": "Gets the URI of the NFT on Arweave."
      },
      "balanceOf(address)": {
        "notice": "Get total number of tokens owned by wallet."
      },
      "baseURI()": {
        "notice": "Get a base URI for the token."
      },
      "burn(uint256)": {
        "notice": "Burns the token."
      },
      "constructor": {
        "notice": "Constructor is empty and not utilised."
      },
      "contractURI()": {
        "notice": "Gets the URI of the NFT backup from CXIP."
      },
      "creator(uint256)": {
        "notice": "Gets the creator's address."
      },
      "cxipMint(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))": {
        "notice": "Mints and NFT."
      },
      "getApproved(uint256)": {
        "notice": "Gets the approved address for the token."
      },
      "getIdentity()": {
        "notice": "Get the associated identity for the collection."
      },
      "httpURI(uint256)": {
        "notice": "Gets the HTTP URI of the token."
      },
      "init(address,(bytes32,bytes32,bytes32,address,uint96))": {
        "notice": "Initializes the collection."
      },
      "ipfsURI(uint256)": {
        "notice": "Gets the IPFS URI"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Checks if the address is approved."
      },
      "isOwner()": {
        "notice": "Check if the sender is the owner."
      },
      "name()": {
        "notice": "Gets the name of the collection."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Empty function that is triggered by external contract on NFT transfer."
      },
      "owner()": {
        "notice": "Gets the owner's address."
      },
      "ownerOf(uint256)": {
        "notice": "Checks who the owner of a token is."
      },
      "payloadHash(uint256)": {
        "notice": "Gets the hash of the NFT data used to create it."
      },
      "payloadSignature(uint256)": {
        "notice": "Gets the signature of the signed NFT data used to create it."
      },
      "payloadSigner(uint256)": {
        "notice": "Gets the address of the creator."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Adds a new approved operator."
      },
      "setName(bytes32,bytes32)": {
        "notice": "Sets a name for the collection."
      },
      "setSymbol(bytes32)": {
        "notice": "Set a symbol for the collection."
      },
      "supportsInterface(bytes4)": {
        "notice": "Shows the interfaces the contracts support"
      },
      "symbol()": {
        "notice": "Gets the collection's symbol."
      },
      "tokenByIndex(uint256)": {
        "notice": "Get token by index instead of token id."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Get token from wallet by index instead of token id."
      },
      "tokenURI(uint256)": {
        "notice": "Get's the URI of the token."
      },
      "tokensOfOwner(address)": {
        "notice": "Get list of tokens owned by wallet."
      },
      "totalSupply()": {
        "notice": "Total amount of tokens in the collection."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers `tokenId` token from `from` to `to`."
      },
      "transferFrom(address,address,uint256,bytes)": {
        "notice": "Transfers `tokenId` token from `from` to `to`."
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the collection."
      },
      "verifySHA256(bytes32,bytes)": {
        "notice": "Checks if a given hash matches a payload hash."
      }
    },
    "notice": "A smart contract for minting and managing ERC721 NFTs.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 523,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_collectionData",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(CollectionData)8974_storage"
      },
      {
        "astId": 526,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_currentTokenId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 530,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_allTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 535,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 540,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_tokenOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 545,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 550,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_ownedTokensCount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 556,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 563,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 569,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_tokenData",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(TokenData)9045_storage)"
      },
      {
        "astId": 572,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_admin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 575,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 578,
        "contract": "contracts/CxipERC721.sol:CxipERC721",
        "label": "_totalTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes11": {
        "encoding": "inplace",
        "label": "bytes11",
        "numberOfBytes": "11"
      },
      "t_bytes14": {
        "encoding": "inplace",
        "label": "bytes14",
        "numberOfBytes": "14"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)9045_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)9045_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CollectionData)8974_storage": {
        "encoding": "inplace",
        "label": "struct CollectionData",
        "members": [
          {
            "astId": 8965,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8967,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "name2",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8969,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "symbol",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 8971,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "royalties",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8973,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "bps",
            "offset": 20,
            "slot": "3",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenData)9045_storage": {
        "encoding": "inplace",
        "label": "struct TokenData",
        "members": [
          {
            "astId": 9031,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "payloadHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9034,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "payloadSignature",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Verification)9060_storage"
          },
          {
            "astId": 9036,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9038,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "arweave",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 9040,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "arweave2",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes11"
          },
          {
            "astId": 9042,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "ipfs",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 9044,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "ipfs2",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes14"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Verification)9060_storage": {
        "encoding": "inplace",
        "label": "struct Verification",
        "members": [
          {
            "astId": 9055,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "r",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9057,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "s",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9059,
            "contract": "contracts/CxipERC721.sol:CxipERC721",
            "label": "v",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}