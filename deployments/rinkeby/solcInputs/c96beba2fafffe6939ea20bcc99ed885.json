{
  "language": "Solidity",
  "sources": {
    "contracts/CxipFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\n\n/*______/\\\\\\\\\\\\\\\\\\__/\\\\\\_______/\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\___\n _____/\\\\\\////////__\\///\\\\\\___/\\\\\\/__\\/////\\\\\\///__\\/\\\\\\/////////\\\\\\_\n  ___/\\\\\\/_____________\\///\\\\\\\\\\\\/________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\n   __/\\\\\\_________________\\//\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\n    _\\/\\\\\\__________________\\/\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\/////////____\n     _\\//\\\\\\_________________/\\\\\\\\\\\\_________\\/\\\\\\_____\\/\\\\\\_____________\n      __\\///\\\\\\_____________/\\\\\\////\\\\\\_______\\/\\\\\\_____\\/\\\\\\_____________\n       ____\\////\\\\\\\\\\\\\\\\\\__/\\\\\\/___\\///\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_____________\n        _______\\/////////__\\///_______\\///__\\///////////__\\///____________*/\n\n/**\n * @title CXIP Factory\n * @author CXIP-Labs\n * @notice Smart contract for deploying CXIP specific contracts.\n * @dev Custom smart contract to achieve target deployment addresses via salt and create2.\n */\ncontract CxipFactory {\n    /**\n     * @dev Address of contract owner. This address can run all onlyOwner functions.\n     */\n    address private _owner;\n\n    /**\n     * @notice Event emitted when a smart contract is deployed.\n     * @dev Event used for transparent auditing of all smart contracts deployed for CXIP.\n     * @param contractAddress Address of the deployed smart contract.\n     * @param salt Salt/hash that was used in conjunction with bytecode for create2.\n     */\n    event Deployed(address indexed contractAddress, uint256 indexed salt);\n    /**\n     * @notice Event emitted when contract ownership is transfered to another address.\n     * @dev Event used for transparent auditing when another address takes ownership of the contract.\n     * @param previousOwner Address of the previous contract owner.\n     * @param newOwner Address of the new contract owner.\n     */\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @notice Constructor is empty and not utilised.\n     * @dev No variables are passed in, owner is set to that of transaction creator.\n     */\n    constructor() {\n        _setOwner(tx.origin);\n    }\n\n    /**\n     * @notice Get current owner of smart contract.\n     * @return address Returns the address of the current contract owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Special modifier to only allow an owner to run a function.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @notice Create a smart contract from the bytecode and salt.\n     * @dev You can include constructor arguments at the end of your bytecode.\n     * @param code The entire bytecode of the smart contract to create.\n     * @param salt A salt/hash to use with create2 to deploy to a specific address.\n     */\n    function deploy(bytes memory code, uint256 salt) public onlyOwner {\n        address addr;\n        assembly {\n            addr := create2(0, add(code, 0x20), mload(code), salt)\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n        emit Deployed(addr, salt);\n    }\n\n    /**\n     * @notice Remove owner from smart contract.\n     * @dev Avoid using this function, unless you will never need to use this smart contract again.\n     */\n    function renounceOwnership() public onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @notice Transfer ownership of smart contract to another address.\n     * @dev This is irreversible, so take great care who you transfer ownership to.\n     * @param newOwner Address of the new owner for smart contract.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Internal short-hand function for getting address of caller.\n     * @return address Returns the address of contract/wallet that is currently interacting with this smart contract.\n     */\n    function _msgSender() internal view returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Internal function that sets owner of the smart contract. Only used on initialisation.\n     */\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}