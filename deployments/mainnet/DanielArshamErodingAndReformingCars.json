{
  "address": "0x0000000000000000000000000000000000000000",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "arweaveURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creatorWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdentity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntervalConfig",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "intervals",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintingClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "mintingClosed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenSeparator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenSeparator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "httpURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name2",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "symbol",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "royalties",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "bps",
              "type": "uint96"
            }
          ],
          "internalType": "struct CollectionData",
          "name": "collectionData",
          "type": "tuple"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ipfsURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadSignature",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Verification",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "payloadSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "payloadHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Verification",
              "name": "payloadSignature",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "arweave",
              "type": "bytes32"
            },
            {
              "internalType": "bytes11",
              "name": "arweave2",
              "type": "bytes11"
            },
            {
              "internalType": "bytes32",
              "name": "ipfs",
              "type": "bytes32"
            },
            {
              "internalType": "bytes14",
              "name": "ipfs2",
              "type": "bytes14"
            }
          ],
          "internalType": "struct TokenData",
          "name": "tokenData",
          "type": "tuple"
        }
      ],
      "name": "prepareMintData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "payloadHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Verification",
              "name": "payloadSignature",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "arweave",
              "type": "bytes32"
            },
            {
              "internalType": "bytes11",
              "name": "arweave2",
              "type": "bytes11"
            },
            {
              "internalType": "bytes32",
              "name": "ipfs",
              "type": "bytes32"
            },
            {
              "internalType": "bytes14",
              "name": "ipfs2",
              "type": "bytes14"
            }
          ],
          "internalType": "struct TokenData[]",
          "name": "tokenData",
          "type": "tuple[]"
        }
      ],
      "name": "prepareMintDataBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "intervals",
          "type": "uint256[4]"
        }
      ],
      "name": "setIntervalConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setMintingClosed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "newName2",
          "type": "bytes32"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "setStartTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newSymbol",
          "type": "bytes32"
        }
      ],
      "name": "setSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenLimit",
          "type": "uint256"
        }
      ],
      "name": "setTokenLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenSeparator",
          "type": "uint256"
        }
      ],
      "name": "setTokenSeparator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf8264252cacd2d63cc507db9c6c9ae893bf870029c284acfa43a15db2a61df64",
  "receipt": {
    "to": null,
    "from": "0x9E22aA58Bf2F5E60801b90FDD3b51B65d38eA20b",
    "contractAddress": "0xD7660c27956dAc5153D29962ae4d98a334f0817c",
    "transactionIndex": 9,
    "gasUsed": "3033671",
    "logsBloom": "0x
    "blockHash": "0x98b540f923a820da5a19aa95d94f4dab9c2837835b1bd07ef32c0e0f76e0df89",
    "transactionHash": "0xf8264252cacd2d63cc507db9c6c9ae893bf870029c284acfa43a15db2a61df64",
    "logs": [],
    "blockNumber": 10533428,
    "cumulativeGasUsed": "5437010",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "0d18f41678e5bb00326a68765bdce346",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"arweaveURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntervalConfig\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"intervals\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintingClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"mintingClosed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenSeparator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSeparator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"httpURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"royalties\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"internalType\":\"struct CollectionData\",\"name\":\"collectionData\",\"type\":\"tuple\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ipfsURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadSignature\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payloadSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"payloadSignature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"arweave\",\"type\":\"bytes32\"},{\"internalType\":\"bytes11\",\"name\":\"arweave2\",\"type\":\"bytes11\"},{\"internalType\":\"bytes32\",\"name\":\"ipfs\",\"type\":\"bytes32\"},{\"internalType\":\"bytes14\",\"name\":\"ipfs2\",\"type\":\"bytes14\"}],\"internalType\":\"struct TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"name\":\"prepareMintData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Verification\",\"name\":\"payloadSignature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"arweave\",\"type\":\"bytes32\"},{\"internalType\":\"bytes11\",\"name\":\"arweave2\",\"type\":\"bytes11\"},{\"internalType\":\"bytes32\",\"name\":\"ipfs\",\"type\":\"bytes32\"},{\"internalType\":\"bytes14\",\"name\":\"ipfs2\",\"type\":\"bytes14\"}],\"internalType\":\"struct TokenData[]\",\"name\":\"tokenData\",\"type\":\"tuple[]\"}],\"name\":\"prepareMintDataBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"intervals\",\"type\":\"uint256[4]\"}],\"name\":\"setIntervalConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMintingClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newName2\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newSymbol\",\"type\":\"bytes32\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenLimit\",\"type\":\"uint256\"}],\"name\":\"setTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSeparator\",\"type\":\"uint256\"}],\"name\":\"setTokenSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emits event that informs of address approving a third-party operator for a particular token.\",\"params\":{\"operator\":\"Address of the third-party operator approved for interaction.\",\"tokenId\":\"A specific token id that is being authorised to operator.\",\"wallet\":\"Address of the wallet configuring a token operator.\"}},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emits event that informs of address approving/denying a third-party operator.\",\"params\":{\"approved\":\"A boolean indicating whether approval was granted or revoked.\",\"operator\":\"Address of the third-party operator that interacts on behalf of the wallet.\",\"wallet\":\"Address of the wallet configuring it's operator.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.\",\"params\":{\"from\":\"Address from where token is being transfered.\",\"to\":\"Address to where token is being transfered.\",\"tokenId\":\"Token id that is being minted, Transfered, or burned.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Requires the sender to be in the approved addresses.\",\"params\":{\"to\":\"The address to approve.\",\"tokenId\":\"The affected token.\"}},\"arweaveURI(uint256)\":{\"details\":\"Concatenates 2 sections of the arweave URI.\",\"returns\":{\"_0\":\"string The URI.\"}},\"balanceOf(address)\":{\"details\":\"Used to see total amount of tokens owned by a specific wallet.\",\"params\":{\"wallet\":\"Address for which to get token balance.\"},\"returns\":{\"_0\":\"uint256 Returns an integer, representing total amount of tokens held by address.\"}},\"baseURI()\":{\"details\":\"Concatenates with the CXIP domain name.\",\"returns\":{\"_0\":\"string the token URI.\"}},\"batchMint(address,uint256,uint256,address)\":{\"details\":\"Limited to maximum number of NFTs that can be minted for this drop. Needs to be called in tokenId sequence.\",\"params\":{\"creatorWallet\":\"The wallet address of the NFT creator.\",\"length\":\"The total number of NFTs to mint starting from the startId.\",\"recipient\":\"Optional parameter, to send the token to a recipient right after minting.\",\"startId\":\"The tokenId from which to start batch mint.\"}},\"burn(uint256)\":{\"details\":\"The sender must be the owner or approved.\",\"params\":{\"tokenId\":\"The token to burn.\"}},\"constructor\":{\"details\":\"To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \\\"init\\\" function instead.\"},\"contractURI()\":{\"details\":\"Concatenates to https://nft.cxip.io/.\",\"returns\":{\"_0\":\"string The URI.\"}},\"creator(uint256)\":{\"details\":\"If the token Id doesn't exist it will return zero address.\",\"returns\":{\"_0\":\"address Creator's address.\"}},\"getApproved(uint256)\":{\"details\":\"Single operator set for a specific token. Usually used for one-time very specific authorisations.\",\"params\":{\"tokenId\":\"Token id to get approved operator for.\"},\"returns\":{\"_0\":\"address Approved address for token.\"}},\"getIdentity()\":{\"details\":\"Goes up the chain to read from the registry.\",\"returns\":{\"_0\":\"address Identity contract address.\"}},\"getMintingClosed()\":{\"details\":\"Gets the minting status from storage slot.\",\"returns\":{\"mintingClosed\":\"Whether minting is open or closed permanently.\"}},\"getTokenLimit()\":{\"details\":\"Gets the token limit from storage slot.\",\"returns\":{\"tokenLimit\":\"Maximum number of tokens that can be minted.\"}},\"getTokenSeparator()\":{\"details\":\"Gets the token separator from storage slot.\",\"returns\":{\"tokenSeparator\":\"The number of tokens before separation.\"}},\"httpURI(uint256)\":{\"details\":\"Concatenates to the baseURI.\",\"returns\":{\"_0\":\"string The URI.\"}},\"init(address,(bytes32,bytes32,bytes32,address,uint96))\":{\"details\":\"Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.\",\"params\":{\"collectionData\":\"The collection data.\",\"newOwner\":\"The owner of the collection.\"}},\"ipfsURI(uint256)\":{\"details\":\"Concatenates to the IPFS domain.\",\"returns\":{\"_0\":\"string The URI.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Includes references to OpenSea and Rarible marketplace proxies.\",\"params\":{\"operator\":\"Address of the marketplace operator.\",\"wallet\":\"Address of the wallet.\"},\"returns\":{\"_0\":\"bool True if approved.\"}},\"isOwner()\":{\"details\":\"The owner could also be the admin or identity contract of the owner.\",\"returns\":{\"_0\":\"bool True if owner.\"}},\"name()\":{\"details\":\"Uses two names to extend the max length of the collection name in bytes\",\"returns\":{\"_0\":\"string The collection name.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"We have this blank function in place to make sure that external contract sending in NFTs don't error out.Since it's not being used, the _operator variable is commented out to avoid compiler warnings.Since it's not being used, the _from variable is commented out to avoid compiler warnings.Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.Since it's not being used, the _data variable is commented out to avoid compiler warnings.\",\"returns\":{\"_0\":\"bytes4 Returns the interfaceId of onERC721Received.\"}},\"owner()\":{\"details\":\"_owner is first set in init.\",\"returns\":{\"_0\":\"address Of ower.\"}},\"ownerOf(uint256)\":{\"details\":\"The token must exist.\",\"params\":{\"tokenId\":\"The token to look up.\"},\"returns\":{\"_0\":\"address Owner of the token.\"}},\"payloadHash(uint256)\":{\"details\":\"Payload is used for verification.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"bytes32 The hash.\"}},\"payloadSignature(uint256)\":{\"details\":\"Used for signature verification.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"Verification a struct containing v, r, s values of the signature.\"}},\"payloadSigner(uint256)\":{\"details\":\"The creator signs a payload while creating the NFT.\",\"params\":{\"tokenId\":\"The Id of the token.\"},\"returns\":{\"_0\":\"address The creator.\"}},\"prepareMintData(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))\":{\"details\":\"Time-based states will be retrieved by index.\",\"params\":{\"id\":\"The index of time slot to set for.\",\"tokenData\":\"The token data for the particular time slot.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must exist and be owned by `from`.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Since it's not being used, the _data variable is commented out to avoid compiler warnings. are aware of the ERC721 protocol to prevent tokens from being forever locked.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must exist and be owned by `from`.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.\",\"params\":{\"approved\":\"Turn on or off approval status.\",\"to\":\"The address to approve.\"}},\"setMintingClosed()\":{\"details\":\"Sets the minting status to closed in storage slot.\"},\"setName(bytes32,bytes32)\":{\"details\":\"The name is split in two for gas optimization.\",\"params\":{\"newName\":\"First part of name.\",\"newName2\":\"Second part of name.\"}},\"setStartTimestamp(uint256)\":{\"details\":\"All rotation calculations will use this timestamp as the origin point from which to calculate.\",\"params\":{\"_timestamp\":\"UNIX timestamp in seconds.\"}},\"setSymbol(bytes32)\":{\"details\":\"This is the ticker symbol for smart contract that shows up on EtherScan.\",\"params\":{\"newSymbol\":\"The ticker symbol to set for smart contract.\"}},\"setTokenLimit(uint256)\":{\"details\":\"Sets the token limit to storage slot.\",\"params\":{\"tokenLimit\":\"Maximum number of tokens that can be minted.\"}},\"setTokenSeparator(uint256)\":{\"details\":\"Sets the token separator to storage slot.\",\"params\":{\"tokenSeparator\":\"The number of tokens before separation.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Must add new 4 byte interface Ids here to acknowledge support\",\"params\":{\"interfaceId\":\"ERC165 style 4 byte interfaceId.\"},\"returns\":{\"_0\":\"bool True if supported.\"}},\"symbol()\":{\"details\":\"Trims the symbol.\",\"returns\":{\"_0\":\"string The symbol.\"}},\"tokenByIndex(uint256)\":{\"details\":\"Used in conjunction with totalSupply function to iterate over all tokens in collection.\",\"params\":{\"index\":\"Index of token in array.\"},\"returns\":{\"_0\":\"uint256 Returns the token id of token located at that index.\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.\",\"params\":{\"index\":\"Index of token in array.\",\"wallet\":\"Specific address for which to get token for.\"},\"returns\":{\"_0\":\"uint256 Returns the token id of token located at that index in specified wallet.\"}},\"tokenURI(uint256)\":{\"details\":\"Defaults the the Arweave URI\",\"returns\":{\"_0\":\"string The URI.\"}},\"tokensOfOwner(address)\":{\"params\":{\"wallet\":\"The wallet address to get tokens for.\"},\"returns\":{\"_0\":\"uint256[] Returns an array of token ids owned by wallet.\"}},\"totalSupply()\":{\"details\":\"Ignores burned tokens.\",\"returns\":{\"_0\":\"uint256 Returns the total number of active (not burned) tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must be owned by `from`.\"}},\"transferFrom(address,address,uint256,bytes)\":{\"details\":\"WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.Since it's not being used, the _data variable is commented out to avoid compiler warnings.\",\"params\":{\"from\":\"cannot be the zero address.\",\"to\":\"cannot be the zero address.\",\"tokenId\":\"token must be owned by `from`.\"}},\"transferOwnership(address)\":{\"details\":\"Can't be the zero address.\",\"params\":{\"newOwner\":\"Address of new owner.\"}}},\"stateVariables\":{\"_admin\":{\"details\":\"Address of admin user. Primarily used as an additional recover address.\"},\"_allTokens\":{\"details\":\"Array of all token ids in collection.\"},\"_allTokensIndex\":{\"details\":\"Mapping from token id to position in the allTokens array.\"},\"_collectionData\":{\"details\":\"Stores default collection data: name, symbol, and royalties.\"},\"_currentTokenId\":{\"details\":\"Internal last minted token id, to allow for auto-increment.\"},\"_operatorApprovals\":{\"details\":\"Usually utilised for supporting marketplace proxy wallets.\"},\"_ownedTokens\":{\"details\":\"Map of array of token ids owned by a specific address.\"},\"_ownedTokensCount\":{\"details\":\"Map of total tokens owner by a specific address.\"},\"_ownedTokensIndex\":{\"details\":\"Map of token id to array index of _ownedTokens.\"},\"_owner\":{\"details\":\"Address of contract owner. This address can run all onlyOwner functions.\"},\"_tokenApprovals\":{\"details\":\"1-to-1 map of token id that was assigned an approved operator address.\"},\"_tokenData\":{\"details\":\"Token data mapped by token id.\"},\"_tokenOwner\":{\"details\":\"Token id to wallet (owner) address map.\"},\"_totalTokens\":{\"details\":\"Simple tracker of all minted (not-burned) tokens.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Event emitted when an address delegates power, for a token, to another address.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Event emitted when an address authorises an operator (third-party).\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Event emitted when an token is minted, transfered, or burned.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Adds a new address to the token's approval list.\"},\"arweaveURI(uint256)\":{\"notice\":\"Gets the URI of the NFT on Arweave.\"},\"balanceOf(address)\":{\"notice\":\"Get total number of tokens owned by wallet.\"},\"baseURI()\":{\"notice\":\"Get a base URI for the token.\"},\"batchMint(address,uint256,uint256,address)\":{\"notice\":\"Mints batches of NFTs.\"},\"burn(uint256)\":{\"notice\":\"Burns the token.\"},\"constructor\":{\"notice\":\"Constructor is empty and not utilised.\"},\"contractURI()\":{\"notice\":\"Gets the URI of the NFT backup from CXIP.\"},\"creator(uint256)\":{\"notice\":\"Gets the creator's address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for the token.\"},\"getIdentity()\":{\"notice\":\"Get the associated identity for the collection.\"},\"httpURI(uint256)\":{\"notice\":\"Gets the HTTP URI of the token.\"},\"init(address,(bytes32,bytes32,bytes32,address,uint96))\":{\"notice\":\"Initializes the collection.\"},\"ipfsURI(uint256)\":{\"notice\":\"Gets the IPFS URI\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Checks if the address is approved.\"},\"isOwner()\":{\"notice\":\"Check if the sender is the owner.\"},\"name()\":{\"notice\":\"Gets the name of the collection.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Empty function that is triggered by external contract on NFT transfer.\"},\"owner()\":{\"notice\":\"Gets the owner's address.\"},\"ownerOf(uint256)\":{\"notice\":\"Checks who the owner of a token is.\"},\"payloadHash(uint256)\":{\"notice\":\"Gets the hash of the NFT data used to create it.\"},\"payloadSignature(uint256)\":{\"notice\":\"Gets the signature of the signed NFT data used to create it.\"},\"payloadSigner(uint256)\":{\"notice\":\"Gets the address of the creator.\"},\"prepareMintData(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))\":{\"notice\":\"Set an NFT state.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Adds a new approved operator.\"},\"setName(bytes32,bytes32)\":{\"notice\":\"Sets a name for the collection.\"},\"setStartTimestamp(uint256)\":{\"notice\":\"Sets the start timestamp for token rotations.\"},\"setSymbol(bytes32)\":{\"notice\":\"Set a symbol for the collection.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Shows the interfaces the contracts support\"},\"symbol()\":{\"notice\":\"Gets the collection's symbol.\"},\"tokenByIndex(uint256)\":{\"notice\":\"Get token by index.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Get token from wallet by index instead of token id.\"},\"tokenURI(uint256)\":{\"notice\":\"Get's the URI of the token.\"},\"tokensOfOwner(address)\":{\"notice\":\"Get list of tokens owned by wallet.\"},\"totalSupply()\":{\"notice\":\"Total amount of tokens in the collection.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `tokenId` token from `from` to `to`.\"},\"transferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers `tokenId` token from `from` to `to`.\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the collection.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DanielArshamErosions.sol\":\"DanielArshamErosions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/DanielArshamErosions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*\\n\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551\\n    \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\n    \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2551\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557\\n \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\n \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\n \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\n \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\n \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\n\\n                       ______\\n                      /     /\\\\\\n                     /     /##\\\\\\n                    /     /####\\\\\\n                   /     /######\\\\\\n                  /     /########\\\\\\n                 /     /##########\\\\\\n                /     /#####/\\\\#####\\\\\\n               /     /#####/++\\\\#####\\\\\\n              /     /#####/++++\\\\#####\\\\\\n             /     /#####/\\\\+++++\\\\#####\\\\\\n            /     /#####/  \\\\+++++\\\\#####\\\\\\n           /     /#####/    \\\\+++++\\\\#####\\\\\\n          /     /#####/      \\\\+++++\\\\#####\\\\\\n         /     /#####/        \\\\+++++\\\\#####\\\\\\n        /     /#####/__________\\\\+++++\\\\#####\\\\\\n       /                        \\\\+++++\\\\#####\\\\\\n      /__________________________\\\\+++++\\\\####/\\n      \\\\+++++++++++++++++++++++++++++++++\\\\##/\\n       \\\\+++++++++++++++++++++++++++++++++\\\\/\\n        ``````````````````````````````````\\n\\n              \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n             \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n             \\u2588\\u2588\\u2551      \\u255a\\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n             \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2554\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\n             \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\n              \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\n\\n*/\\n\\nimport \\\"./external/OpenSea.sol\\\";\\nimport \\\"./interface/IERC165.sol\\\";\\nimport \\\"./interface/ICxipERC721.sol\\\";\\nimport \\\"./interface/ICxipIdentity.sol\\\";\\nimport \\\"./interface/ICxipProvenance.sol\\\";\\nimport \\\"./interface/ICxipRegistry.sol\\\";\\nimport \\\"./interface/IPA1D.sol\\\";\\nimport \\\"./library/Address.sol\\\";\\nimport \\\"./library/Bytes.sol\\\";\\nimport \\\"./library/Strings.sol\\\";\\nimport \\\"./struct/CollectionData.sol\\\";\\nimport \\\"./struct/TokenData.sol\\\";\\nimport \\\"./struct/Verification.sol\\\";\\n\\ncontract DanielArshamErosions {\\n    /**\\n     * @dev Stores default collection data: name, symbol, and royalties.\\n     */\\n    CollectionData private _collectionData;\\n\\n    /**\\n     * @dev Internal last minted token id, to allow for auto-increment.\\n     */\\n    uint256 private _currentTokenId;\\n\\n    /**\\n     * @dev Array of all token ids in collection.\\n     */\\n    uint256[] private _allTokens;\\n\\n    /**\\n     * @dev Map of token id to array index of _ownedTokens.\\n     */\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    /**\\n     * @dev Token id to wallet (owner) address map.\\n     */\\n    mapping(uint256 => address) private _tokenOwner;\\n\\n    /**\\n     * @dev 1-to-1 map of token id that was assigned an approved operator address.\\n     */\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    /**\\n     * @dev Map of total tokens owner by a specific address.\\n     */\\n    mapping(address => uint256) private _ownedTokensCount;\\n\\n    /**\\n     * @dev Map of array of token ids owned by a specific address.\\n     */\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    /**\\n     * @notice Map of full operator approval for a particular address.\\n     * @dev Usually utilised for supporting marketplace proxy wallets.\\n     */\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Token data mapped by token id.\\n     */\\n    mapping(uint256 => TokenData) private _tokenData;\\n\\n    /**\\n     * @dev Address of admin user. Primarily used as an additional recover address.\\n     */\\n    address private _admin;\\n\\n    /**\\n     * @dev Address of contract owner. This address can run all onlyOwner functions.\\n     */\\n    address private _owner;\\n\\n    /**\\n     * @dev Simple tracker of all minted (not-burned) tokens.\\n     */\\n    uint256 private _totalTokens;\\n\\n    /**\\n     * @dev Mapping from token id to position in the allTokens array.\\n     */\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @notice Event emitted when an token is minted, transfered, or burned.\\n     * @dev If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.\\n     * @param from Address from where token is being transfered.\\n     * @param to Address to where token is being transfered.\\n     * @param tokenId Token id that is being minted, Transfered, or burned.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Event emitted when an address delegates power, for a token, to another address.\\n     * @dev Emits event that informs of address approving a third-party operator for a particular token.\\n     * @param wallet Address of the wallet configuring a token operator.\\n     * @param operator Address of the third-party operator approved for interaction.\\n     * @param tokenId A specific token id that is being authorised to operator.\\n     */\\n    event Approval(address indexed wallet, address indexed operator, uint256 indexed tokenId);\\n\\n    /**\\n     * @notice Event emitted when an address authorises an operator (third-party).\\n     * @dev Emits event that informs of address approving/denying a third-party operator.\\n     * @param wallet Address of the wallet configuring it's operator.\\n     * @param operator Address of the third-party operator that interacts on behalf of the wallet.\\n     * @param approved A boolean indicating whether approval was granted or revoked.\\n     */\\n    event ApprovalForAll(address indexed wallet, address indexed operator, bool approved);\\n\\n    /**\\n     * @notice Constructor is empty and not utilised.\\n     * @dev To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \\\"init\\\" function instead.\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"CXIP: caller not an owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Left empty on purpose to prevent out of gas errors.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Enables royaltiy functionality at the ERC721 level no other function matches the call.\\n     * @dev See implementation of _royaltiesFallback.\\n     */\\n    fallback() external {\\n        _royaltiesFallback();\\n    }\\n\\n    function getIntervalConfig() public view returns (uint256[4] memory intervals) {\\n        uint64 unpacked;\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.intervalConfig')) - 1);\\n        assembly {\\n            unpacked := sload(\\n                /* slot */\\n                0xf8883f7674e7099512a3eb674d514a03c06b3984f509bd9a7b34673ea2a79349\\n            )\\n        }\\n        intervals[0] = uint256(uint16(unpacked >> 48));\\n        intervals[1] = uint256(uint16(unpacked >> 32));\\n        intervals[2] = uint256(uint16(unpacked >> 16));\\n        intervals[3] = uint256(uint16(unpacked));\\n    }\\n\\n    function setIntervalConfig(uint256[4] memory intervals) external onlyOwner {\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.intervalConfig')) - 1);\\n        uint256 packed = uint256(intervals[0] << 48 | intervals[1] << 32 | intervals[2] << 16 | intervals[3]);\\n        assembly {\\n            sstore(\\n                /* slot */\\n                0xf8883f7674e7099512a3eb674d514a03c06b3984f509bd9a7b34673ea2a79349,\\n                packed\\n            )\\n        }\\n    }\\n\\n    function _calculateRotation(uint256 tokenId) internal view returns (uint256 rotationIndex) {\\n        uint256 configIndex = (tokenId / getTokenSeparator());\\n        uint256 interval = getIntervalConfig()[configIndex - 1];\\n        uint256 remainder = ((block.timestamp - getStartTimestamp()) / interval) % 2;\\n        // (remainder == 0 ? \\\"even\\\" : \\\"odd\\\")\\n        rotationIndex = (configIndex * 2) + remainder;\\n    }\\n\\n    /**\\n     * @notice Gets the URI of the NFT on Arweave.\\n     * @dev Concatenates 2 sections of the arweave URI.\\n     * @return string The URI.\\n     */\\n    function arweaveURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"CXIP: token does not exist\\\");\\n        uint256 index = _calculateRotation(tokenId);\\n        return string(abi.encodePacked(\\\"https://arweave.net/\\\", _tokenData[index].arweave, _tokenData[index].arweave2));\\n    }\\n\\n    /**\\n     * @notice Gets the URI of the NFT backup from CXIP.\\n     * @dev Concatenates to https://nft.cxip.io/.\\n     * @return string The URI.\\n     */\\n    function contractURI() external view returns (string memory) {\\n        return string(abi.encodePacked(\\\"https://nft.cxip.io/\\\", Strings.toHexString(address(this)), \\\"/\\\"));\\n    }\\n\\n    /**\\n     * @notice Gets the creator's address.\\n     * @dev If the token Id doesn't exist it will return zero address.\\n     * @return address Creator's address.\\n     */\\n    function creator(uint256 tokenId) external view returns (address) {\\n        require(_exists(tokenId), \\\"CXIP: token does not exist\\\");\\n        uint256 index = _calculateRotation(tokenId);\\n        return _tokenData[index].creator;\\n    }\\n\\n    /**\\n     * @notice Gets the HTTP URI of the token.\\n     * @dev Concatenates to the baseURI.\\n     * @return string The URI.\\n     */\\n    function httpURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"CXIP: token does not exist\\\");\\n        return string(abi.encodePacked(baseURI(), \\\"/\\\", Strings.toHexString(tokenId)));\\n    }\\n\\n    /**\\n     * @notice Gets the IPFS URI\\n     * @dev Concatenates to the IPFS domain.\\n     * @return string The URI.\\n     */\\n    function ipfsURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"CXIP: token does not exist\\\");\\n        uint256 index = _calculateRotation(tokenId);\\n        return string(abi.encodePacked(\\\"https://ipfs.io/ipfs/\\\", _tokenData[index].ipfs, _tokenData[index].ipfs2));\\n    }\\n\\n    /**\\n     * @notice Gets the name of the collection.\\n     * @dev Uses two names to extend the max length of the collection name in bytes\\n     * @return string The collection name.\\n     */\\n    function name() external view returns (string memory) {\\n        return string(abi.encodePacked(Bytes.trim(_collectionData.name), Bytes.trim(_collectionData.name2)));\\n    }\\n\\n    /**\\n     * @notice Gets the hash of the NFT data used to create it.\\n     * @dev Payload is used for verification.\\n     * @param tokenId The Id of the token.\\n     * @return bytes32 The hash.\\n     */\\n    function payloadHash(uint256 tokenId) external view returns (bytes32) {\\n        require(_exists(tokenId), \\\"CXIP: token does not exist\\\");\\n        uint256 index = _calculateRotation(tokenId);\\n        return _tokenData[index].payloadHash;\\n    }\\n\\n    /**\\n     * @notice Gets the signature of the signed NFT data used to create it.\\n     * @dev Used for signature verification.\\n     * @param tokenId The Id of the token.\\n     * @return Verification a struct containing v, r, s values of the signature.\\n     */\\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory) {\\n        require(_exists(tokenId), \\\"CXIP: token does not exist\\\");\\n        uint256 index = _calculateRotation(tokenId);\\n        return _tokenData[index].payloadSignature;\\n    }\\n\\n    /**\\n     * @notice Gets the address of the creator.\\n     * @dev The creator signs a payload while creating the NFT.\\n     * @param tokenId The Id of the token.\\n     * @return address The creator.\\n     */\\n    function payloadSigner(uint256 tokenId) external view returns (address) {\\n        require(_exists(tokenId), \\\"CXIP: token does not exist\\\");\\n        uint256 index = _calculateRotation(tokenId);\\n        return _tokenData[index].creator;\\n    }\\n\\n    /**\\n     * @notice Shows the interfaces the contracts support\\n     * @dev Must add new 4 byte interface Ids here to acknowledge support\\n     * @param interfaceId ERC165 style 4 byte interfaceId.\\n     * @return bool True if supported.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        if (\\n            interfaceId == 0x01ffc9a7 || // ERC165\\n            interfaceId == 0x80ac58cd || // ERC721\\n            interfaceId == 0x780e9d63 || // ERC721Enumerable\\n            interfaceId == 0x5b5e139f || // ERC721Metadata\\n            interfaceId == 0x150b7a02 || // ERC721TokenReceiver\\n            interfaceId == 0xe8a3d485 || // contractURI()\\n            IPA1D(getRegistry().getPA1D()).supportsInterface(interfaceId)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the collection's symbol.\\n     * @dev Trims the symbol.\\n     * @return string The symbol.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return string(Bytes.trim(_collectionData.symbol));\\n    }\\n\\n    /**\\n     * @notice Get's the URI of the token.\\n     * @dev Defaults the the Arweave URI\\n     * @return string The URI.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"CXIP: token does not exist\\\");\\n        uint256 index = _calculateRotation(tokenId);\\n        return string(abi.encodePacked(\\\"https://arweave.net/\\\", _tokenData[index].arweave, _tokenData[index].arweave2));\\n    }\\n\\n    /**\\n     * @notice Get list of tokens owned by wallet.\\n     * @param wallet The wallet address to get tokens for.\\n     * @return uint256[] Returns an array of token ids owned by wallet.\\n     */\\n    function tokensOfOwner(address wallet) external view returns (uint256[] memory) {\\n        return _ownedTokens[wallet];\\n    }\\n\\n    /**\\n     * @notice Adds a new address to the token's approval list.\\n     * @dev Requires the sender to be in the approved addresses.\\n     * @param to The address to approve.\\n     * @param tokenId The affected token.\\n     */\\n    function approve(address to, uint256 tokenId) public {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        require(to != tokenOwner, \\\"CXIP: can't approve self\\\");\\n        require(_isApproved(msg.sender, tokenId), \\\"CXIP: not approved sender\\\");\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(tokenOwner, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Burns the token.\\n     * @dev The sender must be the owner or approved.\\n     * @param tokenId The token to burn.\\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApproved(msg.sender, tokenId), \\\"CXIP: not approved sender\\\");\\n        address wallet = _tokenOwner[tokenId];\\n        _clearApproval(tokenId);\\n        _tokenOwner[tokenId] = address(0);\\n        emit Transfer(wallet, address(0), tokenId);\\n        _removeTokenFromOwnerEnumeration(wallet, tokenId);\\n    }\\n\\n    /**\\n     * @notice Initializes the collection.\\n     * @dev Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.\\n     * @param newOwner The owner of the collection.\\n     * @param collectionData The collection data.\\n     */\\n    function init(address newOwner, CollectionData calldata collectionData) public {\\n        require(Address.isZero(_admin), \\\"CXIP: already initialized\\\");\\n        _admin = msg.sender;\\n        // temporary set to self, to pass rarible royalties logic trap\\n        _owner = address(this);\\n        _collectionData = collectionData;\\n        IPA1D(address(this)).init (0, payable(collectionData.royalties), collectionData.bps);\\n        // set to actual owner\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     * @param from cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must exist and be owned by `from`.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     * @param from cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must exist and be owned by `from`.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public payable {\\n        require(_isApproved(msg.sender, tokenId), \\\"CXIP: not approved sender\\\");\\n        _transferFrom(from, to, tokenId);\\n        if (Address.isContract(to)) {\\n            // quick sanity check that the contract supports EIP-165 interfaces, and supports onERC721Received\\n            if (IERC165(to).supportsInterface(0x01ffc9a7) && IERC165(to).supportsInterface(0x150b7a02)) {\\n                require(\\n                    ICxipERC721(to).onERC721Received(address(this), from, tokenId, data) == 0x150b7a02,\\n                    \\\"CXIP: onERC721Received fail\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a new approved operator.\\n     * @dev Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.\\n     * @param to The address to approve.\\n     * @param approved Turn on or off approval status.\\n     */\\n    function setApprovalForAll(address to, bool approved) public {\\n        require(to != msg.sender, \\\"CXIP: can't approve self\\\");\\n        _operatorApprovals[msg.sender][to] = approved;\\n        emit ApprovalForAll(msg.sender, to, approved);\\n    }\\n\\n    /**\\n     * @notice Transfers `tokenId` token from `from` to `to`.\\n     * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * @param from  cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must be owned by `from`.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public payable {\\n        transferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Transfers `tokenId` token from `from` to `to`.\\n     * @dev WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.\\n     * @param from  cannot be the zero address.\\n     * @param to cannot be the zero address.\\n     * @param tokenId token must be owned by `from`.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId, bytes memory /*_data*/) public payable {\\n        require(_isApproved(msg.sender, tokenId), \\\"CXIP: not approved sender\\\");\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Mints batches of NFTs.\\n     * @dev Limited to maximum number of NFTs that can be minted for this drop. Needs to be called in tokenId sequence.\\n     * @param creatorWallet The wallet address of the NFT creator.\\n     * @param startId The tokenId from which to start batch mint.\\n     * @param length The total number of NFTs to mint starting from the startId.\\n     * @param recipient Optional parameter, to send the token to a recipient right after minting.\\n     */\\n    function batchMint(address creatorWallet, uint256 startId, uint256 length, address recipient) public onlyOwner {\\n        require(!getMintingClosed(), \\\"CXIP: minting is now closed\\\");\\n        require(_allTokens.length + length <= getTokenLimit(), \\\"CXIP: over token limit\\\");\\n        require(isIdentityWallet(creatorWallet), \\\"CXIP: creator not in identity\\\");\\n        bool hasRecipient = !Address.isZero(recipient);\\n        uint256 tokenId;\\n        for (uint256 i = 0; i < length; i++) {\\n            tokenId = (startId + i);\\n            if (hasRecipient) {\\n                require(!_exists(tokenId), \\\"CXIP: token already exists\\\");\\n                emit Transfer(address(0), creatorWallet, tokenId);\\n                emit Transfer(creatorWallet, recipient, tokenId);\\n                _tokenOwner[tokenId] = recipient;\\n                _addTokenToOwnerEnumeration(recipient, tokenId);\\n            } else {\\n                _mint(creatorWallet, tokenId);\\n            }\\n        }\\n        if (_allTokens.length == getTokenLimit()) {\\n            setMintingClosed();\\n        }\\n    }\\n\\n    function getStartTimestamp() public view returns (uint256 _timestamp) {\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.startTimestamp')) - 1);\\n        assembly {\\n            _timestamp := sload(\\n                /* slot */\\n                0xf2aaccfcfa4e77d7601ed4ebe139368f313960f63d25a2f26ec905d019eba48b\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the minting status from storage slot.\\n     * @return mintingClosed Whether minting is open or closed permanently.\\n     */\\n    function getMintingClosed() public view returns (bool mintingClosed) {\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.mintingClosed')) - 1);\\n        uint256 data;\\n        assembly {\\n            data := sload(\\n                /* slot */\\n                0xab90edbe8f424080ec4ee1e9062e8b7540cbbfd5f4287285e52611030e58b8d4\\n            )\\n        }\\n        mintingClosed = (data == 1);\\n    }\\n\\n    /**\\n     * @dev Sets the minting status to closed in storage slot.\\n     */\\n    function setMintingClosed() public onlyOwner {\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.mintingClosed')) - 1);\\n        uint256 data = 1;\\n        assembly {\\n            sstore(\\n                /* slot */\\n                0xab90edbe8f424080ec4ee1e9062e8b7540cbbfd5f4287285e52611030e58b8d4,\\n                data\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the token limit from storage slot.\\n     * @return tokenLimit Maximum number of tokens that can be minted.\\n     */\\n    function getTokenLimit() public view returns (uint256 tokenLimit) {\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.tokenLimit')) - 1);\\n        assembly {\\n            tokenLimit := sload(\\n                /* slot */\\n                0xb63653e470fa8e7fcc528e0068173a1969fdee5ae0ee29dd58e7b6111b829c56\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the token limit to storage slot.\\n     * @param tokenLimit Maximum number of tokens that can be minted.\\n     */\\n    function setTokenLimit(uint256 tokenLimit) public onlyOwner {\\n        require(getTokenLimit() == 0, \\\"CXIP: token limit already set\\\");\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.tokenLimit')) - 1);\\n        assembly {\\n            sstore(\\n                /* slot */\\n                0xb63653e470fa8e7fcc528e0068173a1969fdee5ae0ee29dd58e7b6111b829c56,\\n                tokenLimit\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the token separator from storage slot.\\n     * @return tokenSeparator The number of tokens before separation.\\n     */\\n    function getTokenSeparator() public view returns (uint256 tokenSeparator) {\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.tokenSeparator')) - 1);\\n        assembly {\\n            tokenSeparator := sload(\\n                /* slot */\\n                0x988145eec05de02f4c5d4ecd419a9617237db574d35b27207657cbd8c5b1f045\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the token separator to storage slot.\\n     * @param tokenSeparator The number of tokens before separation.\\n     */\\n    function setTokenSeparator(uint256 tokenSeparator) public onlyOwner {\\n        require(getTokenSeparator() == 0, \\\"CXIP: separator already set\\\");\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.tokenSeparator')) - 1);\\n        assembly {\\n            sstore(\\n                /* slot */\\n                0x988145eec05de02f4c5d4ecd419a9617237db574d35b27207657cbd8c5b1f045,\\n                tokenSeparator\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Set an NFT state.\\n     * @dev Time-based states will be retrieved by index.\\n     * @param id The index of time slot to set for.\\n     * @param tokenData The token data for the particular time slot.\\n     */\\n    function prepareMintData(uint256 id, TokenData calldata tokenData) public onlyOwner {\\n        require(Address.isZero(_tokenData[id].creator), \\\"CXIP: token data already set\\\");\\n        _tokenData[id] = tokenData;\\n    }\\n\\n    function prepareMintDataBatch(uint256[] calldata ids, TokenData[] calldata tokenData) public onlyOwner {\\n        require(ids.length == tokenData.length, \\\"CXIP: array lengths missmatch\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(Address.isZero(_tokenData[ids[i]].creator), \\\"CXIP: token data already set\\\");\\n            _tokenData[ids[i]] = tokenData[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets a name for the collection.\\n     * @dev The name is split in two for gas optimization.\\n     * @param newName First part of name.\\n     * @param newName2 Second part of name.\\n     */\\n    function setName(bytes32 newName, bytes32 newName2) public onlyOwner {\\n        _collectionData.name = newName;\\n        _collectionData.name2 = newName2;\\n    }\\n\\n    /**\\n     * @notice Sets the start timestamp for token rotations.\\n     * @dev All rotation calculations will use this timestamp as the origin point from which to calculate.\\n     * @param _timestamp UNIX timestamp in seconds.\\n     */\\n    function setStartTimestamp(uint256 _timestamp) public onlyOwner {\\n        // The slot hash has been precomputed for gas optimizaion\\n        // bytes32 slot = bytes32(uint256(keccak256('eip1967.CXIP.DanielArshamErosions.startTimestamp')) - 1);\\n        assembly {\\n            sstore(\\n                /* slot */\\n                0xf2aaccfcfa4e77d7601ed4ebe139368f313960f63d25a2f26ec905d019eba48b,\\n                _timestamp\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Set a symbol for the collection.\\n     * @dev This is the ticker symbol for smart contract that shows up on EtherScan.\\n     * @param newSymbol The ticker symbol to set for smart contract.\\n     */\\n    function setSymbol(bytes32 newSymbol) public onlyOwner {\\n        _collectionData.symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the collection.\\n     * @dev Can't be the zero address.\\n     * @param newOwner Address of new owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(!Address.isZero(newOwner), \\\"CXIP: zero address\\\");\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Get total number of tokens owned by wallet.\\n     * @dev Used to see total amount of tokens owned by a specific wallet.\\n     * @param wallet Address for which to get token balance.\\n     * @return uint256 Returns an integer, representing total amount of tokens held by address.\\n     */\\n    function balanceOf(address wallet) public view returns (uint256) {\\n        require(!Address.isZero(wallet), \\\"CXIP: zero address\\\");\\n        return _ownedTokensCount[wallet];\\n    }\\n\\n    /**\\n     * @notice Get a base URI for the token.\\n     * @dev Concatenates with the CXIP domain name.\\n     * @return string the token URI.\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return string(abi.encodePacked(\\\"https://nft.cxip.io/\\\", Strings.toHexString(address(this))));\\n    }\\n\\n    /**\\n     * @notice Gets the approved address for the token.\\n     * @dev Single operator set for a specific token. Usually used for one-time very specific authorisations.\\n     * @param tokenId Token id to get approved operator for.\\n     * @return address Approved address for token.\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @notice Get the associated identity for the collection.\\n     * @dev Goes up the chain to read from the registry.\\n     * @return address Identity contract address.\\n     */\\n    function getIdentity() public view returns (address) {\\n        return ICxipProvenance(getRegistry().getProvenance()).getWalletIdentity(_owner);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is approved.\\n     * @dev Includes references to OpenSea and Rarible marketplace proxies.\\n     * @param wallet Address of the wallet.\\n     * @param operator Address of the marketplace operator.\\n     * @return bool True if approved.\\n     */\\n    function isApprovedForAll(address wallet, address operator) public view returns (bool) {\\n        return _operatorApprovals[wallet][operator];\\n    }\\n\\n    /**\\n     * @notice Check if the sender is the owner.\\n     * @dev The owner could also be the admin or identity contract of the owner.\\n     * @return bool True if owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return (msg.sender == _owner || msg.sender == _admin || isIdentityWallet(msg.sender));\\n    }\\n\\n    /**\\n     * @notice Gets the owner's address.\\n     * @dev _owner is first set in init.\\n     * @return address Of ower.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Checks who the owner of a token is.\\n     * @dev The token must exist.\\n     * @param tokenId The token to look up.\\n     * @return address Owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        require(!Address.isZero(tokenOwner), \\\"ERC721: token does not exist\\\");\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @notice Get token by index.\\n     * @dev Used in conjunction with totalSupply function to iterate over all tokens in collection.\\n     * @param index Index of token in array.\\n     * @return uint256 Returns the token id of token located at that index.\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        require(index < totalSupply(), \\\"CXIP: index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @notice Get token from wallet by index instead of token id.\\n     * @dev Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.\\n     * @param wallet Specific address for which to get token for.\\n     * @param index Index of token in array.\\n     * @return uint256 Returns the token id of token located at that index in specified wallet.\\n     */\\n    function tokenOfOwnerByIndex(address wallet, uint256 index) public view returns (uint256) {\\n        require(index < balanceOf(wallet));\\n        return _ownedTokens[wallet][index];\\n    }\\n\\n    /**\\n     * @notice Total amount of tokens in the collection.\\n     * @dev Ignores burned tokens.\\n     * @return uint256 Returns the total number of active (not burned) tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @notice Empty function that is triggered by external contract on NFT transfer.\\n     * @dev We have this blank function in place to make sure that external contract sending in NFTs don't error out.\\n     * @dev Since it's not being used, the _operator variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _from variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.\\n     * @dev Since it's not being used, the _data variable is commented out to avoid compiler warnings.\\n     * @return bytes4 Returns the interfaceId of onERC721Received.\\n     */\\n    function onERC721Received(address, /*_operator*/address, /*_from*/uint256, /*_tokenId*/bytes calldata /*_data*/) public pure returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    /**\\n     * @notice Allows retrieval of royalties from the contract.\\n     * @dev This is a default fallback to ensure the royalties are available.\\n     */\\n    function _royaltiesFallback() internal {\\n        address _target = getRegistry().getPA1D();\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), _target, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if an address is an identity contract.\\n     * @dev It must also be registred.\\n     * @param sender Address to check if registered to identity.\\n     * @return bool True if registred identity.\\n     */\\n    function isIdentityWallet(address sender) internal view returns (bool) {\\n        address identity = getIdentity();\\n        if (Address.isZero(identity)) {\\n            return false;\\n        }\\n        return ICxipIdentity(identity).isWalletRegistered(sender);\\n    }\\n\\n    /**\\n     * @dev Get the top-level CXIP Registry smart contract. Function must always be internal to prevent miss-use/abuse through bad programming practices.\\n     * @return ICxipRegistry The address of the top-level CXIP Registry smart contract.\\n     */\\n    function getRegistry() internal pure returns (ICxipRegistry) {\\n        return ICxipRegistry(0x415225c0d082CB195AeE69f490c218def30966da);\\n    }\\n\\n    /**\\n     * @dev Add a newly minted token into managed list of tokens.\\n     * @param to Address of token owner for which to add the token.\\n     * @param tokenId Id of token to add.\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokensCount[to];\\n        _ownedTokensCount[to]++;\\n        _ownedTokens[to].push(tokenId);\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @notice Deletes a token from the approval list.\\n     * @dev Removes from count.\\n     * @param tokenId T.\\n     */\\n    function _clearApproval(uint256 tokenId) private {\\n        delete _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @notice Mints an NFT.\\n     * @dev Can to mint the token to the zero address and the token cannot already exist.\\n     * @param to Address to mint to.\\n     * @param tokenId The new token.\\n     */\\n    function _mint(address to, uint256 tokenId) private {\\n        require(!Address.isZero(to), \\\"CXIP: can't mint a burn\\\");\\n        require(!_exists(tokenId), \\\"CXIP: token already exists\\\");\\n        _tokenOwner[tokenId] = to;\\n        emit Transfer(address(0), to, tokenId);\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n        delete _allTokensIndex[tokenId];\\n        delete _allTokens[lastTokenIndex];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev Remove a token from managed list of tokens.\\n     * @param from Address of token owner for which to remove the token.\\n     * @param tokenId Id of token to remove.\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n        _ownedTokensCount[from]--;\\n        uint256 lastTokenIndex = _ownedTokensCount[from];\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n        if(tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n        if(lastTokenIndex == 0) {\\n            delete _ownedTokens[from];\\n        } else {\\n            delete _ownedTokens[from][lastTokenIndex];\\n            _ownedTokens[from].pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Primary internal function that handles the transfer/mint/burn functionality.\\n     * @param from Address from where token is being transferred. Zero address means it is being minted.\\n     * @param to Address to whom the token is being transferred. Zero address means it is being burned.\\n     * @param tokenId Id of token that is being transferred/minted/burned.\\n     */\\n    function _transferFrom(address from, address to, uint256 tokenId) private {\\n        require(_tokenOwner[tokenId] == from, \\\"CXIP: not from's token\\\");\\n        require(!Address.isZero(to), \\\"CXIP: use burn instead\\\");\\n        _clearApproval(tokenId);\\n        _tokenOwner[tokenId] = to;\\n        emit Transfer(from, to, tokenId);\\n        _removeTokenFromOwnerEnumeration(from, tokenId);\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Checks if the token owner exists.\\n     * @dev If the address is the zero address no owner exists.\\n     * @param tokenId The affected token.\\n     * @return bool True if it exists.\\n     */\\n    function _exists(uint256 tokenId) private view returns (bool) {\\n        address tokenOwner = _tokenOwner[tokenId];\\n        return !Address.isZero(tokenOwner);\\n    }\\n\\n    /**\\n     * @notice Checks if the address is an approved one.\\n     * @dev Uses inlined checks for different usecases of approval.\\n     * @param spender Address of the spender.\\n     * @param tokenId The affected token.\\n     * @return bool True if approved.\\n     */\\n    function _isApproved(address spender, uint256 tokenId) private view returns (bool) {\\n        require(_exists(tokenId));\\n        address tokenOwner = _tokenOwner[tokenId];\\n        return (\\n            spender == tokenOwner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(tokenOwner, spender)\\n        );\\n    }\\n}\",\"keccak256\":\"0xf6c9c258c584f49fd07ba39d806c154fc18efd2e1e3b0bfc6a6aebc69012982c\",\"license\":\"MIT\"},\"contracts/external/OpenSea.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ncontract OpenSeaOwnableDelegateProxy {}\\n\\ncontract OpenSeaProxyRegistry {\\n    mapping(address => OpenSeaOwnableDelegateProxy) public proxies;\\n}\\n\",\"keccak256\":\"0xe89c5cb9b98f9eef93b85b707f8740375fda432662147018de296640f5db1ada\",\"license\":\"MIT\"},\"contracts/interface/ICxipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\nimport \\\"../struct/Verification.sol\\\";\\n\\ninterface ICxipERC721 {\\n    function arweaveURI(uint256 tokenId) external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function creator(uint256 tokenId) external view returns (address);\\n\\n    function httpURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ipfsURI(uint256 tokenId) external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function payloadHash(uint256 tokenId) external view returns (bytes32);\\n\\n    function payloadSignature(uint256 tokenId) external view returns (Verification memory);\\n\\n    function payloadSigner(uint256 tokenId) external view returns (address);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function tokensOfOwner(address wallet) external view returns (uint256[] memory);\\n\\n    function verifySHA256(bytes32 hash, bytes calldata payload) external pure returns (bool);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function init(address newOwner, CollectionData calldata collectionData) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function setApprovalForAll(address to, bool approved) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable;\\n\\n    function cxipMint(uint256 id, TokenData calldata tokenData) external returns (uint256);\\n\\n    function setApprovalForAll(\\n        address from,\\n        address to,\\n        bool approved\\n    ) external;\\n\\n    function setName(bytes32 newName, bytes32 newName2) external;\\n\\n    function setSymbol(bytes32 newSymbol) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function balanceOf(address wallet) external view returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getIdentity() external view returns (address);\\n\\n    function isApprovedForAll(address wallet, address operator) external view returns (bool);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address wallet, uint256 index) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x9663198e9f69416d7325429a056da75c98d64444fa0c542685e080388ee65b37\",\"license\":\"MIT\"},\"contracts/interface/ICxipIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../struct/CollectionData.sol\\\";\\nimport \\\"../struct/InterfaceType.sol\\\";\\nimport \\\"../struct/Token.sol\\\";\\nimport \\\"../struct/TokenData.sol\\\";\\n\\ninterface ICxipIdentity {\\n    function addSignedWallet(\\n        address newWallet,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function addWallet(address newWallet) external;\\n\\n    function connectWallet() external;\\n\\n    function createERC721Token(\\n        address collection,\\n        uint256 id,\\n        TokenData calldata tokenData,\\n        Verification calldata verification\\n    ) external returns (uint256);\\n\\n    function createERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData\\n    ) external returns (address);\\n\\n    function createCustomERC721Collection(\\n        bytes32 saltHash,\\n        address collectionCreator,\\n        Verification calldata verification,\\n        CollectionData calldata collectionData,\\n        bytes32 slot,\\n        bytes memory bytecode\\n    ) external returns (address);\\n\\n    function init(address wallet, address secondaryWallet) external;\\n\\n    function getAuthorizer(address wallet) external view returns (address);\\n\\n    function getCollectionById(uint256 index) external view returns (address);\\n\\n    function getCollectionType(address collection) external view returns (InterfaceType);\\n\\n    function getWallets() external view returns (address[] memory);\\n\\n    function isCollectionCertified(address collection) external view returns (bool);\\n\\n    function isCollectionRegistered(address collection) external view returns (bool);\\n\\n    function isNew() external view returns (bool);\\n\\n    function isOwner() external view returns (bool);\\n\\n    function isTokenCertified(address collection, uint256 tokenId) external view returns (bool);\\n\\n    function isTokenRegistered(address collection, uint256 tokenId) external view returns (bool);\\n\\n    function isWalletRegistered(address wallet) external view returns (bool);\\n\\n    function listCollections(uint256 offset, uint256 length)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function nextNonce(address wallet) external view returns (uint256);\\n\\n    function totalCollections() external view returns (uint256);\\n\\n    function isCollectionOpen(address collection) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x04e91a9e35ef22a807346515245afc515a5f1b0358fa2cb8272cce5bae35f325\",\"license\":\"MIT\"},\"contracts/interface/ICxipProvenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipProvenance {\\n    function createIdentity(\\n        bytes32 saltHash,\\n        address wallet,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256, address);\\n\\n    function createIdentityBatch(\\n        bytes32 saltHash,\\n        address[] memory wallets,\\n        uint8[] memory V,\\n        bytes32[] memory RS\\n    ) external returns (uint256, address);\\n\\n    function getIdentity() external view returns (address);\\n\\n    function getWalletIdentity(address wallet) external view returns (address);\\n\\n    function informAboutNewWallet(address newWallet) external;\\n\\n    function isIdentityValid(address identity) external view returns (bool);\\n\\n    function nextNonce(address wallet) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdea801440658a3db585723764647f20a5232da262891914a8f97f70f1d538508\",\"license\":\"MIT\"},\"contracts/interface/ICxipRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface ICxipRegistry {\\n    function getAsset() external view returns (address);\\n\\n    function getAssetSigner() external view returns (address);\\n\\n    function getAssetSource() external view returns (address);\\n\\n    function getCopyright() external view returns (address);\\n\\n    function getCopyrightSource() external view returns (address);\\n\\n    function getCustomSource(bytes32 name) external view returns (address);\\n\\n    function getCustomSourceFromString(string memory name) external view returns (address);\\n\\n    function getERC1155CollectionSource() external view returns (address);\\n\\n    function getERC721CollectionSource() external view returns (address);\\n\\n    function getIdentitySource() external view returns (address);\\n\\n    function getPA1D() external view returns (address);\\n\\n    function getPA1DSource() external view returns (address);\\n\\n    function getProvenance() external view returns (address);\\n\\n    function getProvenanceSource() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function setAsset(address proxy) external;\\n\\n    function setAssetSigner(address source) external;\\n\\n    function setAssetSource(address source) external;\\n\\n    function setCopyright(address proxy) external;\\n\\n    function setCopyrightSource(address source) external;\\n\\n    function setCustomSource(string memory name, address source) external;\\n\\n    function setERC1155CollectionSource(address source) external;\\n\\n    function setERC721CollectionSource(address source) external;\\n\\n    function setIdentitySource(address source) external;\\n\\n    function setPA1D(address proxy) external;\\n\\n    function setPA1DSource(address source) external;\\n\\n    function setProvenance(address proxy) external;\\n\\n    function setProvenanceSource(address source) external;\\n}\\n\",\"keccak256\":\"0x955bdf21dd441b5f52524655fec5b24a580ab498cf746e736f6a1b92ff36a959\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xef051967d1848e9eb3117e8cb45b7a2d7a54c0aac715c7bcbaf56d8fb85f39e7\",\"license\":\"MIT\"},\"contracts/interface/IPA1D.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"../library/Zora.sol\\\";\\n\\ninterface IPA1D {\\n    function init(\\n        uint256 tokenId,\\n        address payable receiver,\\n        uint256 bp\\n    ) external;\\n\\n    function configurePayouts(address payable[] memory addresses, uint256[] memory bps) external;\\n\\n    function getPayoutInfo()\\n        external\\n        view\\n        returns (address payable[] memory addresses, uint256[] memory bps);\\n\\n    function getEthPayout() external;\\n\\n    function getTokenPayout(address tokenAddress) external;\\n\\n    function getTokenPayoutByName(string memory tokenName) external;\\n\\n    function getTokensPayout(address[] memory tokenAddresses) external;\\n\\n    function getTokensPayoutByName(string[] memory tokenNames) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n\\n    function setRoyalties(\\n        uint256 tokenId,\\n        address payable receiver,\\n        uint256 bp\\n    ) external;\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    function getFeeBps(uint256 tokenId) external view returns (uint256[] memory);\\n\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n\\n    function getRoyalties(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n\\n    function tokenCreator(address contractAddress, uint256 tokenId) external view returns (address);\\n\\n    function calculateRoyaltyFee(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function marketContract() external view returns (address);\\n\\n    function tokenCreators(uint256 tokenId) external view returns (address);\\n\\n    function bidSharesForToken(uint256 tokenId)\\n        external\\n        view\\n        returns (Zora.BidShares memory bidShares);\\n\\n    function getStorageSlot(string calldata slot) external pure returns (bytes32);\\n\\n    function getTokenAddress(string memory tokenName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5737f7397b240725908f0fba96c6f3bf87cd5230530a680aba2c07dd2128936e\",\"license\":\"MIT\"},\"contracts/library/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 &&\\n            codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\\n    }\\n\\n    function isZero(address account) internal pure returns (bool) {\\n        return (account == address(0));\\n    }\\n}\\n\",\"keccak256\":\"0x53828b644743921c47d7b36278f23203cd56d18c1f57a6833cc316558befffef\",\"license\":\"MIT\"},\"contracts/library/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Bytes {\\n    function getBoolean(uint192 _packedBools, uint192 _boolNumber) internal pure returns (bool) {\\n        uint192 flag = (_packedBools >> _boolNumber) & uint192(1);\\n        return (flag == 1 ? true : false);\\n    }\\n\\n    function setBoolean(\\n        uint192 _packedBools,\\n        uint192 _boolNumber,\\n        bool _value\\n    ) internal pure returns (uint192) {\\n        if (_value) {\\n            return _packedBools | (uint192(1) << _boolNumber);\\n        } else {\\n            return _packedBools & ~(uint192(1) << _boolNumber);\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n        bytes memory tempBytes;\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                tempBytes := mload(0x40)\\n                let lengthmod := and(_length, 31)\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n                for {\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n                mstore(tempBytes, _length)\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            default {\\n                tempBytes := mload(0x40)\\n                mstore(tempBytes, 0)\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n        return tempBytes;\\n    }\\n\\n    function trim(bytes32 source) internal pure returns (bytes memory) {\\n        uint256 temp = uint256(source);\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return slice(abi.encodePacked(source), 32 - length, length);\\n    }\\n}\\n\",\"keccak256\":\"0xcd2deba6787d70b02a45d413f123c369ec896f8cadcd0f885d8133e8bdefad6b\",\"license\":\"MIT\"},\"contracts/library/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Strings {\\n    function toHexString(address account) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(account)));\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = bytes16(\\\"0123456789abcdef\\\")[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x341fbf23317cf1ee333cff62957814e8057b4c9c87a9d359db22c9e89c63a43e\",\"license\":\"MIT\"},\"contracts/library/Zora.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nlibrary Zora {\\n    struct Decimal {\\n        uint256 value;\\n    }\\n\\n    struct BidShares {\\n        // % of sale value that goes to the _previous_ owner of the nft\\n        Decimal prevOwner;\\n        // % of sale value that goes to the original creator of the nft\\n        Decimal creator;\\n        // % of sale value that goes to the seller (current owner) of the nft\\n        Decimal owner;\\n    }\\n}\\n\",\"keccak256\":\"0x76a26baf5d8a39f8ac350b0747a96b81bd7a06ce5e013bb34945d8197f9fd731\",\"license\":\"MIT\"},\"contracts/struct/CollectionData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./UriType.sol\\\";\\n\\nstruct CollectionData {\\n    bytes32 name;\\n    bytes32 name2;\\n    bytes32 symbol;\\n    address royalties;\\n    uint96 bps;\\n}\\n\",\"keccak256\":\"0x328167148d845d1945ef8b77f710750d10cd38d2c8510e22ca52ec67781e3b8f\",\"license\":\"MIT\"},\"contracts/struct/InterfaceType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum InterfaceType {\\n    NULL, // 0\\n    ERC20, // 1\\n    ERC721, // 2\\n    ERC1155 // 3\\n}\\n\",\"keccak256\":\"0xed4f93a0fc084fa9d0a55d5e7c11f53e34b4c0d45d93de6ff03f345ae9a52885\",\"license\":\"MIT\"},\"contracts/struct/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./InterfaceType.sol\\\";\\n\\nstruct Token {\\n    address collection;\\n    uint256 tokenId;\\n    InterfaceType tokenType;\\n    address creator;\\n}\\n\",\"keccak256\":\"0xa9c13c64d8f611f96d8b4c39eb42dab1a05d70119f351047ee939e63d3a29e6f\",\"license\":\"MIT\"},\"contracts/struct/TokenData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nimport \\\"./Verification.sol\\\";\\n\\nstruct TokenData {\\n    bytes32 payloadHash;\\n    Verification payloadSignature;\\n    address creator;\\n    bytes32 arweave;\\n    bytes11 arweave2;\\n    bytes32 ipfs;\\n    bytes14 ipfs2;\\n}\\n\",\"keccak256\":\"0xd7288c705f3247427487e4491a7cddb84a42af2a32720a16f75c8950380a717d\",\"license\":\"MIT\"},\"contracts/struct/UriType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\n// This is a 256 value limit (uint8)\\nenum UriType {\\n    ARWEAVE, // 0\\n    IPFS, // 1\\n    HTTP // 2\\n}\\n\",\"keccak256\":\"0xe64f56b37ab2043dd80ae3b06abb928151837a546653ea0bd350d9078ccb29a6\",\"license\":\"MIT\"},\"contracts/struct/Verification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/*______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_______/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\n _____/\\\\\\\\\\\\////////__\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__\\\\/////\\\\\\\\\\\\///__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\n  ___/\\\\\\\\\\\\/_____________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\n   __/\\\\\\\\\\\\_________________\\\\//\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\n    _\\\\/\\\\\\\\\\\\__________________\\\\/\\\\\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\/////////____\\n     _\\\\//\\\\\\\\\\\\_________________/\\\\\\\\\\\\\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n      __\\\\///\\\\\\\\\\\\_____________/\\\\\\\\\\\\////\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_____________\\n       ____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\n        _______\\\\/////////__\\\\///_______\\\\///__\\\\///////////__\\\\///____________*/\\n\\nstruct Verification {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n}\\n\",\"keccak256\":\"0x56a68601446e86e6a5d8bc4dc66df60fb6fb1518c4cc4fd0e9a87d50386a8652\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135eb806100206000396000f3fe6080604052600436106102a25760003560e01c80636c0360eb11610165578063abf3f50e116100cc578063d753dee911610085578063d753dee9146107c8578063e2c85fef146107ea578063e8a3d4851461080a578063e985e9c51461081f578063f1831b931461083f578063f2fde38b1461085f578063f95bb91e1461087f576102a9565b8063abf3f50e14610735578063b22cac7c14610755578063b88d4fde14610775578063c0e68fec14610788578063c44bef75146107a8578063c87b56dd146106ed576102a9565b806395d89b411161011e57806395d89b4114610698578063a076b882146106ad578063a22cb465146106cd578063a546993e146106ed578063a6a22dea1461070d578063ab67aa5814610722576102a9565b80636c0360eb146105ee57806370a08231146106035780637a4a461c146106235780638462151c146106385780638da5cb5b146106655780638f32d59b14610683576102a9565b80632c2dadbc11610209578063475a8035116101c2578063475a80351461054e57806349e654401461056e5780634f6ccce71461058e578063510b5158146102f557806351e32024146105ae5780636352211e146105ce576102a9565b80632c2dadbc1461047c5780632f745c59146104c157806336afc6fa146104e157806341b0cdd1146104f657806342842e0e1461051b57806342966c681461052e576102a9565b8063150b7a021161025b578063150b7a02146103ba57806318160ddd146103f35780631a5c7f92146104125780631f89f25e1461043257806323b872dd146104545780632848558614610467576102a9565b806301ffc9a7146102c057806306ce0db8146102f557806306fdde0314610322578063081812fc14610344578063095ea7b31461037a578063128bfa251461039a576102a9565b366102a957005b3480156102b557600080fd5b506102be61089f565b005b3480156102cc57600080fd5b506102e06102db366004612979565b610942565b60405190151581526020015b60405180910390f35b34801561030157600080fd5b50610315610310366004612996565b610adc565b6040516102ec91906129af565b34801561032e57600080fd5b50610337610b39565b6040516102ec9190612a1b565b34801561035057600080fd5b5061031561035f366004612996565b6000908152600860205260409020546001600160a01b031690565b34801561038657600080fd5b506102be610395366004612a43565b610b79565b3480156103a657600080fd5b506102be6103b5366004612a6f565b610c37565b3480156103c657600080fd5b506103e66103d5366004612ab0565b630a85bd0160e11b95945050505050565b6040516102ec9190612b4f565b3480156103ff57600080fd5b506005545b6040519081526020016102ec565b34801561041e57600080fd5b5061033761042d366004612996565b610d7f565b34801561043e57600080fd5b5060008051602061357683398151915254610404565b6102be610462366004612b64565b610e2d565b34801561047357600080fd5b50610404610e48565b34801561048857600080fd5b5061049c610497366004612996565b610e6d565b6040805182518152602080840151908201529181015160ff16908201526060016102ec565b3480156104cd57600080fd5b506104046104dc366004612a43565b610efc565b3480156104ed57600080fd5b50610315610f4f565b34801561050257600080fd5b50600080516020613556833981519152546001146102e0565b6102be610529366004612b64565b61103e565b34801561053a57600080fd5b506102be610549366004612996565b611059565b34801561055a57600080fd5b50610404610569366004612996565b6110ed565b34801561057a57600080fd5b506102be610589366004612996565b611135565b34801561059a57600080fd5b506104046105a9366004612996565b61115e565b3480156105ba57600080fd5b506103376105c9366004612996565b6111d8565b3480156105da57600080fd5b506103156105e9366004612996565b611237565b3480156105fa57600080fd5b506103376112ab565b34801561060f57600080fd5b5061040461061e366004612ba5565b6112c6565b34801561062f57600080fd5b5061040461130a565b34801561064457600080fd5b50610658610653366004612ba5565b61132f565b6040516102ec9190612bc2565b34801561067157600080fd5b50600e546001600160a01b0316610315565b34801561068f57600080fd5b506102e061139b565b3480156106a457600080fd5b506103376113d0565b3480156106b957600080fd5b506102be6106c8366004612c06565b6113e0565b3480156106d957600080fd5b506102be6106e8366004612c40565b611464565b3480156106f957600080fd5b50610337610708366004612996565b6114f9565b34801561071957600080fd5b506102be61158f565b6102be610730366004612cc0565b6115c7565b34801561074157600080fd5b506102be610750366004612d84565b6115f8565b34801561076157600080fd5b506102be610770366004612996565b611667565b6102be610783366004612cc0565b611704565b34801561079457600080fd5b506102be6107a3366004612996565b6118ff565b3480156107b457600080fd5b506102be6107c3366004612996565b61199c565b3480156107d457600080fd5b506107dd6119d2565b6040516102ec9190612e02565b3480156107f657600080fd5b506102be610805366004612e33565b611a28565b34801561081657600080fd5b50610337611b72565b34801561082b57600080fd5b506102e061083a366004612efc565b611b8d565b34801561084b57600080fd5b506102be61085a366004612f2a565b611bbb565b34801561086b57600080fd5b506102be61087a366004612ba5565b611e0c565b34801561088b57600080fd5b506102be61089a366004612f74565b611e78565b600073415225c0d082cb195aee69f490c218def30966da6001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109179190612f96565b90503660008037600080366000845af43d6000803e808015610938573d6000f35b3d6000fd5b505050565b60006301ffc9a760e01b6001600160e01b03198316148061097357506380ac58cd60e01b6001600160e01b03198316145b8061098e575063780e9d6360e01b6001600160e01b03198316145b806109a95750635b5e139f60e01b6001600160e01b03198316145b806109c45750630a85bd0160e11b6001600160e01b03198316145b806109df575063e8a3d48560e01b6001600160e01b03198316145b80610ac7575073415225c0d082cb195aee69f490c218def30966da6001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5b9190612f96565b6001600160a01b03166301ffc9a7836040518263ffffffff1660e01b8152600401610a869190612b4f565b602060405180830381865afa158015610aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac79190612fb3565b15610ad457506001919050565b506000919050565b6000610ae782611ea7565b610b0c5760405162461bcd60e51b8152600401610b0390612fd0565b60405180910390fd5b6000610b1783611ed0565b6000908152600c60205260409020600401546001600160a01b03169392505050565b6060610b486000800154611f6d565b600154610b5490611f6d565b604051602001610b65929190613007565b604051602081830303815290604052905090565b6000818152600760205260409020546001600160a01b03908116908316811415610bb55760405162461bcd60e51b8152600401610b0390613036565b610bbf3383611fd1565b610bdb5760405162461bcd60e51b8152600401610b0390613068565b60008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600d54610c4c906001600160a01b0316612038565b610c945760405162461bcd60e51b815260206004820152601960248201527810d612540e88185b1c9958591e481a5b9a5d1a585b1a5e9959603a1b6044820152606401610b03565b600d80546001600160a01b03199081163317909155600e805490911630179055806000610cc182826130dd565b5030905063ea2299f86000610cdc6080850160608601612ba5565b610cec60a0860160808701613142565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526001600160601b03166044820152606401600060405180830381600087803b158015610d4357600080fd5b505af1158015610d57573d6000803e3d6000fd5b5050600e80546001600160a01b0319166001600160a01b039590951694909417909355505050565b6060610d8a82611ea7565b610da65760405162461bcd60e51b8152600401610b0390612fd0565b6000610db183611ed0565b6000818152600c602090815260409182902060078101546008909101549251939450610e1693909260901b91017468747470733a2f2f697066732e696f2f697066732f60581b815260158101929092526001600160901b031916603582015260430190565b604051602081830303815290604052915050919050565b61093d838383604051806020016040528060008152506115c7565b7fb63653e470fa8e7fcc528e0068173a1969fdee5ae0ee29dd58e7b6111b829c565490565b6040805160608101825260008082526020820181905291810191909152610e9382611ea7565b610eaf5760405162461bcd60e51b8152600401610b0390612fd0565b6000610eba83611ed0565b6000908152600c60209081526040918290208251606081018452600182015481526002820154928101929092526003015460ff16918101919091529392505050565b6000610f07836112c6565b8210610f1257600080fd5b6001600160a01b0383166000908152600a60205260409020805483908110610f3c57610f3c61315f565b9060005260206000200154905092915050565b600073415225c0d082cb195aee69f490c218def30966da6001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190612f96565b600e546040516309633f5960e31b81526001600160a01b0392831692634b19fac892610ff8929116906004016129af565b602060405180830381865afa158015611015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110399190612f96565b905090565b61093d83838360405180602001604052806000815250611704565b6110633382611fd1565b61107f5760405162461bcd60e51b8152600401610b0390613068565b6000818152600760205260409020546001600160a01b03166110a082612045565b60008281526007602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613596833981519152908390a46110e98183612063565b5050565b60006110f882611ea7565b6111145760405162461bcd60e51b8152600401610b0390612fd0565b600061111f83611ed0565b6000908152600c60205260409020549392505050565b61113d61139b565b6111595760405162461bcd60e51b8152600401610b0390613175565b600255565b600061116960055490565b82106111b35760405162461bcd60e51b8152602060048201526019602482015278435849503a20696e646578206f7574206f6620626f756e647360381b6044820152606401610b03565b600582815481106111c6576111c661315f565b90600052602060002001549050919050565b60606111e382611ea7565b6111ff5760405162461bcd60e51b8152600401610b0390612fd0565b6112076112ab565b611210836121f6565b6040516020016112219291906131a8565b6040516020818303038152906040529050919050565b6000818152600760205260408120546001600160a01b031661125881612038565b156112a55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20646f6573206e6f74206578697374000000006044820152606401610b03565b92915050565b60606112b63061224a565b604051602001610b6591906131e4565b60006112d182612038565b156112ee5760405162461bcd60e51b8152600401610b0390613220565b506001600160a01b031660009081526009602052604090205490565b7f988145eec05de02f4c5d4ecd419a9617237db574d35b27207657cbd8c5b1f0455490565b6001600160a01b0381166000908152600a602090815260409182902080548351818402810184019094528084526060939283018282801561138f57602002820191906000526020600020905b81548152602001906001019080831161137b575b50505050509050919050565b600e546000906001600160a01b03163314806113c15750600d546001600160a01b031633145b8061103957506110393361225e565b6060611039600060020154611f6d565b6113e861139b565b6114045760405162461bcd60e51b8152600401610b0390613175565b6000828152600c6020526040902060040154611428906001600160a01b0316612038565b6114445760405162461bcd60e51b8152600401610b039061324c565b6000828152600c60205260409020819061145e82826132b7565b50505050565b6001600160a01b03821633141561148d5760405162461bcd60e51b8152600401610b0390613036565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b606061150482611ea7565b6115205760405162461bcd60e51b8152600401610b0390612fd0565b600061152b83611ed0565b6000818152600c602090815260409182902060058101546006909101549251939450610e1693909260a81b91017368747470733a2f2f617277656176652e6e65742f60601b815260148101929092526001600160a81b0319166034820152603f0190565b61159761139b565b6115b35760405162461bcd60e51b8152600401610b0390613175565b600160008051602061355683398151915255565b6115d13383611fd1565b6115ed5760405162461bcd60e51b8152600401610b0390613068565b61145e8484846122f6565b61160061139b565b61161c5760405162461bcd60e51b8152600401610b0390613175565b60608101516040820151602080840151935160301b93901b9290921760109290921b91909117177ff8883f7674e7099512a3eb674d514a03c06b3984f509bd9a7b34673ea2a7934955565b61166f61139b565b61168b5760405162461bcd60e51b8152600401610b0390613175565b61169361130a565b156116e05760405162461bcd60e51b815260206004820152601b60248201527f435849503a20736570617261746f7220616c72656164792073657400000000006044820152606401610b03565b7f988145eec05de02f4c5d4ecd419a9617237db574d35b27207657cbd8c5b1f04555565b61170e3383611fd1565b61172a5760405162461bcd60e51b8152600401610b0390613068565b6117358484846122f6565b61173e83612409565b1561145e576040516301ffc9a760e01b81526001600160a01b038416906301ffc9a79061176f90829060040161337b565b602060405180830381865afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190612fb3565b801561182857506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906117e79063150b7a029060040161337b565b602060405180830381865afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190612fb3565b1561145e57604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061185f903090889087908790600401613393565b602060405180830381865afa15801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a091906133d0565b6001600160e01b03191663150b7a0260e01b1461145e5760405162461bcd60e51b815260206004820152601b60248201527f435849503a206f6e4552433732315265636569766564206661696c00000000006044820152606401610b03565b61190761139b565b6119235760405162461bcd60e51b8152600401610b0390613175565b61192b610e48565b156119785760405162461bcd60e51b815260206004820152601d60248201527f435849503a20746f6b656e206c696d697420616c7265616479207365740000006044820152606401610b03565b7fb63653e470fa8e7fcc528e0068173a1969fdee5ae0ee29dd58e7b6111b829c5655565b6119a461139b565b6119c05760405162461bcd60e51b8152600401610b0390613175565b60008051602061357683398151915255565b6119da61290b565b7ff8883f7674e7099512a3eb674d514a03c06b3984f509bd9a7b34673ea2a793495461ffff603082901c81168352602082811c821690840152601082901c8116604084015216606082015290565b611a3061139b565b611a4c5760405162461bcd60e51b8152600401610b0390613175565b828114611a9b5760405162461bcd60e51b815260206004820152601d60248201527f435849503a206172726179206c656e67746873206d6973736d617463680000006044820152606401610b03565b60005b83811015611b6b57611aea600c6000878785818110611abf57611abf61315f565b60209081029290920135835250810191909152604001600020600401546001600160a01b0316612038565b611b065760405162461bcd60e51b8152600401610b039061324c565b828282818110611b1857611b1861315f565b90506101200201600c6000878785818110611b3557611b3561315f565b9050602002013581526020019081526020016000208181611b5691906132b7565b50819050611b6381613403565b915050611a9e565b5050505050565b6060611b7d3061224a565b604051602001610b65919061341e565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b611bc361139b565b611bdf5760405162461bcd60e51b8152600401610b0390613175565b6000805160206135568339815191525460011415611c3f5760405162461bcd60e51b815260206004820152601b60248201527f435849503a206d696e74696e67206973206e6f7720636c6f73656400000000006044820152606401610b03565b611c47610e48565b600554611c55908490613465565b1115611c9c5760405162461bcd60e51b815260206004820152601660248201527510d612540e881bdd995c881d1bdad95b881b1a5b5a5d60521b6044820152606401610b03565b611ca58461225e565b611cf15760405162461bcd60e51b815260206004820152601d60248201527f435849503a2063726561746f72206e6f7420696e206964656e746974790000006044820152606401610b03565b6000611cfc82612038565b1590506000805b84811015611dea57611d158187613465565b91508215611dce57611d2682611ea7565b15611d435760405162461bcd60e51b8152600401610b039061347d565b60405182906001600160a01b03891690600090600080516020613596833981519152908290a481846001600160a01b0316886001600160a01b031660008051602061359683398151915260405160405180910390a4600082815260076020526040902080546001600160a01b0319166001600160a01b038616179055611dc98483612440565b611dd8565b611dd887836124ed565b80611de281613403565b915050611d03565b50611df3610e48565b6005541415611e0457611e0461158f565b505050505050565b611e1461139b565b611e305760405162461bcd60e51b8152600401610b0390613175565b611e3981612038565b15611e565760405162461bcd60e51b8152600401610b0390613220565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b611e8061139b565b611e9c5760405162461bcd60e51b8152600401610b0390613175565b600091909155600155565b6000818152600760205260408120546001600160a01b0316611ec881612038565b159392505050565b600080611edb61130a565b611ee590846134ca565b90506000611ef16119d2565b611efc6001846134de565b60048110611f0c57611f0c61315f565b602002015190506000600282611f2e6000805160206135768339815191525490565b611f3890426134de565b611f4291906134ca565b611f4c91906134f5565b905080611f5a846002613509565b611f649190613465565b95945050505050565b60608160005b8115611f925780611f8381613403565b915050600882901c9150611f73565b611fc984604051602001611fa891815260200190565b60408051601f19818403018152919052611fc38360206134de565b836125b0565b949350505050565b6000611fdc82611ea7565b611fe557600080fd5b6000828152600760205260409020546001600160a01b0390811690841681148061202857506000838152600860205260409020546001600160a01b038581169116145b80611fc95750611fc98185611b8d565b6001600160a01b03161590565b600090815260086020526040902080546001600160a01b0319169055565b61206c816126bd565b6001600160a01b038216600090815260096020526040812080549161209083613528565b90915550506001600160a01b038216600090815260096020908152604080832054848452600690925290912054808214612152576001600160a01b0384166000908152600a602052604081208054849081106120ee576120ee61315f565b9060005260206000200154905080600a6000876001600160a01b03166001600160a01b0316815260200190815260200160002083815481106121325761213261315f565b600091825260208083209091019290925591825260069052604090208190555b8161217d576001600160a01b0384166000908152600a6020526040812061217891612929565b61145e565b6001600160a01b0384166000908152600a602052604090208054839081106121a7576121a761315f565b600091825260208083209091018290556001600160a01b0386168252600a9052604090208054806121da576121da61353f565b6001900381819060005260206000200160009055905550505050565b60608161221d5750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115612240578061223181613403565b915050600882901c9150612221565b611fc9848261276f565b60606112a5826001600160a01b03166121f6565b600080612269610f4f565b905061227481612038565b156122825750600092915050565b604051637f247e4960e01b81526001600160a01b03821690637f247e49906122ae9086906004016129af565b602060405180830381865afa1580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef9190612fb3565b9392505050565b6000818152600760205260409020546001600160a01b038481169116146123585760405162461bcd60e51b815260206004820152601660248201527521ac24a81d103737ba10333937b693b9903a37b5b2b760511b6044820152606401610b03565b61236182612038565b156123a75760405162461bcd60e51b815260206004820152601660248201527510d612540e881d5cd948189d5c9b881a5b9cdd19585960521b6044820152606401610b03565b6123b081612045565b60008181526007602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061359683398151915291a46123ff8382612063565b61093d8282612440565b6000813f80158015906122ef57507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470141592915050565b6001600160a01b0382166000818152600960208181526040808420805487865260068452918520829055948452919052919061247b83613403565b90915550506001600160a01b039091166000908152600a6020908152604080832080546001818101835591855283852001859055600580548686526010909452918420839055820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b6124f682612038565b1561253d5760405162461bcd60e51b815260206004820152601760248201527621ac24a81d1031b0b713ba1036b4b73a103090313ab93760491b6044820152606401610b03565b61254681611ea7565b156125635760405162461bcd60e51b8152600401610b039061347d565b60008181526007602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613596833981519152908290a46110e98282612440565b6060816125be81601f613465565b10156125fd5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610b03565b6126078284613465565b8451101561264b5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610b03565b60608215801561266a57604051915060008252602082016040526126b4565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156126a357805183526020928301920161268b565b5050858452601f01601f1916604052505b50949350505050565b6005546000906126cf906001906134de565b600083815260106020526040812054600580549394509092849081106126f7576126f761315f565b9060005260206000200154905080600583815481106127185761271861315f565b60009182526020808320909101929092558281526010909152604080822084905585825281205560058054849081106127535761275361315f565b600091825260208220015560058054806121da576121da61353f565b6060600061277e836002613509565b612789906002613465565b67ffffffffffffffff8111156127a1576127a1612c79565b6040519080825280601f01601f1916602001820160405280156127cb576020820181803683370190505b509050600360fc1b816000815181106127e6576127e661315f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128155761281561315f565b60200101906001600160f81b031916908160001a9053506000612839846002613509565b612844906001613465565b90505b60018111156128bc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128785761287861315f565b1a60f81b82828151811061288e5761288e61315f565b60200101906001600160f81b031916908160001a90535060049490941c936128b581613528565b9050612847565b5083156122ef5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b03565b60405180608001604052806004906020820280368337509192915050565b5080546000825590600052602060002090810190612947919061294a565b50565b5b8082111561295f576000815560010161294b565b5090565b6001600160e01b03198116811461294757600080fd5b60006020828403121561298b57600080fd5b81356122ef81612963565b6000602082840312156129a857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60005b838110156129de5781810151838201526020016129c6565b8381111561145e5750506000910152565b60008151808452612a078160208601602086016129c3565b601f01601f19169290920160200192915050565b6020815260006122ef60208301846129ef565b6001600160a01b038116811461294757600080fd5b60008060408385031215612a5657600080fd5b8235612a6181612a2e565b946020939093013593505050565b60008082840360c0811215612a8357600080fd5b8335612a8e81612a2e565b925060a0601f1982011215612aa257600080fd5b506020830190509250929050565b600080600080600060808688031215612ac857600080fd5b8535612ad381612a2e565b94506020860135612ae381612a2e565b935060408601359250606086013567ffffffffffffffff80821115612b0757600080fd5b818801915088601f830112612b1b57600080fd5b813581811115612b2a57600080fd5b896020828501011115612b3c57600080fd5b9699959850939650602001949392505050565b6001600160e01b031991909116815260200190565b600080600060608486031215612b7957600080fd5b8335612b8481612a2e565b92506020840135612b9481612a2e565b929592945050506040919091013590565b600060208284031215612bb757600080fd5b81356122ef81612a2e565b6020808252825182820181905260009190848201906040850190845b81811015612bfa57835183529284019291840191600101612bde565b50909695505050505050565b600080828403610140811215612c1b57600080fd5b83359250610120601f1982011215612aa257600080fd5b801515811461294757600080fd5b60008060408385031215612c5357600080fd5b8235612c5e81612a2e565b91506020830135612c6e81612c32565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612cb857612cb8612c79565b604052919050565b60008060008060808587031215612cd657600080fd5b8435612ce181612a2e565b9350602085810135612cf281612a2e565b935060408601359250606086013567ffffffffffffffff80821115612d1657600080fd5b818801915088601f830112612d2a57600080fd5b813581811115612d3c57612d3c612c79565b612d4e601f8201601f19168501612c8f565b91508082528984828501011115612d6457600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060808284031215612d9657600080fd5b82601f830112612da557600080fd5b6040516080810181811067ffffffffffffffff82111715612dc857612dc8612c79565b604052806080840185811115612ddd57600080fd5b845b81811015612df7578035835260209283019201612ddf565b509195945050505050565b60808101818360005b6004811015612e2a578151835260209283019290910190600101612e0b565b50505092915050565b60008060008060408587031215612e4957600080fd5b843567ffffffffffffffff80821115612e6157600080fd5b818701915087601f830112612e7557600080fd5b813581811115612e8457600080fd5b8860208260051b8501011115612e9957600080fd5b602092830196509450908601359080821115612eb457600080fd5b818701915087601f830112612ec857600080fd5b813581811115612ed757600080fd5b88602061012083028501011115612eed57600080fd5b95989497505060200194505050565b60008060408385031215612f0f57600080fd5b8235612f1a81612a2e565b91506020830135612c6e81612a2e565b60008060008060808587031215612f4057600080fd5b8435612f4b81612a2e565b935060208501359250604085013591506060850135612f6981612a2e565b939692955090935050565b60008060408385031215612f8757600080fd5b50508035926020909101359150565b600060208284031215612fa857600080fd5b81516122ef81612a2e565b600060208284031215612fc557600080fd5b81516122ef81612c32565b6020808252601a908201527f435849503a20746f6b656e20646f6573206e6f74206578697374000000000000604082015260600190565b600083516130198184602088016129c3565b83519083019061302d8183602088016129c3565b01949350505050565b60208082526018908201527721ac24a81d1031b0b713ba1030b8383937bb329039b2b63360411b604082015260600190565b60208082526019908201527821ac24a81d103737ba1030b8383937bb32b21039b2b73232b960391b604082015260600190565b600081356112a581612a2e565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160601b038116811461294757600080fd5b81358155602082013560018201556040820135600282015560038101606083013561310781612a2e565b61311181836130a8565b506080830135613120816130c8565b81546001600160a01b031660a09190911b6001600160a01b0319161790555050565b60006020828403121561315457600080fd5b81356122ef816130c8565b634e487b7160e01b600052603260045260246000fd5b60208082526019908201527821ac24a81d1031b0b63632b9103737ba1030b71037bbb732b960391b604082015260600190565b600083516131ba8184602088016129c3565b602f60f81b90830190815283516131d88160018401602088016129c3565b01600101949350505050565b7368747470733a2f2f6e66742e637869702e696f2f60601b8152600082516132138160148501602087016129c3565b9190910160140192915050565b602080825260129082015271435849503a207a65726f206164647265737360701b604082015260600190565b6020808252601c908201527f435849503a20746f6b656e206461746120616c72656164792073657400000000604082015260600190565b600081356001600160a81b0319811681146112a557600080fd5b600081356001600160901b0319811681146112a557600080fd5b81358155602082013560018201556040820135600282015560038101606083013560ff81168082146132e857600080fd5b825460ff1916179091555061330b6133026080840161309b565b600483016130a8565b60a0820135600582015561334361332460c08401613283565b600683018160a81c6affffffffffffffffffffff198254161781555050565b60e082013560078201556110e961335d610100840161329d565b6008830180546001600160701b03191660909290921c919091179055565b60e09190911b6001600160e01b031916815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133c6908301846129ef565b9695505050505050565b6000602082840312156133e257600080fd5b81516122ef81612963565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613417576134176133ed565b5060010190565b7368747470733a2f2f6e66742e637869702e696f2f60601b81526000825161344d8160148501602087016129c3565b602f60f81b6014939091019283015250601501919050565b60008219821115613478576134786133ed565b500190565b6020808252601a908201527f435849503a20746f6b656e20616c726561647920657869737473000000000000604082015260600190565b634e487b7160e01b600052601260045260246000fd5b6000826134d9576134d96134b4565b500490565b6000828210156134f0576134f06133ed565b500390565b600082613504576135046134b4565b500690565b6000816000190483118215151615613523576135236133ed565b500290565b600081613537576135376133ed565b506000190190565b634e487b7160e01b600052603160045260246000fdfeab90edbe8f424080ec4ee1e9062e8b7540cbbfd5f4287285e52611030e58b8d4f2aaccfcfa4e77d7601ed4ebe139368f313960f63d25a2f26ec905d019eba48bddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212204b40e7387d03bd9804a60c7d37bbbf5bb0961413525c72bca19d07fd4535b14c64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102a25760003560e01c80636c0360eb11610165578063abf3f50e116100cc578063d753dee911610085578063d753dee9146107c8578063e2c85fef146107ea578063e8a3d4851461080a578063e985e9c51461081f578063f1831b931461083f578063f2fde38b1461085f578063f95bb91e1461087f576102a9565b8063abf3f50e14610735578063b22cac7c14610755578063b88d4fde14610775578063c0e68fec14610788578063c44bef75146107a8578063c87b56dd146106ed576102a9565b806395d89b411161011e57806395d89b4114610698578063a076b882146106ad578063a22cb465146106cd578063a546993e146106ed578063a6a22dea1461070d578063ab67aa5814610722576102a9565b80636c0360eb146105ee57806370a08231146106035780637a4a461c146106235780638462151c146106385780638da5cb5b146106655780638f32d59b14610683576102a9565b80632c2dadbc11610209578063475a8035116101c2578063475a80351461054e57806349e654401461056e5780634f6ccce71461058e578063510b5158146102f557806351e32024146105ae5780636352211e146105ce576102a9565b80632c2dadbc1461047c5780632f745c59146104c157806336afc6fa146104e157806341b0cdd1146104f657806342842e0e1461051b57806342966c681461052e576102a9565b8063150b7a021161025b578063150b7a02146103ba57806318160ddd146103f35780631a5c7f92146104125780631f89f25e1461043257806323b872dd146104545780632848558614610467576102a9565b806301ffc9a7146102c057806306ce0db8146102f557806306fdde0314610322578063081812fc14610344578063095ea7b31461037a578063128bfa251461039a576102a9565b366102a957005b3480156102b557600080fd5b506102be61089f565b005b3480156102cc57600080fd5b506102e06102db366004612979565b610942565b60405190151581526020015b60405180910390f35b34801561030157600080fd5b50610315610310366004612996565b610adc565b6040516102ec91906129af565b34801561032e57600080fd5b50610337610b39565b6040516102ec9190612a1b565b34801561035057600080fd5b5061031561035f366004612996565b6000908152600860205260409020546001600160a01b031690565b34801561038657600080fd5b506102be610395366004612a43565b610b79565b3480156103a657600080fd5b506102be6103b5366004612a6f565b610c37565b3480156103c657600080fd5b506103e66103d5366004612ab0565b630a85bd0160e11b95945050505050565b6040516102ec9190612b4f565b3480156103ff57600080fd5b506005545b6040519081526020016102ec565b34801561041e57600080fd5b5061033761042d366004612996565b610d7f565b34801561043e57600080fd5b5060008051602061357683398151915254610404565b6102be610462366004612b64565b610e2d565b34801561047357600080fd5b50610404610e48565b34801561048857600080fd5b5061049c610497366004612996565b610e6d565b6040805182518152602080840151908201529181015160ff16908201526060016102ec565b3480156104cd57600080fd5b506104046104dc366004612a43565b610efc565b3480156104ed57600080fd5b50610315610f4f565b34801561050257600080fd5b50600080516020613556833981519152546001146102e0565b6102be610529366004612b64565b61103e565b34801561053a57600080fd5b506102be610549366004612996565b611059565b34801561055a57600080fd5b50610404610569366004612996565b6110ed565b34801561057a57600080fd5b506102be610589366004612996565b611135565b34801561059a57600080fd5b506104046105a9366004612996565b61115e565b3480156105ba57600080fd5b506103376105c9366004612996565b6111d8565b3480156105da57600080fd5b506103156105e9366004612996565b611237565b3480156105fa57600080fd5b506103376112ab565b34801561060f57600080fd5b5061040461061e366004612ba5565b6112c6565b34801561062f57600080fd5b5061040461130a565b34801561064457600080fd5b50610658610653366004612ba5565b61132f565b6040516102ec9190612bc2565b34801561067157600080fd5b50600e546001600160a01b0316610315565b34801561068f57600080fd5b506102e061139b565b3480156106a457600080fd5b506103376113d0565b3480156106b957600080fd5b506102be6106c8366004612c06565b6113e0565b3480156106d957600080fd5b506102be6106e8366004612c40565b611464565b3480156106f957600080fd5b50610337610708366004612996565b6114f9565b34801561071957600080fd5b506102be61158f565b6102be610730366004612cc0565b6115c7565b34801561074157600080fd5b506102be610750366004612d84565b6115f8565b34801561076157600080fd5b506102be610770366004612996565b611667565b6102be610783366004612cc0565b611704565b34801561079457600080fd5b506102be6107a3366004612996565b6118ff565b3480156107b457600080fd5b506102be6107c3366004612996565b61199c565b3480156107d457600080fd5b506107dd6119d2565b6040516102ec9190612e02565b3480156107f657600080fd5b506102be610805366004612e33565b611a28565b34801561081657600080fd5b50610337611b72565b34801561082b57600080fd5b506102e061083a366004612efc565b611b8d565b34801561084b57600080fd5b506102be61085a366004612f2a565b611bbb565b34801561086b57600080fd5b506102be61087a366004612ba5565b611e0c565b34801561088b57600080fd5b506102be61089a366004612f74565b611e78565b600073415225c0d082cb195aee69f490c218def30966da6001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109179190612f96565b90503660008037600080366000845af43d6000803e808015610938573d6000f35b3d6000fd5b505050565b60006301ffc9a760e01b6001600160e01b03198316148061097357506380ac58cd60e01b6001600160e01b03198316145b8061098e575063780e9d6360e01b6001600160e01b03198316145b806109a95750635b5e139f60e01b6001600160e01b03198316145b806109c45750630a85bd0160e11b6001600160e01b03198316145b806109df575063e8a3d48560e01b6001600160e01b03198316145b80610ac7575073415225c0d082cb195aee69f490c218def30966da6001600160a01b03166381d1779c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5b9190612f96565b6001600160a01b03166301ffc9a7836040518263ffffffff1660e01b8152600401610a869190612b4f565b602060405180830381865afa158015610aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac79190612fb3565b15610ad457506001919050565b506000919050565b6000610ae782611ea7565b610b0c5760405162461bcd60e51b8152600401610b0390612fd0565b60405180910390fd5b6000610b1783611ed0565b6000908152600c60205260409020600401546001600160a01b03169392505050565b6060610b486000800154611f6d565b600154610b5490611f6d565b604051602001610b65929190613007565b604051602081830303815290604052905090565b6000818152600760205260409020546001600160a01b03908116908316811415610bb55760405162461bcd60e51b8152600401610b0390613036565b610bbf3383611fd1565b610bdb5760405162461bcd60e51b8152600401610b0390613068565b60008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600d54610c4c906001600160a01b0316612038565b610c945760405162461bcd60e51b815260206004820152601960248201527810d612540e88185b1c9958591e481a5b9a5d1a585b1a5e9959603a1b6044820152606401610b03565b600d80546001600160a01b03199081163317909155600e805490911630179055806000610cc182826130dd565b5030905063ea2299f86000610cdc6080850160608601612ba5565b610cec60a0860160808701613142565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526001600160601b03166044820152606401600060405180830381600087803b158015610d4357600080fd5b505af1158015610d57573d6000803e3d6000fd5b5050600e80546001600160a01b0319166001600160a01b039590951694909417909355505050565b6060610d8a82611ea7565b610da65760405162461bcd60e51b8152600401610b0390612fd0565b6000610db183611ed0565b6000818152600c602090815260409182902060078101546008909101549251939450610e1693909260901b91017468747470733a2f2f697066732e696f2f697066732f60581b815260158101929092526001600160901b031916603582015260430190565b604051602081830303815290604052915050919050565b61093d838383604051806020016040528060008152506115c7565b7fb63653e470fa8e7fcc528e0068173a1969fdee5ae0ee29dd58e7b6111b829c565490565b6040805160608101825260008082526020820181905291810191909152610e9382611ea7565b610eaf5760405162461bcd60e51b8152600401610b0390612fd0565b6000610eba83611ed0565b6000908152600c60209081526040918290208251606081018452600182015481526002820154928101929092526003015460ff16918101919091529392505050565b6000610f07836112c6565b8210610f1257600080fd5b6001600160a01b0383166000908152600a60205260409020805483908110610f3c57610f3c61315f565b9060005260206000200154905092915050565b600073415225c0d082cb195aee69f490c218def30966da6001600160a01b031663b9da967d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190612f96565b600e546040516309633f5960e31b81526001600160a01b0392831692634b19fac892610ff8929116906004016129af565b602060405180830381865afa158015611015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110399190612f96565b905090565b61093d83838360405180602001604052806000815250611704565b6110633382611fd1565b61107f5760405162461bcd60e51b8152600401610b0390613068565b6000818152600760205260409020546001600160a01b03166110a082612045565b60008281526007602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613596833981519152908390a46110e98183612063565b5050565b60006110f882611ea7565b6111145760405162461bcd60e51b8152600401610b0390612fd0565b600061111f83611ed0565b6000908152600c60205260409020549392505050565b61113d61139b565b6111595760405162461bcd60e51b8152600401610b0390613175565b600255565b600061116960055490565b82106111b35760405162461bcd60e51b8152602060048201526019602482015278435849503a20696e646578206f7574206f6620626f756e647360381b6044820152606401610b03565b600582815481106111c6576111c661315f565b90600052602060002001549050919050565b60606111e382611ea7565b6111ff5760405162461bcd60e51b8152600401610b0390612fd0565b6112076112ab565b611210836121f6565b6040516020016112219291906131a8565b6040516020818303038152906040529050919050565b6000818152600760205260408120546001600160a01b031661125881612038565b156112a55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20646f6573206e6f74206578697374000000006044820152606401610b03565b92915050565b60606112b63061224a565b604051602001610b6591906131e4565b60006112d182612038565b156112ee5760405162461bcd60e51b8152600401610b0390613220565b506001600160a01b031660009081526009602052604090205490565b7f988145eec05de02f4c5d4ecd419a9617237db574d35b27207657cbd8c5b1f0455490565b6001600160a01b0381166000908152600a602090815260409182902080548351818402810184019094528084526060939283018282801561138f57602002820191906000526020600020905b81548152602001906001019080831161137b575b50505050509050919050565b600e546000906001600160a01b03163314806113c15750600d546001600160a01b031633145b8061103957506110393361225e565b6060611039600060020154611f6d565b6113e861139b565b6114045760405162461bcd60e51b8152600401610b0390613175565b6000828152600c6020526040902060040154611428906001600160a01b0316612038565b6114445760405162461bcd60e51b8152600401610b039061324c565b6000828152600c60205260409020819061145e82826132b7565b50505050565b6001600160a01b03821633141561148d5760405162461bcd60e51b8152600401610b0390613036565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b606061150482611ea7565b6115205760405162461bcd60e51b8152600401610b0390612fd0565b600061152b83611ed0565b6000818152600c602090815260409182902060058101546006909101549251939450610e1693909260a81b91017368747470733a2f2f617277656176652e6e65742f60601b815260148101929092526001600160a81b0319166034820152603f0190565b61159761139b565b6115b35760405162461bcd60e51b8152600401610b0390613175565b600160008051602061355683398151915255565b6115d13383611fd1565b6115ed5760405162461bcd60e51b8152600401610b0390613068565b61145e8484846122f6565b61160061139b565b61161c5760405162461bcd60e51b8152600401610b0390613175565b60608101516040820151602080840151935160301b93901b9290921760109290921b91909117177ff8883f7674e7099512a3eb674d514a03c06b3984f509bd9a7b34673ea2a7934955565b61166f61139b565b61168b5760405162461bcd60e51b8152600401610b0390613175565b61169361130a565b156116e05760405162461bcd60e51b815260206004820152601b60248201527f435849503a20736570617261746f7220616c72656164792073657400000000006044820152606401610b03565b7f988145eec05de02f4c5d4ecd419a9617237db574d35b27207657cbd8c5b1f04555565b61170e3383611fd1565b61172a5760405162461bcd60e51b8152600401610b0390613068565b6117358484846122f6565b61173e83612409565b1561145e576040516301ffc9a760e01b81526001600160a01b038416906301ffc9a79061176f90829060040161337b565b602060405180830381865afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190612fb3565b801561182857506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906117e79063150b7a029060040161337b565b602060405180830381865afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190612fb3565b1561145e57604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061185f903090889087908790600401613393565b602060405180830381865afa15801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a091906133d0565b6001600160e01b03191663150b7a0260e01b1461145e5760405162461bcd60e51b815260206004820152601b60248201527f435849503a206f6e4552433732315265636569766564206661696c00000000006044820152606401610b03565b61190761139b565b6119235760405162461bcd60e51b8152600401610b0390613175565b61192b610e48565b156119785760405162461bcd60e51b815260206004820152601d60248201527f435849503a20746f6b656e206c696d697420616c7265616479207365740000006044820152606401610b03565b7fb63653e470fa8e7fcc528e0068173a1969fdee5ae0ee29dd58e7b6111b829c5655565b6119a461139b565b6119c05760405162461bcd60e51b8152600401610b0390613175565b60008051602061357683398151915255565b6119da61290b565b7ff8883f7674e7099512a3eb674d514a03c06b3984f509bd9a7b34673ea2a793495461ffff603082901c81168352602082811c821690840152601082901c8116604084015216606082015290565b611a3061139b565b611a4c5760405162461bcd60e51b8152600401610b0390613175565b828114611a9b5760405162461bcd60e51b815260206004820152601d60248201527f435849503a206172726179206c656e67746873206d6973736d617463680000006044820152606401610b03565b60005b83811015611b6b57611aea600c6000878785818110611abf57611abf61315f565b60209081029290920135835250810191909152604001600020600401546001600160a01b0316612038565b611b065760405162461bcd60e51b8152600401610b039061324c565b828282818110611b1857611b1861315f565b90506101200201600c6000878785818110611b3557611b3561315f565b9050602002013581526020019081526020016000208181611b5691906132b7565b50819050611b6381613403565b915050611a9e565b5050505050565b6060611b7d3061224a565b604051602001610b65919061341e565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b611bc361139b565b611bdf5760405162461bcd60e51b8152600401610b0390613175565b6000805160206135568339815191525460011415611c3f5760405162461bcd60e51b815260206004820152601b60248201527f435849503a206d696e74696e67206973206e6f7720636c6f73656400000000006044820152606401610b03565b611c47610e48565b600554611c55908490613465565b1115611c9c5760405162461bcd60e51b815260206004820152601660248201527510d612540e881bdd995c881d1bdad95b881b1a5b5a5d60521b6044820152606401610b03565b611ca58461225e565b611cf15760405162461bcd60e51b815260206004820152601d60248201527f435849503a2063726561746f72206e6f7420696e206964656e746974790000006044820152606401610b03565b6000611cfc82612038565b1590506000805b84811015611dea57611d158187613465565b91508215611dce57611d2682611ea7565b15611d435760405162461bcd60e51b8152600401610b039061347d565b60405182906001600160a01b03891690600090600080516020613596833981519152908290a481846001600160a01b0316886001600160a01b031660008051602061359683398151915260405160405180910390a4600082815260076020526040902080546001600160a01b0319166001600160a01b038616179055611dc98483612440565b611dd8565b611dd887836124ed565b80611de281613403565b915050611d03565b50611df3610e48565b6005541415611e0457611e0461158f565b505050505050565b611e1461139b565b611e305760405162461bcd60e51b8152600401610b0390613175565b611e3981612038565b15611e565760405162461bcd60e51b8152600401610b0390613220565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b611e8061139b565b611e9c5760405162461bcd60e51b8152600401610b0390613175565b600091909155600155565b6000818152600760205260408120546001600160a01b0316611ec881612038565b159392505050565b600080611edb61130a565b611ee590846134ca565b90506000611ef16119d2565b611efc6001846134de565b60048110611f0c57611f0c61315f565b602002015190506000600282611f2e6000805160206135768339815191525490565b611f3890426134de565b611f4291906134ca565b611f4c91906134f5565b905080611f5a846002613509565b611f649190613465565b95945050505050565b60608160005b8115611f925780611f8381613403565b915050600882901c9150611f73565b611fc984604051602001611fa891815260200190565b60408051601f19818403018152919052611fc38360206134de565b836125b0565b949350505050565b6000611fdc82611ea7565b611fe557600080fd5b6000828152600760205260409020546001600160a01b0390811690841681148061202857506000838152600860205260409020546001600160a01b038581169116145b80611fc95750611fc98185611b8d565b6001600160a01b03161590565b600090815260086020526040902080546001600160a01b0319169055565b61206c816126bd565b6001600160a01b038216600090815260096020526040812080549161209083613528565b90915550506001600160a01b038216600090815260096020908152604080832054848452600690925290912054808214612152576001600160a01b0384166000908152600a602052604081208054849081106120ee576120ee61315f565b9060005260206000200154905080600a6000876001600160a01b03166001600160a01b0316815260200190815260200160002083815481106121325761213261315f565b600091825260208083209091019290925591825260069052604090208190555b8161217d576001600160a01b0384166000908152600a6020526040812061217891612929565b61145e565b6001600160a01b0384166000908152600a602052604090208054839081106121a7576121a761315f565b600091825260208083209091018290556001600160a01b0386168252600a9052604090208054806121da576121da61353f565b6001900381819060005260206000200160009055905550505050565b60608161221d5750506040805180820190915260048152630307830360e41b602082015290565b8160005b8115612240578061223181613403565b915050600882901c9150612221565b611fc9848261276f565b60606112a5826001600160a01b03166121f6565b600080612269610f4f565b905061227481612038565b156122825750600092915050565b604051637f247e4960e01b81526001600160a01b03821690637f247e49906122ae9086906004016129af565b602060405180830381865afa1580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef9190612fb3565b9392505050565b6000818152600760205260409020546001600160a01b038481169116146123585760405162461bcd60e51b815260206004820152601660248201527521ac24a81d103737ba10333937b693b9903a37b5b2b760511b6044820152606401610b03565b61236182612038565b156123a75760405162461bcd60e51b815260206004820152601660248201527510d612540e881d5cd948189d5c9b881a5b9cdd19585960521b6044820152606401610b03565b6123b081612045565b60008181526007602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061359683398151915291a46123ff8382612063565b61093d8282612440565b6000813f80158015906122ef57507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470141592915050565b6001600160a01b0382166000818152600960208181526040808420805487865260068452918520829055948452919052919061247b83613403565b90915550506001600160a01b039091166000908152600a6020908152604080832080546001818101835591855283852001859055600580548686526010909452918420839055820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b6124f682612038565b1561253d5760405162461bcd60e51b815260206004820152601760248201527621ac24a81d1031b0b713ba1036b4b73a103090313ab93760491b6044820152606401610b03565b61254681611ea7565b156125635760405162461bcd60e51b8152600401610b039061347d565b60008181526007602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613596833981519152908290a46110e98282612440565b6060816125be81601f613465565b10156125fd5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610b03565b6126078284613465565b8451101561264b5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610b03565b60608215801561266a57604051915060008252602082016040526126b4565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156126a357805183526020928301920161268b565b5050858452601f01601f1916604052505b50949350505050565b6005546000906126cf906001906134de565b600083815260106020526040812054600580549394509092849081106126f7576126f761315f565b9060005260206000200154905080600583815481106127185761271861315f565b60009182526020808320909101929092558281526010909152604080822084905585825281205560058054849081106127535761275361315f565b600091825260208220015560058054806121da576121da61353f565b6060600061277e836002613509565b612789906002613465565b67ffffffffffffffff8111156127a1576127a1612c79565b6040519080825280601f01601f1916602001820160405280156127cb576020820181803683370190505b509050600360fc1b816000815181106127e6576127e661315f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128155761281561315f565b60200101906001600160f81b031916908160001a9053506000612839846002613509565b612844906001613465565b90505b60018111156128bc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128785761287861315f565b1a60f81b82828151811061288e5761288e61315f565b60200101906001600160f81b031916908160001a90535060049490941c936128b581613528565b9050612847565b5083156122ef5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b03565b60405180608001604052806004906020820280368337509192915050565b5080546000825590600052602060002090810190612947919061294a565b50565b5b8082111561295f576000815560010161294b565b5090565b6001600160e01b03198116811461294757600080fd5b60006020828403121561298b57600080fd5b81356122ef81612963565b6000602082840312156129a857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60005b838110156129de5781810151838201526020016129c6565b8381111561145e5750506000910152565b60008151808452612a078160208601602086016129c3565b601f01601f19169290920160200192915050565b6020815260006122ef60208301846129ef565b6001600160a01b038116811461294757600080fd5b60008060408385031215612a5657600080fd5b8235612a6181612a2e565b946020939093013593505050565b60008082840360c0811215612a8357600080fd5b8335612a8e81612a2e565b925060a0601f1982011215612aa257600080fd5b506020830190509250929050565b600080600080600060808688031215612ac857600080fd5b8535612ad381612a2e565b94506020860135612ae381612a2e565b935060408601359250606086013567ffffffffffffffff80821115612b0757600080fd5b818801915088601f830112612b1b57600080fd5b813581811115612b2a57600080fd5b896020828501011115612b3c57600080fd5b9699959850939650602001949392505050565b6001600160e01b031991909116815260200190565b600080600060608486031215612b7957600080fd5b8335612b8481612a2e565b92506020840135612b9481612a2e565b929592945050506040919091013590565b600060208284031215612bb757600080fd5b81356122ef81612a2e565b6020808252825182820181905260009190848201906040850190845b81811015612bfa57835183529284019291840191600101612bde565b50909695505050505050565b600080828403610140811215612c1b57600080fd5b83359250610120601f1982011215612aa257600080fd5b801515811461294757600080fd5b60008060408385031215612c5357600080fd5b8235612c5e81612a2e565b91506020830135612c6e81612c32565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612cb857612cb8612c79565b604052919050565b60008060008060808587031215612cd657600080fd5b8435612ce181612a2e565b9350602085810135612cf281612a2e565b935060408601359250606086013567ffffffffffffffff80821115612d1657600080fd5b818801915088601f830112612d2a57600080fd5b813581811115612d3c57612d3c612c79565b612d4e601f8201601f19168501612c8f565b91508082528984828501011115612d6457600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060808284031215612d9657600080fd5b82601f830112612da557600080fd5b6040516080810181811067ffffffffffffffff82111715612dc857612dc8612c79565b604052806080840185811115612ddd57600080fd5b845b81811015612df7578035835260209283019201612ddf565b509195945050505050565b60808101818360005b6004811015612e2a578151835260209283019290910190600101612e0b565b50505092915050565b60008060008060408587031215612e4957600080fd5b843567ffffffffffffffff80821115612e6157600080fd5b818701915087601f830112612e7557600080fd5b813581811115612e8457600080fd5b8860208260051b8501011115612e9957600080fd5b602092830196509450908601359080821115612eb457600080fd5b818701915087601f830112612ec857600080fd5b813581811115612ed757600080fd5b88602061012083028501011115612eed57600080fd5b95989497505060200194505050565b60008060408385031215612f0f57600080fd5b8235612f1a81612a2e565b91506020830135612c6e81612a2e565b60008060008060808587031215612f4057600080fd5b8435612f4b81612a2e565b935060208501359250604085013591506060850135612f6981612a2e565b939692955090935050565b60008060408385031215612f8757600080fd5b50508035926020909101359150565b600060208284031215612fa857600080fd5b81516122ef81612a2e565b600060208284031215612fc557600080fd5b81516122ef81612c32565b6020808252601a908201527f435849503a20746f6b656e20646f6573206e6f74206578697374000000000000604082015260600190565b600083516130198184602088016129c3565b83519083019061302d8183602088016129c3565b01949350505050565b60208082526018908201527721ac24a81d1031b0b713ba1030b8383937bb329039b2b63360411b604082015260600190565b60208082526019908201527821ac24a81d103737ba1030b8383937bb32b21039b2b73232b960391b604082015260600190565b600081356112a581612a2e565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160601b038116811461294757600080fd5b81358155602082013560018201556040820135600282015560038101606083013561310781612a2e565b61311181836130a8565b506080830135613120816130c8565b81546001600160a01b031660a09190911b6001600160a01b0319161790555050565b60006020828403121561315457600080fd5b81356122ef816130c8565b634e487b7160e01b600052603260045260246000fd5b60208082526019908201527821ac24a81d1031b0b63632b9103737ba1030b71037bbb732b960391b604082015260600190565b600083516131ba8184602088016129c3565b602f60f81b90830190815283516131d88160018401602088016129c3565b01600101949350505050565b7368747470733a2f2f6e66742e637869702e696f2f60601b8152600082516132138160148501602087016129c3565b9190910160140192915050565b602080825260129082015271435849503a207a65726f206164647265737360701b604082015260600190565b6020808252601c908201527f435849503a20746f6b656e206461746120616c72656164792073657400000000604082015260600190565b600081356001600160a81b0319811681146112a557600080fd5b600081356001600160901b0319811681146112a557600080fd5b81358155602082013560018201556040820135600282015560038101606083013560ff81168082146132e857600080fd5b825460ff1916179091555061330b6133026080840161309b565b600483016130a8565b60a0820135600582015561334361332460c08401613283565b600683018160a81c6affffffffffffffffffffff198254161781555050565b60e082013560078201556110e961335d610100840161329d565b6008830180546001600160701b03191660909290921c919091179055565b60e09190911b6001600160e01b031916815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133c6908301846129ef565b9695505050505050565b6000602082840312156133e257600080fd5b81516122ef81612963565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613417576134176133ed565b5060010190565b7368747470733a2f2f6e66742e637869702e696f2f60601b81526000825161344d8160148501602087016129c3565b602f60f81b6014939091019283015250601501919050565b60008219821115613478576134786133ed565b500190565b6020808252601a908201527f435849503a20746f6b656e20616c726561647920657869737473000000000000604082015260600190565b634e487b7160e01b600052601260045260246000fd5b6000826134d9576134d96134b4565b500490565b6000828210156134f0576134f06133ed565b500390565b600082613504576135046134b4565b500690565b6000816000190483118215151615613523576135236133ed565b500290565b600081613537576135376133ed565b506000190190565b634e487b7160e01b600052603160045260246000fdfeab90edbe8f424080ec4ee1e9062e8b7540cbbfd5f4287285e52611030e58b8d4f2aaccfcfa4e77d7601ed4ebe139368f313960f63d25a2f26ec905d019eba48bddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212204b40e7387d03bd9804a60c7d37bbbf5bb0961413525c72bca19d07fd4535b14c64736f6c634300080c0033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emits event that informs of address approving a third-party operator for a particular token.",
        "params": {
          "operator": "Address of the third-party operator approved for interaction.",
          "tokenId": "A specific token id that is being authorised to operator.",
          "wallet": "Address of the wallet configuring a token operator."
        }
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emits event that informs of address approving/denying a third-party operator.",
        "params": {
          "approved": "A boolean indicating whether approval was granted or revoked.",
          "operator": "Address of the third-party operator that interacts on behalf of the wallet.",
          "wallet": "Address of the wallet configuring it's operator."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "If from is empty, it's a mint. If to is empty, it's a burn. Otherwise, it's a transfer.",
        "params": {
          "from": "Address from where token is being transfered.",
          "to": "Address to where token is being transfered.",
          "tokenId": "Token id that is being minted, Transfered, or burned."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Requires the sender to be in the approved addresses.",
        "params": {
          "to": "The address to approve.",
          "tokenId": "The affected token."
        }
      },
      "arweaveURI(uint256)": {
        "details": "Concatenates 2 sections of the arweave URI.",
        "returns": {
          "_0": "string The URI."
        }
      },
      "balanceOf(address)": {
        "details": "Used to see total amount of tokens owned by a specific wallet.",
        "params": {
          "wallet": "Address for which to get token balance."
        },
        "returns": {
          "_0": "uint256 Returns an integer, representing total amount of tokens held by address."
        }
      },
      "baseURI()": {
        "details": "Concatenates with the CXIP domain name.",
        "returns": {
          "_0": "string the token URI."
        }
      },
      "batchMint(address,uint256,uint256,address)": {
        "details": "Limited to maximum number of NFTs that can be minted for this drop. Needs to be called in tokenId sequence.",
        "params": {
          "creatorWallet": "The wallet address of the NFT creator.",
          "length": "The total number of NFTs to mint starting from the startId.",
          "recipient": "Optional parameter, to send the token to a recipient right after minting.",
          "startId": "The tokenId from which to start batch mint."
        }
      },
      "burn(uint256)": {
        "details": "The sender must be the owner or approved.",
        "params": {
          "tokenId": "The token to burn."
        }
      },
      "constructor": {
        "details": "To make exact CREATE2 deployment possible, constructor is left empty. We utilize the \"init\" function instead."
      },
      "contractURI()": {
        "details": "Concatenates to https://nft.cxip.io/.",
        "returns": {
          "_0": "string The URI."
        }
      },
      "creator(uint256)": {
        "details": "If the token Id doesn't exist it will return zero address.",
        "returns": {
          "_0": "address Creator's address."
        }
      },
      "getApproved(uint256)": {
        "details": "Single operator set for a specific token. Usually used for one-time very specific authorisations.",
        "params": {
          "tokenId": "Token id to get approved operator for."
        },
        "returns": {
          "_0": "address Approved address for token."
        }
      },
      "getIdentity()": {
        "details": "Goes up the chain to read from the registry.",
        "returns": {
          "_0": "address Identity contract address."
        }
      },
      "getMintingClosed()": {
        "details": "Gets the minting status from storage slot.",
        "returns": {
          "mintingClosed": "Whether minting is open or closed permanently."
        }
      },
      "getTokenLimit()": {
        "details": "Gets the token limit from storage slot.",
        "returns": {
          "tokenLimit": "Maximum number of tokens that can be minted."
        }
      },
      "getTokenSeparator()": {
        "details": "Gets the token separator from storage slot.",
        "returns": {
          "tokenSeparator": "The number of tokens before separation."
        }
      },
      "httpURI(uint256)": {
        "details": "Concatenates to the baseURI.",
        "returns": {
          "_0": "string The URI."
        }
      },
      "init(address,(bytes32,bytes32,bytes32,address,uint96))": {
        "details": "Special function to allow a one time initialisation on deployment. Also configures and deploys royalties.",
        "params": {
          "collectionData": "The collection data.",
          "newOwner": "The owner of the collection."
        }
      },
      "ipfsURI(uint256)": {
        "details": "Concatenates to the IPFS domain.",
        "returns": {
          "_0": "string The URI."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Includes references to OpenSea and Rarible marketplace proxies.",
        "params": {
          "operator": "Address of the marketplace operator.",
          "wallet": "Address of the wallet."
        },
        "returns": {
          "_0": "bool True if approved."
        }
      },
      "isOwner()": {
        "details": "The owner could also be the admin or identity contract of the owner.",
        "returns": {
          "_0": "bool True if owner."
        }
      },
      "name()": {
        "details": "Uses two names to extend the max length of the collection name in bytes",
        "returns": {
          "_0": "string The collection name."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "We have this blank function in place to make sure that external contract sending in NFTs don't error out.Since it's not being used, the _operator variable is commented out to avoid compiler warnings.Since it's not being used, the _from variable is commented out to avoid compiler warnings.Since it's not being used, the _tokenId variable is commented out to avoid compiler warnings.Since it's not being used, the _data variable is commented out to avoid compiler warnings.",
        "returns": {
          "_0": "bytes4 Returns the interfaceId of onERC721Received."
        }
      },
      "owner()": {
        "details": "_owner is first set in init.",
        "returns": {
          "_0": "address Of ower."
        }
      },
      "ownerOf(uint256)": {
        "details": "The token must exist.",
        "params": {
          "tokenId": "The token to look up."
        },
        "returns": {
          "_0": "address Owner of the token."
        }
      },
      "payloadHash(uint256)": {
        "details": "Payload is used for verification.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "bytes32 The hash."
        }
      },
      "payloadSignature(uint256)": {
        "details": "Used for signature verification.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "Verification a struct containing v, r, s values of the signature."
        }
      },
      "payloadSigner(uint256)": {
        "details": "The creator signs a payload while creating the NFT.",
        "params": {
          "tokenId": "The Id of the token."
        },
        "returns": {
          "_0": "address The creator."
        }
      },
      "prepareMintData(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))": {
        "details": "Time-based states will be retrieved by index.",
        "params": {
          "id": "The index of time slot to set for.",
          "tokenData": "The token data for the particular time slot."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must exist and be owned by `from`."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Since it's not being used, the _data variable is commented out to avoid compiler warnings. are aware of the ERC721 protocol to prevent tokens from being forever locked.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must exist and be owned by `from`."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Allows platforms to sell/transfer all your NFTs. Used with proxy contracts like OpenSea/Rarible.",
        "params": {
          "approved": "Turn on or off approval status.",
          "to": "The address to approve."
        }
      },
      "setMintingClosed()": {
        "details": "Sets the minting status to closed in storage slot."
      },
      "setName(bytes32,bytes32)": {
        "details": "The name is split in two for gas optimization.",
        "params": {
          "newName": "First part of name.",
          "newName2": "Second part of name."
        }
      },
      "setStartTimestamp(uint256)": {
        "details": "All rotation calculations will use this timestamp as the origin point from which to calculate.",
        "params": {
          "_timestamp": "UNIX timestamp in seconds."
        }
      },
      "setSymbol(bytes32)": {
        "details": "This is the ticker symbol for smart contract that shows up on EtherScan.",
        "params": {
          "newSymbol": "The ticker symbol to set for smart contract."
        }
      },
      "setTokenLimit(uint256)": {
        "details": "Sets the token limit to storage slot.",
        "params": {
          "tokenLimit": "Maximum number of tokens that can be minted."
        }
      },
      "setTokenSeparator(uint256)": {
        "details": "Sets the token separator to storage slot.",
        "params": {
          "tokenSeparator": "The number of tokens before separation."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Must add new 4 byte interface Ids here to acknowledge support",
        "params": {
          "interfaceId": "ERC165 style 4 byte interfaceId."
        },
        "returns": {
          "_0": "bool True if supported."
        }
      },
      "symbol()": {
        "details": "Trims the symbol.",
        "returns": {
          "_0": "string The symbol."
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Used in conjunction with totalSupply function to iterate over all tokens in collection.",
        "params": {
          "index": "Index of token in array."
        },
        "returns": {
          "_0": "uint256 Returns the token id of token located at that index."
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Helpful for wallet token enumeration where token id info is not yet available. Use in conjunction with balanceOf function.",
        "params": {
          "index": "Index of token in array.",
          "wallet": "Specific address for which to get token for."
        },
        "returns": {
          "_0": "uint256 Returns the token id of token located at that index in specified wallet."
        }
      },
      "tokenURI(uint256)": {
        "details": "Defaults the the Arweave URI",
        "returns": {
          "_0": "string The URI."
        }
      },
      "tokensOfOwner(address)": {
        "params": {
          "wallet": "The wallet address to get tokens for."
        },
        "returns": {
          "_0": "uint256[] Returns an array of token ids owned by wallet."
        }
      },
      "totalSupply()": {
        "details": "Ignores burned tokens.",
        "returns": {
          "_0": "uint256 Returns the total number of active (not burned) tokens."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must be owned by `from`."
        }
      },
      "transferFrom(address,address,uint256,bytes)": {
        "details": "WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.Since it's not being used, the _data variable is commented out to avoid compiler warnings.",
        "params": {
          "from": "cannot be the zero address.",
          "to": "cannot be the zero address.",
          "tokenId": "token must be owned by `from`."
        }
      },
      "transferOwnership(address)": {
        "details": "Can't be the zero address.",
        "params": {
          "newOwner": "Address of new owner."
        }
      }
    },
    "stateVariables": {
      "_admin": {
        "details": "Address of admin user. Primarily used as an additional recover address."
      },
      "_allTokens": {
        "details": "Array of all token ids in collection."
      },
      "_allTokensIndex": {
        "details": "Mapping from token id to position in the allTokens array."
      },
      "_collectionData": {
        "details": "Stores default collection data: name, symbol, and royalties."
      },
      "_currentTokenId": {
        "details": "Internal last minted token id, to allow for auto-increment."
      },
      "_operatorApprovals": {
        "details": "Usually utilised for supporting marketplace proxy wallets."
      },
      "_ownedTokens": {
        "details": "Map of array of token ids owned by a specific address."
      },
      "_ownedTokensCount": {
        "details": "Map of total tokens owner by a specific address."
      },
      "_ownedTokensIndex": {
        "details": "Map of token id to array index of _ownedTokens."
      },
      "_owner": {
        "details": "Address of contract owner. This address can run all onlyOwner functions."
      },
      "_tokenApprovals": {
        "details": "1-to-1 map of token id that was assigned an approved operator address."
      },
      "_tokenData": {
        "details": "Token data mapped by token id."
      },
      "_tokenOwner": {
        "details": "Token id to wallet (owner) address map."
      },
      "_totalTokens": {
        "details": "Simple tracker of all minted (not-burned) tokens."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "Event emitted when an address delegates power, for a token, to another address."
      },
      "ApprovalForAll(address,address,bool)": {
        "notice": "Event emitted when an address authorises an operator (third-party)."
      },
      "Transfer(address,address,uint256)": {
        "notice": "Event emitted when an token is minted, transfered, or burned."
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Adds a new address to the token's approval list."
      },
      "arweaveURI(uint256)": {
        "notice": "Gets the URI of the NFT on Arweave."
      },
      "balanceOf(address)": {
        "notice": "Get total number of tokens owned by wallet."
      },
      "baseURI()": {
        "notice": "Get a base URI for the token."
      },
      "batchMint(address,uint256,uint256,address)": {
        "notice": "Mints batches of NFTs."
      },
      "burn(uint256)": {
        "notice": "Burns the token."
      },
      "constructor": {
        "notice": "Constructor is empty and not utilised."
      },
      "contractURI()": {
        "notice": "Gets the URI of the NFT backup from CXIP."
      },
      "creator(uint256)": {
        "notice": "Gets the creator's address."
      },
      "getApproved(uint256)": {
        "notice": "Gets the approved address for the token."
      },
      "getIdentity()": {
        "notice": "Get the associated identity for the collection."
      },
      "httpURI(uint256)": {
        "notice": "Gets the HTTP URI of the token."
      },
      "init(address,(bytes32,bytes32,bytes32,address,uint96))": {
        "notice": "Initializes the collection."
      },
      "ipfsURI(uint256)": {
        "notice": "Gets the IPFS URI"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Checks if the address is approved."
      },
      "isOwner()": {
        "notice": "Check if the sender is the owner."
      },
      "name()": {
        "notice": "Gets the name of the collection."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Empty function that is triggered by external contract on NFT transfer."
      },
      "owner()": {
        "notice": "Gets the owner's address."
      },
      "ownerOf(uint256)": {
        "notice": "Checks who the owner of a token is."
      },
      "payloadHash(uint256)": {
        "notice": "Gets the hash of the NFT data used to create it."
      },
      "payloadSignature(uint256)": {
        "notice": "Gets the signature of the signed NFT data used to create it."
      },
      "payloadSigner(uint256)": {
        "notice": "Gets the address of the creator."
      },
      "prepareMintData(uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14))": {
        "notice": "Set an NFT state."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Adds a new approved operator."
      },
      "setName(bytes32,bytes32)": {
        "notice": "Sets a name for the collection."
      },
      "setStartTimestamp(uint256)": {
        "notice": "Sets the start timestamp for token rotations."
      },
      "setSymbol(bytes32)": {
        "notice": "Set a symbol for the collection."
      },
      "supportsInterface(bytes4)": {
        "notice": "Shows the interfaces the contracts support"
      },
      "symbol()": {
        "notice": "Gets the collection's symbol."
      },
      "tokenByIndex(uint256)": {
        "notice": "Get token by index."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Get token from wallet by index instead of token id."
      },
      "tokenURI(uint256)": {
        "notice": "Get's the URI of the token."
      },
      "tokensOfOwner(address)": {
        "notice": "Get list of tokens owned by wallet."
      },
      "totalSupply()": {
        "notice": "Total amount of tokens in the collection."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers `tokenId` token from `from` to `to`."
      },
      "transferFrom(address,address,uint256,bytes)": {
        "notice": "Transfers `tokenId` token from `from` to `to`."
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the collection."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3432,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_collectionData",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(CollectionData)8974_storage"
      },
      {
        "astId": 3435,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_currentTokenId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3439,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_allTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3444,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3449,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_tokenOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3454,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3459,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_ownedTokensCount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3465,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3472,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3478,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_tokenData",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(TokenData)9045_storage)"
      },
      {
        "astId": 3481,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_admin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 3484,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 3487,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_totalTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3492,
        "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes11": {
        "encoding": "inplace",
        "label": "bytes11",
        "numberOfBytes": "11"
      },
      "t_bytes14": {
        "encoding": "inplace",
        "label": "bytes14",
        "numberOfBytes": "14"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)9045_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)9045_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CollectionData)8974_storage": {
        "encoding": "inplace",
        "label": "struct CollectionData",
        "members": [
          {
            "astId": 8965,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8967,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "name2",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8969,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "symbol",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 8971,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "royalties",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8973,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "bps",
            "offset": 20,
            "slot": "3",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenData)9045_storage": {
        "encoding": "inplace",
        "label": "struct TokenData",
        "members": [
          {
            "astId": 9031,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "payloadHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9034,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "payloadSignature",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Verification)9060_storage"
          },
          {
            "astId": 9036,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9038,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "arweave",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 9040,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "arweave2",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes11"
          },
          {
            "astId": 9042,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "ipfs",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 9044,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "ipfs2",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes14"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Verification)9060_storage": {
        "encoding": "inplace",
        "label": "struct Verification",
        "members": [
          {
            "astId": 9055,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "r",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9057,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "s",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9059,
            "contract": "contracts/DanielArshamErosions.sol:DanielArshamErosions",
            "label": "v",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}