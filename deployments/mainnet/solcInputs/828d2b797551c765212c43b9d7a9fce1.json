{
  "language": "Solidity",
  "sources": {
    "contracts/CxipRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.12;\n\n/*______/\\\\\\\\\\\\\\\\\\__/\\\\\\_______/\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\___\n _____/\\\\\\////////__\\///\\\\\\___/\\\\\\/__\\/////\\\\\\///__\\/\\\\\\/////////\\\\\\_\n  ___/\\\\\\/_____________\\///\\\\\\\\\\\\/________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\n   __/\\\\\\_________________\\//\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\n    _\\/\\\\\\__________________\\/\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\/////////____\n     _\\//\\\\\\_________________/\\\\\\\\\\\\_________\\/\\\\\\_____\\/\\\\\\_____________\n      __\\///\\\\\\_____________/\\\\\\////\\\\\\_______\\/\\\\\\_____\\/\\\\\\_____________\n       ____\\////\\\\\\\\\\\\\\\\\\__/\\\\\\/___\\///\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_____________\n        _______\\/////////__\\///_______\\///__\\///////////__\\///____________*/\n\ncontract CxipRegistry {\n    address public pa1dProxy;\n\n    function getPA1D() public view returns (address) {\n        return pa1dProxy;\n    }\n\n    function setPA1D(address proxy) public onlyOwner {\n        pa1dProxy = proxy;\n    }\n\n    address public pa1dSource;\n\n    function getPA1DSource() public view returns (address) {\n        return pa1dSource;\n    }\n\n    function setPA1DSource(address source) public onlyOwner {\n        pa1dSource = source;\n    }\n\n    address public assetProxy;\n\n    function getAsset() public view returns (address) {\n        return assetProxy;\n    }\n\n    function setAsset(address proxy) public onlyOwner {\n        assetProxy = proxy;\n    }\n\n    address public assetSource;\n\n    function getAssetSource() public view returns (address) {\n        return assetSource;\n    }\n\n    function setAssetSource(address source) public onlyOwner {\n        assetSource = source;\n    }\n\n    address public copyrightProxy;\n\n    function getCopyright() public view returns (address) {\n        return copyrightProxy;\n    }\n\n    function setCopyright(address proxy) public onlyOwner {\n        copyrightProxy = proxy;\n    }\n\n    address public copyrightSource;\n\n    function getCopyrightSource() public view returns (address) {\n        return copyrightSource;\n    }\n\n    function setCopyrightSource(address source) public onlyOwner {\n        copyrightSource = source;\n    }\n\n    address public provenanceProxy;\n\n    function getProvenance() public view returns (address) {\n        return provenanceProxy;\n    }\n\n    function setProvenance(address proxy) public onlyOwner {\n        provenanceProxy = proxy;\n    }\n\n    address public provenanceSource;\n\n    function getProvenanceSource() public view returns (address) {\n        return provenanceSource;\n    }\n\n    function setProvenanceSource(address source) public onlyOwner {\n        provenanceSource = source;\n    }\n\n    address public identitySource;\n\n    function getIdentitySource() public view returns (address) {\n        return identitySource;\n    }\n\n    function setIdentitySource(address source) public onlyOwner {\n        identitySource = source;\n    }\n\n    address public erc721CollectionSource;\n\n    function getERC721CollectionSource() public view returns (address) {\n        return erc721CollectionSource;\n    }\n\n    function setERC721CollectionSource(address source) public onlyOwner {\n        erc721CollectionSource = source;\n    }\n\n    address public erc1155CollectionSource;\n\n    function getERC1155CollectionSource() public view returns (address) {\n        return erc1155CollectionSource;\n    }\n\n    function setERC1155CollectionSource(address source) public onlyOwner {\n        erc1155CollectionSource = source;\n    }\n\n    address public assetSigner;\n\n    function getAssetSigner() public view returns (address) {\n        return assetSigner;\n    }\n\n    function setAssetSigner(address source) public onlyOwner {\n        assetSigner = source;\n    }\n\n    mapping(bytes32 => address) public customSources;\n\n    function getCustomSource(bytes32 name) public view returns (address) {\n        return customSources[name];\n    }\n\n    function getCustomSourceFromString(string memory name) public view returns (address) {\n        return customSources[sha256(abi.encodePacked(name))];\n    }\n\n    function setCustomSource(string memory name, address source) public onlyOwner {\n        customSources[sha256(abi.encodePacked(name))] = source;\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    address private _owner;\n\n    constructor() {\n        _setOwner(tx.origin);\n    }\n\n    function _msgSender() internal view returns (address) {\n        return msg.sender;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        _setOwner(address(0));\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}