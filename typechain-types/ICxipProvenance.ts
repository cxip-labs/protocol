/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICxipProvenanceInterface extends utils.Interface {
  contractName: "ICxipProvenance";
  functions: {
    "createIdentity(bytes32,address,uint8,bytes32,bytes32)": FunctionFragment;
    "createIdentityBatch(bytes32,address[],uint8[],bytes32[])": FunctionFragment;
    "getIdentity()": FunctionFragment;
    "getWalletIdentity(address)": FunctionFragment;
    "informAboutNewWallet(address)": FunctionFragment;
    "isIdentityValid(address)": FunctionFragment;
    "nextNonce(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createIdentity",
    values: [BytesLike, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createIdentityBatch",
    values: [BytesLike, string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletIdentity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "informAboutNewWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isIdentityValid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nextNonce", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "createIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIdentityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "informAboutNewWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIdentityValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;

  events: {};
}

export interface ICxipProvenance extends BaseContract {
  contractName: "ICxipProvenance";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICxipProvenanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createIdentity(
      saltHash: BytesLike,
      wallet: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIdentityBatch(
      saltHash: BytesLike,
      wallets: string[],
      V: BigNumberish[],
      RS: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIdentity(overrides?: CallOverrides): Promise<[string]>;

    getWalletIdentity(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    informAboutNewWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isIdentityValid(
      identity: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nextNonce(wallet: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createIdentity(
    saltHash: BytesLike,
    wallet: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIdentityBatch(
    saltHash: BytesLike,
    wallets: string[],
    V: BigNumberish[],
    RS: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIdentity(overrides?: CallOverrides): Promise<string>;

  getWalletIdentity(wallet: string, overrides?: CallOverrides): Promise<string>;

  informAboutNewWallet(
    newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isIdentityValid(
    identity: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nextNonce(wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createIdentity(
      saltHash: BytesLike,
      wallet: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    createIdentityBatch(
      saltHash: BytesLike,
      wallets: string[],
      V: BigNumberish[],
      RS: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getIdentity(overrides?: CallOverrides): Promise<string>;

    getWalletIdentity(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    informAboutNewWallet(
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isIdentityValid(
      identity: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nextNonce(wallet: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    createIdentity(
      saltHash: BytesLike,
      wallet: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIdentityBatch(
      saltHash: BytesLike,
      wallets: string[],
      V: BigNumberish[],
      RS: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIdentity(overrides?: CallOverrides): Promise<BigNumber>;

    getWalletIdentity(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    informAboutNewWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isIdentityValid(
      identity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextNonce(wallet: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createIdentity(
      saltHash: BytesLike,
      wallet: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIdentityBatch(
      saltHash: BytesLike,
      wallets: string[],
      V: BigNumberish[],
      RS: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIdentity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWalletIdentity(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    informAboutNewWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isIdentityValid(
      identity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextNonce(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
