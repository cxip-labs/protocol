/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Zora {
  export type DecimalStruct = { value: BigNumberish };

  export type DecimalStructOutput = [BigNumber] & { value: BigNumber };

  export type BidSharesStruct = {
    prevOwner: Zora.DecimalStruct;
    creator: Zora.DecimalStruct;
    owner: Zora.DecimalStruct;
  };

  export type BidSharesStructOutput = [
    Zora.DecimalStructOutput,
    Zora.DecimalStructOutput,
    Zora.DecimalStructOutput
  ] & {
    prevOwner: Zora.DecimalStructOutput;
    creator: Zora.DecimalStructOutput;
    owner: Zora.DecimalStructOutput;
  };
}

export interface IPA1DInterface extends utils.Interface {
  contractName: "IPA1D";
  functions: {
    "bidSharesForToken(uint256)": FunctionFragment;
    "calculateRoyaltyFee(address,uint256,uint256)": FunctionFragment;
    "configurePayouts(address[],uint256[])": FunctionFragment;
    "getEthPayout()": FunctionFragment;
    "getFeeBps(uint256)": FunctionFragment;
    "getFeeRecipients(uint256)": FunctionFragment;
    "getFees(uint256)": FunctionFragment;
    "getPayoutInfo()": FunctionFragment;
    "getRoyalties(uint256)": FunctionFragment;
    "getStorageSlot(string)": FunctionFragment;
    "getTokenAddress(string)": FunctionFragment;
    "getTokenPayout(address)": FunctionFragment;
    "getTokenPayoutByName(string)": FunctionFragment;
    "getTokensPayout(address[])": FunctionFragment;
    "getTokensPayoutByName(string[])": FunctionFragment;
    "init(uint256,address,uint256)": FunctionFragment;
    "marketContract()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "setRoyalties(uint256,address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenCreator(address,uint256)": FunctionFragment;
    "tokenCreators(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bidSharesForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRoyaltyFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configurePayouts",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthPayout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageSlot",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPayout",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPayoutByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensPayout",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensPayoutByName",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalties",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCreator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCreators",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "bidSharesForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurePayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPayoutByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensPayoutByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCreators",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPA1D extends BaseContract {
  contractName: "IPA1D";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPA1DInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bidSharesForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [Zora.BidSharesStructOutput] & { bidShares: Zora.BidSharesStructOutput }
    >;

    calculateRoyaltyFee(
      contractAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    configurePayouts(
      addresses: string[],
      bps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEthPayout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeeBps(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getFeeRecipients(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getFees(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getPayoutInfo(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; bps: BigNumber[] }
    >;

    getRoyalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getStorageSlot(slot: string, overrides?: CallOverrides): Promise<[string]>;

    getTokenAddress(
      tokenName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenPayout(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenPayoutByName(
      tokenName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokensPayout(
      tokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokensPayoutByName(
      tokenNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      tokenId: BigNumberish,
      receiver: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketContract(overrides?: CallOverrides): Promise<[string]>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setRoyalties(
      tokenId: BigNumberish,
      receiver: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenCreator(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenCreators(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  bidSharesForToken(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Zora.BidSharesStructOutput>;

  calculateRoyaltyFee(
    contractAddress: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  configurePayouts(
    addresses: string[],
    bps: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEthPayout(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeeBps(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getFeeRecipients(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getFees(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getPayoutInfo(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { addresses: string[]; bps: BigNumber[] }
  >;

  getRoyalties(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getStorageSlot(slot: string, overrides?: CallOverrides): Promise<string>;

  getTokenAddress(
    tokenName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenPayout(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenPayoutByName(
    tokenName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokensPayout(
    tokenAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokensPayoutByName(
    tokenNames: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    tokenId: BigNumberish,
    receiver: string,
    bp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketContract(overrides?: CallOverrides): Promise<string>;

  royaltyInfo(
    tokenId: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  setRoyalties(
    tokenId: BigNumberish,
    receiver: string,
    bp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenCreator(
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenCreators(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    bidSharesForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Zora.BidSharesStructOutput>;

    calculateRoyaltyFee(
      contractAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configurePayouts(
      addresses: string[],
      bps: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getEthPayout(overrides?: CallOverrides): Promise<void>;

    getFeeBps(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getFeeRecipients(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFees(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getPayoutInfo(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; bps: BigNumber[] }
    >;

    getRoyalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getStorageSlot(slot: string, overrides?: CallOverrides): Promise<string>;

    getTokenAddress(
      tokenName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenPayout(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenPayoutByName(
      tokenName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokensPayout(
      tokenAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getTokensPayoutByName(
      tokenNames: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      tokenId: BigNumberish,
      receiver: string,
      bp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    marketContract(overrides?: CallOverrides): Promise<string>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setRoyalties(
      tokenId: BigNumberish,
      receiver: string,
      bp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenCreator(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenCreators(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bidSharesForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRoyaltyFee(
      contractAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configurePayouts(
      addresses: string[],
      bps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEthPayout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeeBps(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRecipients(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFees(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStorageSlot(slot: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddress(
      tokenName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPayout(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenPayoutByName(
      tokenName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokensPayout(
      tokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokensPayoutByName(
      tokenNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      tokenId: BigNumberish,
      receiver: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketContract(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRoyalties(
      tokenId: BigNumberish,
      receiver: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCreator(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCreators(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bidSharesForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRoyaltyFee(
      contractAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configurePayouts(
      addresses: string[],
      bps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEthPayout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeeBps(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeRecipients(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFees(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoyalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStorageSlot(
      slot: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(
      tokenName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPayout(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenPayoutByName(
      tokenName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokensPayout(
      tokenAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokensPayoutByName(
      tokenNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      tokenId: BigNumberish,
      receiver: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRoyalties(
      tokenId: BigNumberish,
      receiver: string,
      bp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCreator(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCreators(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
