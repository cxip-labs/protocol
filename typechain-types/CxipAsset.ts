/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CxipAssetInterface extends utils.Interface {
  contractName: "CxipAsset";
  functions: {
    "AddCollection(address,address,bool)": FunctionFragment;
    "AddToken(address,address,uint256,bool)": FunctionFragment;
    "defaultUriType()": FunctionFragment;
    "getCollectionIdentity(address)": FunctionFragment;
    "getCollectionType(address)": FunctionFragment;
    "isCollectionCertified(address)": FunctionFragment;
    "isCollectionOpen(address)": FunctionFragment;
    "isCollectionRegistered(address)": FunctionFragment;
    "isTokenCertified(address,uint256)": FunctionFragment;
    "isTokenRegistered(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AddCollection",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "AddToken",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultUriType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionIdentity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionCertified",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionOpen",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenCertified",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenRegistered",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AddCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "AddToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultUriType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionCertified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenCertified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenRegistered",
    data: BytesLike
  ): Result;

  events: {
    "CollectionAdded(address,address)": EventFragment;
    "CollectionCreated(address,address)": EventFragment;
    "TokenAdded(address,address,uint256)": EventFragment;
    "TokenCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
}

export type CollectionAddedEvent = TypedEvent<
  [string, string],
  { collectionAddress: string; identityAddress: string }
>;

export type CollectionAddedEventFilter = TypedEventFilter<CollectionAddedEvent>;

export type CollectionCreatedEvent = TypedEvent<
  [string, string],
  { collectionAddress: string; identityAddress: string }
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export type TokenAddedEvent = TypedEvent<
  [string, string, BigNumber],
  { collectionAddress: string; identityAddress: string; tokenId: BigNumber }
>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export type TokenCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  { collectionAddress: string; identityAddress: string; tokenId: BigNumber }
>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export interface CxipAsset extends BaseContract {
  contractName: "CxipAsset";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CxipAssetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AddCollection(
      creator: string,
      collection: string,
      fresh: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    AddToken(
      creator: string,
      collection: string,
      tokenId: BigNumberish,
      fresh: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultUriType(overrides?: CallOverrides): Promise<[number]>;

    getCollectionIdentity(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCollectionType(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isCollectionCertified(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollectionOpen(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollectionRegistered(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenCertified(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenRegistered(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  AddCollection(
    creator: string,
    collection: string,
    fresh: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  AddToken(
    creator: string,
    collection: string,
    tokenId: BigNumberish,
    fresh: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultUriType(overrides?: CallOverrides): Promise<number>;

  getCollectionIdentity(
    collection: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getCollectionType(
    collection: string,
    overrides?: CallOverrides
  ): Promise<number>;

  isCollectionCertified(
    collection: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollectionOpen(
    collection: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollectionRegistered(
    collection: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenCertified(
    collection: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenRegistered(
    collection: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    AddCollection(
      creator: string,
      collection: string,
      fresh: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    AddToken(
      creator: string,
      collection: string,
      tokenId: BigNumberish,
      fresh: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultUriType(overrides?: CallOverrides): Promise<number>;

    getCollectionIdentity(
      collection: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getCollectionType(
      collection: string,
      overrides?: CallOverrides
    ): Promise<number>;

    isCollectionCertified(
      collection: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollectionOpen(
      collection: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollectionRegistered(
      collection: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenCertified(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenRegistered(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CollectionAdded(address,address)"(
      collectionAddress?: string | null,
      identityAddress?: string | null
    ): CollectionAddedEventFilter;
    CollectionAdded(
      collectionAddress?: string | null,
      identityAddress?: string | null
    ): CollectionAddedEventFilter;

    "CollectionCreated(address,address)"(
      collectionAddress?: string | null,
      identityAddress?: string | null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      collectionAddress?: string | null,
      identityAddress?: string | null
    ): CollectionCreatedEventFilter;

    "TokenAdded(address,address,uint256)"(
      collectionAddress?: string | null,
      identityAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TokenAddedEventFilter;
    TokenAdded(
      collectionAddress?: string | null,
      identityAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TokenAddedEventFilter;

    "TokenCreated(address,address,uint256)"(
      collectionAddress?: string | null,
      identityAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TokenCreatedEventFilter;
    TokenCreated(
      collectionAddress?: string | null,
      identityAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TokenCreatedEventFilter;
  };

  estimateGas: {
    AddCollection(
      creator: string,
      collection: string,
      fresh: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    AddToken(
      creator: string,
      collection: string,
      tokenId: BigNumberish,
      fresh: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultUriType(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectionIdentity(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionType(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollectionCertified(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollectionOpen(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollectionRegistered(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenCertified(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenRegistered(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AddCollection(
      creator: string,
      collection: string,
      fresh: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    AddToken(
      creator: string,
      collection: string,
      tokenId: BigNumberish,
      fresh: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultUriType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollectionIdentity(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionType(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollectionCertified(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollectionOpen(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollectionRegistered(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenCertified(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenRegistered(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
