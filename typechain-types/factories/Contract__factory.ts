/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Contract, ContractInterface } from "../Contract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "param1",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "param2",
        type: "address",
      },
    ],
    name: "Event",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "Function",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "publicStateVariable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ed8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063809ab43c1460375780639b261c2b146052575b600080fd5b603f60015481565b6040519081526020015b60405180910390f35b6061605d366004607d565b9091565b604080519283526001600160a01b039091166020830152016049565b60008060408385031215608f57600080fd5b8235915060208301356001600160a01b038116811460ac57600080fd5b80915050925092905056fea26469706673582212207710c362d187b4079deff1523be3226c3ad1a32264b1e0171c73e34c356a6d9d64736f6c634300080c0033";

type ContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Contract__factory extends ContractFactory {
  constructor(...args: ContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Contract";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Contract> {
    return super.deploy(overrides || {}) as Promise<Contract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Contract {
    return super.attach(address) as Contract;
  }
  connect(signer: Signer): Contract__factory {
    return super.connect(signer) as Contract__factory;
  }
  static readonly contractName: "Contract";
  public readonly contractName: "Contract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractInterface {
    return new utils.Interface(_abi) as ContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Contract {
    return new Contract(address, _abi, signerOrProvider) as Contract;
  }
}
