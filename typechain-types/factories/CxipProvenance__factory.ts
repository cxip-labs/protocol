/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CxipProvenance,
  CxipProvenanceInterface,
} from "../CxipProvenance";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "identityAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "IdentityBlacklisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "identityAddress",
        type: "address",
      },
    ],
    name: "IdentityCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "identityAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "initiatingWallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "IdentityWalletAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "saltHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "secondaryWallet",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
        ],
        internalType: "struct Verification",
        name: "verification",
        type: "tuple",
      },
    ],
    name: "createIdentity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getIdentity",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "getWalletIdentity",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "informAboutNewWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "identityAddress",
        type: "address",
      },
    ],
    name: "isIdentityBlacklisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "identityAddress",
        type: "address",
      },
    ],
    name: "isIdentityValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600355610d63806100256000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630172e60e1461006757806336afc6fa1461008f5780634b19fac8146100b65780638ea08f59146100e2578063e327f60b146100f7578063eb32df301461010a575b600080fd5b61007a610075366004610a4d565b610136565b60405190151581526020015b60405180910390f35b336000908152602081905260409020546001600160a01b03165b6040516100869190610a6a565b6100a96100c4366004610a4d565b6001600160a01b039081166000908152602081905260409020541690565b6100f56100f0366004610a7e565b61017d565b005b6100f5610105366004610a4d565b6104e3565b61007a610118366004610a4d565b6001600160a01b031660009081526002602052604090205460ff1690565b6001600160a01b03811660009081526001602052604081205460ff16801561017757506001600160a01b03821660009081526002602052604090205460ff16155b92915050565b600354600214156101a95760405162461bcd60e51b81526004016101a090610ac8565b60405180910390fd5b60026003556001600160a01b0382161515336101c481610734565b156101e15760405162461bcd60e51b81526004016101a090610aff565b6001600160a01b0381811660009081526020819052604090205416156102455760405162461bcd60e51b815260206004820152601960248201527810d612540e881dd85b1b195d08185b1c9958591e481d5cd959603a1b60448201526064016101a0565b606085901c6001600160a01b0382161461029b5760405162461bcd60e51b8152602060048201526017602482015276086b092a07440d2dcecc2d8d2c840e6c2d8e840d0c2e6d604b1b60448201526064016101a0565b81156103d8576102aa84610734565b156102c75760405162461bcd60e51b81526004016101a090610aff565b6001600160a01b03848116600090815260208190526040902054161561032f5760405162461bcd60e51b815260206004820181905260248201527f435849503a207365636f6e642077616c6c657420616c7265616479207573656460448201526064016101a0565b610392848435602086013561034a6060880160408901610b34565b6040516bffffffffffffffffffffffff1930606090811b8216602084015288811b821660348401528b901b166048820152605c0160405160208183030381529060405261076e565b6103d85760405162461bcd60e51b8152602060048201526017602482015276435849503a20696e76616c6964207369676e617475726560481b60448201526064016101a0565b60006040518061018001604052806101488152602001610be6610148913990506000868251602084016000f560405163784d200b60e11b81526001600160a01b03858116600483015288811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561045357600080fd5b505af1158015610467573d6000803e3d6000fd5b505050506001600160a01b0383811660009081526020818152604080832080546001600160a01b0319169486169485179055928252600190819052919020805460ff191690911790556104b9816109af565b6104c48184856109e6565b83156104d5576104d58184886109e6565b505060016003555050505050565b600354600214156105065760405162461bcd60e51b81526004016101a090610ac8565b60026003553360008181526001602052604090205460ff1661056a5760405162461bcd60e51b815260206004820152601f60248201527f435849503a20696e76616c6964204964656e7469747920636f6e74726163740060448201526064016101a0565b6001600160a01b0382811660009081526020819052604090205416156105d25760405162461bcd60e51b815260206004820152601a60248201527f435849503a2077616c6c657420616c726561647920616464656400000000000060448201526064016101a0565b604051637f247e4960e01b815281906001600160a01b03821690637f247e4990610600908690600401610a6a565b602060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610b57565b6106895760405162461bcd60e51b815260206004820152601960248201527810d612540e881d5b9c9959da5cdd195c9959081dd85b1b195d603a1b60448201526064016101a0565b61070082826001600160a01b031663757df8fd866040518263ffffffff1660e01b81526004016106b99190610a6a565b602060405180830381865afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa9190610b79565b856109e6565b506001600160a01b03918216600090815260208190526040902080546001600160a01b031916919092161790556001600355565b6000813f801580159061076757507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708114155b9392505050565b60008060008351602014156108965760208401519150600182868989604051600081526020016040526040516107a79493929190610b96565b6020604051602081039080840390855afa1580156107c9573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b031614156107fa576001925050506109a6565b60018260405160200161080d9190610bb4565b60405160208183030381529060405280519060200120868989604051600081526020016040526040516108439493929190610b96565b6020604051602081039080840390855afa158015610865573d6000803e3d6000fd5b505050602060405103519050806001600160a01b0316886001600160a01b03161415610896576001925050506109a6565b600084805190602001209050600181878a8a604051600081526020016040526040516108c59493929190610b96565b6020604051602081039080840390855afa1580156108e7573d6000803e3d6000fd5b505050602060405103519150816001600160a01b0316896001600160a01b0316141561091957600193505050506109a6565b8060405160200161092a9190610bb4565b604051602081830303815290604052805190602001209050600181878a8a604051600081526020016040526040516109659493929190610b96565b6020604051602081039080840390855afa158015610987573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038b81169116149450505050505b95945050505050565b6040516001600160a01b038216907fac993fde3b9423ff59e4a23cded8e89074c9c8740920d1d870f586ba7c5c8cf090600090a250565b806001600160a01b0316826001600160a01b0316846001600160a01b03167fb0c925de9f75be2b7e6846649175f19d3a5a2697cbd65f9494406076cf546fa160405160405180910390a4505050565b6001600160a01b0381168114610a4a57600080fd5b50565b600060208284031215610a5f57600080fd5b813561076781610a35565b6001600160a01b0391909116815260200190565b600080600083850360a0811215610a9457600080fd5b843593506020850135610aa681610a35565b92506060603f1982011215610aba57600080fd5b506040840190509250925092565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f435849503a2063616e6e6f742075736520736d61727420636f6e747261637473604082015260600190565b600060208284031215610b4657600080fd5b813560ff8116811461076757600080fd5b600060208284031215610b6957600080fd5b8151801515811461076757600080fd5b600060208284031215610b8b57600080fd5b815161076781610a35565b93845260ff9290921660208401526040830152606082015260800190565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c019056fe608060405234801561001057600080fd5b50610128806100206000396000f3fe608060408190527f38dc9c6800000000000000000000000000000000000000000000000000000000815260009073deaddeaddeaddeaddeaddeaddeaddeaddeaddead906338dc9c689060849060209060048186803b158015605f57600080fd5b505afa1580156072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906094919060b9565b90503660008037600080366000845af43d6000803e80801560b4573d6000f35b3d6000fd5b60006020828403121560c9578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811460eb578182fd5b939250505056fea2646970667358221220fdc58b44f80b9f0e5d40441fd91201d5e8359fd755ec84feeef0b794c446ba9a64736f6c63430008040033a26469706673582212204dc4b0a896f06a92189b0258383803788ec83434aab323d57b561e585aea2ee364736f6c634300080c0033";

type CxipProvenanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CxipProvenanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CxipProvenance__factory extends ContractFactory {
  constructor(...args: CxipProvenanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CxipProvenance";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CxipProvenance> {
    return super.deploy(overrides || {}) as Promise<CxipProvenance>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CxipProvenance {
    return super.attach(address) as CxipProvenance;
  }
  connect(signer: Signer): CxipProvenance__factory {
    return super.connect(signer) as CxipProvenance__factory;
  }
  static readonly contractName: "CxipProvenance";
  public readonly contractName: "CxipProvenance";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CxipProvenanceInterface {
    return new utils.Interface(_abi) as CxipProvenanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CxipProvenance {
    return new Contract(address, _abi, signerOrProvider) as CxipProvenance;
  }
}
