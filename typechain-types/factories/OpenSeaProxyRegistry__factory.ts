/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OpenSeaProxyRegistry,
  OpenSeaProxyRegistryInterface,
} from "../OpenSeaProxyRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "proxies",
    outputs: [
      {
        internalType: "contract OpenSeaOwnableDelegateProxy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c455279114602d575b600080fd5b60536038366004606f565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600060208284031215608057600080fd5b81356001600160a01b0381168114609657600080fd5b939250505056fea2646970667358221220882f2a08685074696155893dfb083801e893f62f4da0f852c8bba3bf195c933264736f6c634300080c0033";

type OpenSeaProxyRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OpenSeaProxyRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OpenSeaProxyRegistry__factory extends ContractFactory {
  constructor(...args: OpenSeaProxyRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "OpenSeaProxyRegistry";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OpenSeaProxyRegistry> {
    return super.deploy(overrides || {}) as Promise<OpenSeaProxyRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OpenSeaProxyRegistry {
    return super.attach(address) as OpenSeaProxyRegistry;
  }
  connect(signer: Signer): OpenSeaProxyRegistry__factory {
    return super.connect(signer) as OpenSeaProxyRegistry__factory;
  }
  static readonly contractName: "OpenSeaProxyRegistry";
  public readonly contractName: "OpenSeaProxyRegistry";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OpenSeaProxyRegistryInterface {
    return new utils.Interface(_abi) as OpenSeaProxyRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OpenSeaProxyRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OpenSeaProxyRegistry;
  }
}
