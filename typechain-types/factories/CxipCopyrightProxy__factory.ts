/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CxipCopyrightProxy,
  CxipCopyrightProxyInterface,
} from "../CxipCopyrightProxy";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f68061001f6000396000f3fe6080604081905263daded79f60e01b815260009073e7f1725e7734ce288f8367e1bb143e90bb3f05129063daded79f90608490602090600481865afa158015604b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190606d91906092565b90503660008037600080366000845af43d6000803e808015608d573d6000f35b3d6000fd5b60006020828403121560a357600080fd5b81516001600160a01b038116811460b957600080fd5b939250505056fea26469706673582212202788f462e3a0bc3afb134b19b6ace0b231800d1ec4fbd7f5261fdf5ebbd3f38864736f6c634300080c0033";

type CxipCopyrightProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CxipCopyrightProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CxipCopyrightProxy__factory extends ContractFactory {
  constructor(...args: CxipCopyrightProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CxipCopyrightProxy";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CxipCopyrightProxy> {
    return super.deploy(overrides || {}) as Promise<CxipCopyrightProxy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CxipCopyrightProxy {
    return super.attach(address) as CxipCopyrightProxy;
  }
  connect(signer: Signer): CxipCopyrightProxy__factory {
    return super.connect(signer) as CxipCopyrightProxy__factory;
  }
  static readonly contractName: "CxipCopyrightProxy";
  public readonly contractName: "CxipCopyrightProxy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CxipCopyrightProxyInterface {
    return new utils.Interface(_abi) as CxipCopyrightProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CxipCopyrightProxy {
    return new Contract(address, _abi, signerOrProvider) as CxipCopyrightProxy;
  }
}
