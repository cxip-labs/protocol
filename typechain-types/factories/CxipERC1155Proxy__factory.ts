/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CxipERC1155Proxy,
  CxipERC1155ProxyInterface,
} from "../CxipERC1155Proxy";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f68061001f6000396000f3fe60806040819052631680e88360e31b815260009073dfbb74177c45c82ac06327c204bb5ef2daec57b89063b407441890608490602090600481865afa158015604b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190606d91906092565b90503660008037600080366000845af43d6000803e808015608d573d6000f35b3d6000fd5b60006020828403121560a357600080fd5b81516001600160a01b038116811460b957600080fd5b939250505056fea2646970667358221220a7694bafcd6b766f42a619bfedd67c0da86b1ae879a4e59477b15abaf512c03464736f6c634300080c0033";

type CxipERC1155ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CxipERC1155ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CxipERC1155Proxy__factory extends ContractFactory {
  constructor(...args: CxipERC1155ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CxipERC1155Proxy";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CxipERC1155Proxy> {
    return super.deploy(overrides || {}) as Promise<CxipERC1155Proxy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CxipERC1155Proxy {
    return super.attach(address) as CxipERC1155Proxy;
  }
  connect(signer: Signer): CxipERC1155Proxy__factory {
    return super.connect(signer) as CxipERC1155Proxy__factory;
  }
  static readonly contractName: "CxipERC1155Proxy";
  public readonly contractName: "CxipERC1155Proxy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CxipERC1155ProxyInterface {
    return new utils.Interface(_abi) as CxipERC1155ProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CxipERC1155Proxy {
    return new Contract(address, _abi, signerOrProvider) as CxipERC1155Proxy;
  }
}
