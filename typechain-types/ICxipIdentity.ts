/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type VerificationStruct = {
  r: BytesLike;
  s: BytesLike;
  v: BigNumberish;
};

export type VerificationStructOutput = [string, string, number] & {
  r: string;
  s: string;
  v: number;
};

export type CollectionDataStruct = {
  name: BytesLike;
  name2: BytesLike;
  symbol: BytesLike;
  royalties: string;
  bps: BigNumberish;
};

export type CollectionDataStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber
] & {
  name: string;
  name2: string;
  symbol: string;
  royalties: string;
  bps: BigNumber;
};

export type TokenDataStruct = {
  payloadHash: BytesLike;
  payloadSignature: VerificationStruct;
  creator: string;
  arweave: BytesLike;
  arweave2: BytesLike;
  ipfs: BytesLike;
  ipfs2: BytesLike;
};

export type TokenDataStructOutput = [
  string,
  VerificationStructOutput,
  string,
  string,
  string,
  string,
  string
] & {
  payloadHash: string;
  payloadSignature: VerificationStructOutput;
  creator: string;
  arweave: string;
  arweave2: string;
  ipfs: string;
  ipfs2: string;
};

export interface ICxipIdentityInterface extends utils.Interface {
  contractName: "ICxipIdentity";
  functions: {
    "addSignedWallet(address,uint8,bytes32,bytes32)": FunctionFragment;
    "addWallet(address)": FunctionFragment;
    "connectWallet()": FunctionFragment;
    "createCustomERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96),bytes32,bytes)": FunctionFragment;
    "createERC721Collection(bytes32,address,(bytes32,bytes32,uint8),(bytes32,bytes32,bytes32,address,uint96))": FunctionFragment;
    "createERC721Token(address,uint256,(bytes32,(bytes32,bytes32,uint8),address,bytes32,bytes11,bytes32,bytes14),(bytes32,bytes32,uint8))": FunctionFragment;
    "getAuthorizer(address)": FunctionFragment;
    "getCollectionById(uint256)": FunctionFragment;
    "getCollectionType(address)": FunctionFragment;
    "getWallets()": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "isCollectionCertified(address)": FunctionFragment;
    "isCollectionOpen(address)": FunctionFragment;
    "isCollectionRegistered(address)": FunctionFragment;
    "isNew()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "isTokenCertified(address,uint256)": FunctionFragment;
    "isTokenRegistered(address,uint256)": FunctionFragment;
    "isWalletRegistered(address)": FunctionFragment;
    "listCollections(uint256,uint256)": FunctionFragment;
    "nextNonce(address)": FunctionFragment;
    "totalCollections()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSignedWallet",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "addWallet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "connectWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCustomERC721Collection",
    values: [
      BytesLike,
      string,
      VerificationStruct,
      CollectionDataStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC721Collection",
    values: [BytesLike, string, VerificationStruct, CollectionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC721Token",
    values: [string, BigNumberish, TokenDataStruct, VerificationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWallets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionCertified",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionOpen",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionRegistered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isNew", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTokenCertified",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenRegistered",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "listCollections",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalCollections",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addSignedWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCustomERC721Collection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC721Collection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC721Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWallets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionCertified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isNew", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenCertified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCollections",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICxipIdentity extends BaseContract {
  contractName: "ICxipIdentity";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICxipIdentityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSignedWallet(
      newWallet: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connectWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCustomERC721Collection(
      saltHash: BytesLike,
      collectionCreator: string,
      verification: VerificationStruct,
      collectionData: CollectionDataStruct,
      slot: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createERC721Collection(
      saltHash: BytesLike,
      collectionCreator: string,
      verification: VerificationStruct,
      collectionData: CollectionDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createERC721Token(
      collection: string,
      id: BigNumberish,
      tokenData: TokenDataStruct,
      verification: VerificationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuthorizer(wallet: string, overrides?: CallOverrides): Promise<[string]>;

    getCollectionById(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCollectionType(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getWallets(overrides?: CallOverrides): Promise<[string[]]>;

    init(
      wallet: string,
      secondaryWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCollectionCertified(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollectionOpen(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollectionRegistered(
      collection: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNew(overrides?: CallOverrides): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    isTokenCertified(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenRegistered(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWalletRegistered(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listCollections(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    nextNonce(wallet: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCollections(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addSignedWallet(
    newWallet: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWallet(
    newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connectWallet(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCustomERC721Collection(
    saltHash: BytesLike,
    collectionCreator: string,
    verification: VerificationStruct,
    collectionData: CollectionDataStruct,
    slot: BytesLike,
    bytecode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createERC721Collection(
    saltHash: BytesLike,
    collectionCreator: string,
    verification: VerificationStruct,
    collectionData: CollectionDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createERC721Token(
    collection: string,
    id: BigNumberish,
    tokenData: TokenDataStruct,
    verification: VerificationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuthorizer(wallet: string, overrides?: CallOverrides): Promise<string>;

  getCollectionById(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCollectionType(
    collection: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getWallets(overrides?: CallOverrides): Promise<string[]>;

  init(
    wallet: string,
    secondaryWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCollectionCertified(
    collection: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollectionOpen(
    collection: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollectionRegistered(
    collection: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNew(overrides?: CallOverrides): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  isTokenCertified(
    collection: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenRegistered(
    collection: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWalletRegistered(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listCollections(
    offset: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  nextNonce(wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalCollections(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addSignedWallet(
      newWallet: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addWallet(newWallet: string, overrides?: CallOverrides): Promise<void>;

    connectWallet(overrides?: CallOverrides): Promise<void>;

    createCustomERC721Collection(
      saltHash: BytesLike,
      collectionCreator: string,
      verification: VerificationStruct,
      collectionData: CollectionDataStruct,
      slot: BytesLike,
      bytecode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    createERC721Collection(
      saltHash: BytesLike,
      collectionCreator: string,
      verification: VerificationStruct,
      collectionData: CollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createERC721Token(
      collection: string,
      id: BigNumberish,
      tokenData: TokenDataStruct,
      verification: VerificationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizer(wallet: string, overrides?: CallOverrides): Promise<string>;

    getCollectionById(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCollectionType(
      collection: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getWallets(overrides?: CallOverrides): Promise<string[]>;

    init(
      wallet: string,
      secondaryWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isCollectionCertified(
      collection: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollectionOpen(
      collection: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollectionRegistered(
      collection: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNew(overrides?: CallOverrides): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    isTokenCertified(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenRegistered(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWalletRegistered(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listCollections(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    nextNonce(wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalCollections(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addSignedWallet(
      newWallet: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connectWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCustomERC721Collection(
      saltHash: BytesLike,
      collectionCreator: string,
      verification: VerificationStruct,
      collectionData: CollectionDataStruct,
      slot: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createERC721Collection(
      saltHash: BytesLike,
      collectionCreator: string,
      verification: VerificationStruct,
      collectionData: CollectionDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createERC721Token(
      collection: string,
      id: BigNumberish,
      tokenData: TokenDataStruct,
      verification: VerificationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuthorizer(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionById(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionType(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWallets(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      wallet: string,
      secondaryWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCollectionCertified(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollectionOpen(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollectionRegistered(
      collection: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNew(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenCertified(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenRegistered(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWalletRegistered(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listCollections(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextNonce(wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalCollections(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addSignedWallet(
      newWallet: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connectWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCustomERC721Collection(
      saltHash: BytesLike,
      collectionCreator: string,
      verification: VerificationStruct,
      collectionData: CollectionDataStruct,
      slot: BytesLike,
      bytecode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createERC721Collection(
      saltHash: BytesLike,
      collectionCreator: string,
      verification: VerificationStruct,
      collectionData: CollectionDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createERC721Token(
      collection: string,
      id: BigNumberish,
      tokenData: TokenDataStruct,
      verification: VerificationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuthorizer(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionById(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionType(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWallets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      wallet: string,
      secondaryWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCollectionCertified(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollectionOpen(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollectionRegistered(
      collection: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNew(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTokenCertified(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenRegistered(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWalletRegistered(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listCollections(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextNonce(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
